<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LearnOpenGL学习笔记（八） - 测试与混合</title>
    <link href="/2024/08/05/LearnOpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89-%E6%B5%8B%E8%AF%95%E4%B8%8E%E6%B7%B7%E5%90%88/"/>
    <url>/2024/08/05/LearnOpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89-%E6%B5%8B%E8%AF%95%E4%B8%8E%E6%B7%B7%E5%90%88/</url>
    
    <content type="html"><![CDATA[<p>重新开始。 <span id="more"></span></p><h2 id="深度测试">深度测试</h2><p>深度缓冲（Depth Buffer，orZ-Buffer）用于放置被阻挡的面被渲染到其他面的前面。</p><p>在每个Fragment中都存储有DepthBuffer信息，它由程序自动创建，一般情况下是24位的float。</p><p>当深度测试（DepthTest）被启用时，OpenGL会把Fragment的深度值和深度缓冲内容进行对比，这个过程被称为深度测试。测试通过时，深度缓冲就会更新为这个片段的深度值，否则这个片段会被剔除。</p><p>深度缓冲运行在模板测试后，作用于<strong>屏幕空间</strong>。</p><blockquote><p><code>gl_FragCoord</code>是GLSL内建变量，它是一个vec3，x和y分量代表了片段的屏幕坐标（左下角为原点），z分量为片段的深度值。</p><p>提前深度测试（Early Depth Testing,Early-Z）允许深度测试在Fragment着色器之前运行。只要判断该片段在其他物体之后，便会将他提前剔除。</p><p>使用Early-Z的条件是，Fragment Shader里不能有写入深度值的操作。</p></blockquote><p>使用<code>glEnable(GL_DEPTH_TEST)</code>开启深度测试。</p><p>开启深度测试后，在每个渲染迭代开始之前还应当使用<code>glClear(GL_DEPTH_BUFFER_BIT)</code>清除深度缓冲。</p><p>使用<code>glDepthMask(GL_FALSE)</code>禁用深度缓冲写入，深度缓冲将不会更新，作为<strong>只读</strong>属性。</p><h3 id="深度测试函数">深度测试函数</h3><p><code>glDepthFunc</code>函数用于控制OpenGL什么时候通过、丢弃片段，以及什么时候更新深度缓冲。它接收一个比较符。</p><table><thead><tr><th style="text-align: left;">函数</th><th style="text-align: left;">描述</th></tr></thead><tbody><tr><td style="text-align: left;">GL_ALWAYS</td><td style="text-align: left;">永远通过深度测试</td></tr><tr><td style="text-align: left;">GL_NEVER</td><td style="text-align: left;">永远不通过深度测试</td></tr><tr><td style="text-align: left;">GL_LESS</td><tdstyle="text-align: left;">在片段深度值小于缓冲的深度值时通过测试</td></tr><tr><td style="text-align: left;">GL_EQUAL</td><tdstyle="text-align: left;">在片段深度值等于缓冲区的深度值时通过测试</td></tr><tr><td style="text-align: left;">GL_LEQUAL</td><tdstyle="text-align: left;">在片段深度值小于等于缓冲区的深度值时通过测试</td></tr><tr><td style="text-align: left;">GL_GREATER</td><tdstyle="text-align: left;">在片段深度值大于缓冲区的深度值时通过测试</td></tr><tr><td style="text-align: left;">GL_NOTEQUAL</td><tdstyle="text-align: left;">在片段深度值不等于缓冲区的深度值时通过测试</td></tr><tr><td style="text-align: left;">GL_GEQUAL</td><tdstyle="text-align: left;">在片段深度值大于等于缓冲区的深度值时通过测试</td></tr></tbody></table><p>默认比较符为<code>GL_LESS</code></p><blockquote><p>我该如何理解深度缓冲值的更新？</p><p>以<code>GL_LESS</code>为例：当视口中还未渲染任何东西时，深度缓冲值是无穷大。</p><p>当我们渲染了两个方块时，这两个方块的z值必然比无穷大要小，它们通过了深度测试，两个方块占据的片段位置的深度缓冲被更新为新的深度值。</p><p>当渲染位于两个方块底下的地板时，对于没被方块遮挡的部分的片段深度值，它们的深度缓冲值依然是无穷大，所以它们能通过深度测试，正常显示。而被方块遮挡的部分，很明显深度值要大于方块的深度值，所以未通过测试，被剔除。</p></blockquote><h3 id="深度值精度">深度值精度</h3><p>只要一个float表示的是深度，那么它的范围必定是[0.0,1.0]。深度缓冲存储的float的范围都是如此。</p><p>但我们知道，片段的z值可不是这样。为了把z值转换为深度值，我们使用方程：<spanclass="math display">\[\begin{equation} F_{depth} = \frac{z - near}{far- near} \end{equation}\]</span></p><p>其中，<code>near</code>和<code>far</code>是平截头体的近平面z值和远平面z值。</p><p>上面的公式被称为线性深度缓冲（Linear DepthBuffer）。这种方法实际上不是很好，因为对于透视投影的观察者来说，极远处物体的z轴变化是很难观察到的，而近处物体z轴很微小的变化都会很明显。为了体现这点，我们引入非线性深度缓冲方程：<spanclass="math inline">\(\begin{equation} F_{depth} = \frac{1/z -1/near}{1/far - 1/near} \end{equation}\)</span></p><p>对于这个方程，z值和最终深度的变化如下图：</p><figure><imgsrc="https://learnopengl-cn.github.io/img/04/01/depth_non_linear_graph.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>可以看到，深度值的很大一部分都是由很小的z值决定的。</p><p>非线性深度值转换方程被嵌入到了投影矩阵中，在观察空间-&gt;裁剪空间的转换过程中被应用。</p><blockquote><p>这意味着，我们使用gl_FragCoord.z得到的值就是非线性深度值。</p></blockquote><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>z</mi><mrow><mi>v</mi><mi>i</mi><mi>e</mi><mi>w</mi></mrow></msub><mo>=</mo><mfrac><mrow><mn>2</mn><mo>⋅</mo><mi>f</mi><mi>a</mi><mi>r</mi><mo>⋅</mo><mi>n</mi><mi>e</mi><mi>a</mi><mi>r</mi></mrow><mrow><mo stretchy="false">(</mo><mi>f</mi><mi>a</mi><mi>r</mi><mo>+</mo><mi>n</mi><mi>e</mi><mi>a</mi><mi>r</mi><mo stretchy="false">)</mo><mo>−</mo><mo stretchy="false">(</mo><mi>f</mi><mi>a</mi><mi>r</mi><mo>−</mo><mi>n</mi><mi>e</mi><mi>a</mi><mi>r</mi><mo stretchy="false">)</mo><mo>⋅</mo><msub><mi>z</mi><mrow><mi>n</mi><mi>d</mi><mi>c</mi></mrow></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">z_{view} = \frac{2 \cdot far \cdot near}{(far + near)-(far - near) \cdot z_{ndc} }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.4522em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mclose mtight">)</span><span class="mbin mtight">−</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mclose mtight">)</span><span class="mbin mtight">⋅</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:-0.044em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1512em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mbin mtight">⋅</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">⋅</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><p>上述方程用于把非线性深度值转换为线性。它是使用投影矩阵推导得出的。其中<code>Zndc</code>是NDC坐标下的z值，由原深度值*2-1变换得到。在shader中可以这么写：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-type">float</span> z = depth * <span class="hljs-number">2.0</span> - <span class="hljs-number">1.0</span>;<br><span class="hljs-type">float</span> linearDepth = (<span class="hljs-number">2.0</span> * near * far) / (far + near - z * (far - near));<br></code></pre></td></tr></table></figure><h3 id="深度冲突">深度冲突</h3><p>深度冲突（Z-fight）指两个片段的深度值非常接近，以至于深度缓冲没有足够的精度来决定该显示哪个片段的情况。深度冲突发生时，可以看到锯齿状的贴图闪烁。</p><p>一般我们采用下列方法防止深度冲突：</p><ul><li>不要把两个物体摆的太近。</li><li>提高近平面的值，从而让整个平截头体的深度缓冲精度提高。代价是近处物体可能会被剔除。</li></ul><blockquote><p>可以这么理解：让非线性转换中，z-深度曲线曲率最大的部分向后移动，从而让z值稍大的部分也能以高精度进行深度测试。</p></blockquote><ul><li>使用高精度深度缓冲。</li></ul><h2 id="模板测试">模板测试</h2><p>模板测试（Stencil Test）紧接着FragmentShader处理完一个片段后执行。</p><p>模板缓冲类似于一个遮罩。当片元的模板缓冲值为1时，通过测试，否则剔除。</p><p>与深度缓冲类似，模板缓冲通过<code>glEnable(GL_STENCIL_TEST)</code>开启，每次渲染循环通过<code>glClear(GL_STENCIL_BUFFER_BIT)</code>清除上帧缓存，通过<code>glStencilMask</code>设置位掩码。</p><p><code>glStencilFunc(GLenum func, GLint ref, GLuint mask)</code>用于告诉程序如何进行模板测试。</p><blockquote><p><code>func</code>：设置模板缓冲函数。可用的选项有：GL_NEVER、GL_LESS、GL_LEQUAL、GL_GREATER、GL_GEQUAL、GL_EQUAL、GL_NOTEQUAL和GL_ALWAYS。</p><p><code>ref</code>：参考值，之后的模板缓冲将与此值比较。</p><p><code>mask</code>：掩码，一般都是0xFF。</p><p>以<code>glStencilFunc(GL_EQUAL, 1, 0xFF)</code>为例，这个语句代表：只要模板值等于1，就通过模板测试。</p></blockquote><p><code>glStencilOp(GLenum sfail, GLenum dpfail, GLenum dppass)</code>用于告诉程序如何更新模板缓冲值。</p><blockquote><p><code>sfail</code>：模板测试失败时采取的行为。</p><p><code>dpfail</code>：模板测试通过，但深度测试失败的行为。</p><p><code>dppass</code>：全部通过时采取的行为。</p></blockquote><p>行为选项有：</p><table><thead><tr><th style="text-align: left;">行为</th><th style="text-align: left;">描述</th></tr></thead><tbody><tr><td style="text-align: left;">GL_KEEP</td><td style="text-align: left;">保持当前储存的模板值</td></tr><tr><td style="text-align: left;">GL_ZERO</td><td style="text-align: left;">将模板值设置为0</td></tr><tr><td style="text-align: left;">GL_REPLACE</td><tdstyle="text-align: left;">将模板值设置为glStencilFunc函数设置的<code>ref</code>值</td></tr><tr><td style="text-align: left;">GL_INCR</td><td style="text-align: left;">如果模板值小于最大值则将模板值加1</td></tr><tr><td style="text-align: left;">GL_INCR_WRAP</td><tdstyle="text-align: left;">与GL_INCR一样，但如果模板值超过了最大值则归零</td></tr><tr><td style="text-align: left;">GL_DECR</td><td style="text-align: left;">如果模板值大于最小值则将模板值减1</td></tr><tr><td style="text-align: left;">GL_DECR_WRAP</td><tdstyle="text-align: left;">与GL_DECR一样，但如果模板值小于0则将其设置为最大值</td></tr><tr><td style="text-align: left;">GL_INVERT</td><td style="text-align: left;">按位翻转当前的模板缓冲值</td></tr></tbody></table><h3 id="描边">描边</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">glEnable</span>(GL_DEPTH_TEST);<br><span class="hljs-built_in">glStencilOp</span>(GL_KEEP, GL_KEEP, GL_REPLACE);  <br><br><span class="hljs-built_in">glClear</span>(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT); <br><br><span class="hljs-built_in">glStencilMask</span>(<span class="hljs-number">0x00</span>); <span class="hljs-comment">// 记得保证我们在绘制地板的时候不会更新模板缓冲</span><br>normalShader.<span class="hljs-built_in">use</span>();<br><span class="hljs-built_in">DrawFloor</span>()  <br><br><span class="hljs-built_in">glStencilFunc</span>(GL_ALWAYS, <span class="hljs-number">1</span>, <span class="hljs-number">0xFF</span>); <br><span class="hljs-built_in">glStencilMask</span>(<span class="hljs-number">0xFF</span>); <br><span class="hljs-built_in">DrawTwoContainers</span>();<br><br><span class="hljs-built_in">glStencilFunc</span>(GL_NOTEQUAL, <span class="hljs-number">1</span>, <span class="hljs-number">0xFF</span>);<br><span class="hljs-built_in">glStencilMask</span>(<span class="hljs-number">0x00</span>); <br><span class="hljs-built_in">glDisable</span>(GL_DEPTH_TEST);<br>shaderSingleColor.<span class="hljs-built_in">use</span>(); <br><span class="hljs-built_in">DrawTwoScaledUpContainers</span>();<br><span class="hljs-built_in">glStencilMask</span>(<span class="hljs-number">0xFF</span>);<br><span class="hljs-built_in">glEnable</span>(GL_DEPTH_TEST);  <br></code></pre></td></tr></table></figure><blockquote><p>我该如何理解这段代码？</p><p>我们使用模板测试来实现描边的效果。</p><p>这里用的方法是：在原物体的位置，复制一个物体，将其略微放大一些。这个物体应用的Shader应当是不受光照影响的纯色Shader。</p><p>描边就是要让原物体好好地显示出来，而原物体所占据片元以外的地方，允许大物体显示。</p><p>首先，我们定义模板测试失败和成功后的结果：glStencilOp(GL_KEEP,GL_KEEP, GL_REPLACE);当模板测试通过时，替换片元模板值为ref值。否则保留原本的模板值。</p><p>我们需要先绘制不需要描边的物体。需要注意，绘制这些物体时，应当禁用模板缓冲（可以直接glDisable，也可以glStencilMask(0x00)）。</p><p>当绘制到原物体时，开启模板缓冲，让原物体占据片元区域的模板值变为1。</p><p><code>glStencilFunc(GL_ALWAYS,1,0XFF)</code>执行后，对于新渲染的片段，模板测试始终通过。</p><p><code>glStencilMask(0xFF)</code>开启模板值写入。</p><p>然后绘制原物体。</p><p>原物体绘制完毕后，片元的模板值更新完毕。改变模板测试规则：<code>glStencilFunc(GL_NOTEQUAL,1,0XFF)</code>，使得片段所处位置的模板值只有不为1时，才通过。</p><p>然后绘制大物体。因为原物体片元区域的模板值都是1，所以大物体的模板测试不会通过，这些片元不会被渲染。这就达到了描边的效果。</p><p>为什么要禁用深度测试呢？因为描边区域通常不可被障碍遮挡。如果有这个需求，也可以不禁用。</p></blockquote><h2 id="混合">混合</h2><p>png图片是四通道的，第四通道的值代表透明度（alpha）。</p><p>通过在FragmentShader中对采样的alpha值进行判断并剔除（discard），可以实现“透明的地方不渲染”的效果：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-type">vec4</span> col = <span class="hljs-built_in">texture</span>(tex,TexCoord);<br><span class="hljs-keyword">if</span>(col.a&lt;<span class="hljs-number">0.1</span>f)&#123;<br>    <span class="hljs-keyword">discard</span>;<br>&#125;<br>FragColor = col;<br></code></pre></td></tr></table></figure><blockquote><p>采用这种方法实现透明显示时，需要把纹理环绕方式设置为<code>GL_CLAMP_TO_EDGE</code>，否则当实际渲染物体的大小超过纹理大小时，底部uv会重复到顶部，导致物体的重复渲染。</p><p>采用discard方案的缺点是，无法实现半透明物体的渲染。同时，使用discard以后Early-Z将失效。</p></blockquote><p>为实现半透明物体的渲染，我们引入Blend技术。</p><p><code>glEnable(GL_BLEND)</code></p><p>Blend借助alpha值实现”物体本身“和”后方物体“颜色的混合。让我们举一个具体例子：</p><figure><imgsrc="https://learnopengl-cn.github.io/img/04/03/blending_equation.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>我们把绿色半透明Quad放在红色不透明Quad前面。绿色Quad的alpha值是0.6，那么当二者叠加时，叠加区域的最终颜色中，绿色Quad对颜色的贡献值就是60%，红色则是(1-60%)=40%。最终颜色就是：</p><span class="katex-error" title="ParseError: KaTeX parse error: {equation} can be used only in display mode." style="color:#cc0000">\begin{equation}\bar{C}_{result} = \begin{pmatrix} \color{red}{0.0} \\ \color{green}{1.0} \\ \color{blue}{0.0} \\ \color{purple}{0.6} \end{pmatrix} * \color{green}{0.6} + \begin{pmatrix} \color{red}{1.0} \\ \color{green}{0.0} \\ \color{blue}{0.0} \\ \color{purple}{1.0} \end{pmatrix} * \color{red}{(1 - 0.6)} \end{equation}</span><blockquote><p>其中，0.6被称为<em>源因子值</em>，(1-0.6)被称为<em>目标因子值</em></p></blockquote><p><code>glBlendFunc(GLenum sfactor, GLenum dfactor)</code>用于设置源因子和目标因子值。</p><table><thead><tr><th style="text-align: left;">选项</th><th style="text-align: left;">值</th></tr></thead><tbody><tr><td style="text-align: left;"><code>GL_ZERO</code></td><td style="text-align: left;">因子等于0</td></tr><tr><td style="text-align: left;"><code>GL_ONE</code></td><td style="text-align: left;">因子等于1</td></tr><tr><td style="text-align: left;"><code>GL_SRC_COLOR</code></td><td style="text-align: left;">因子等于源颜色向量C¯source</td></tr><tr><td style="text-align: left;"><code>GL_ONE_MINUS_SRC_COLOR</code></td><td style="text-align: left;">因子等于1−C¯source1</td></tr><tr><td style="text-align: left;"><code>GL_DST_COLOR</code></td><td style="text-align: left;">因子等于目标颜色向量C¯destination</td></tr><tr><td style="text-align: left;"><code>GL_ONE_MINUS_DST_COLOR</code></td><td style="text-align: left;">因子等于1−C¯destination</td></tr><tr><td style="text-align: left;"><code>GL_SRC_ALPHA</code></td><td style="text-align: left;">因子等于C¯source的alpha分量</td></tr><tr><td style="text-align: left;"><code>GL_ONE_MINUS_SRC_ALPHA</code></td><td style="text-align: left;">因子等于1−C¯source的alpha分量</td></tr><tr><td style="text-align: left;"><code>GL_DST_ALPHA</code></td><td style="text-align: left;">因子等于C¯destination的alpha分量</td></tr><tr><td style="text-align: left;"><code>GL_ONE_MINUS_DST_ALPHA</code></td><td style="text-align: left;">因子等于1− C¯destination的alpha分量</td></tr><tr><td style="text-align: left;"><code>GL_CONSTANT_COLOR</code></td><td style="text-align: left;">因子等于常数颜色向量C¯constant</td></tr><tr><tdstyle="text-align: left;"><code>GL_ONE_MINUS_CONSTANT_COLOR</code></td><td style="text-align: left;">因子等于1−C¯constant1</td></tr><tr><td style="text-align: left;"><code>GL_CONSTANT_ALPHA</code></td><td style="text-align: left;">因子等于C¯constant的alpha分量</td></tr><tr><tdstyle="text-align: left;"><code>GL_ONE_MINUS_CONSTANT_ALPHA</code></td><td style="text-align: left;">因子等于1− C¯constant的alpha分量</td></tr></tbody></table><p>默认混合方式为<code>glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)</code>。C_constant使用<code>glBlendColor</code>函数设置。</p><blockquote><p><code>glBlendFuncSeparate</code>可以分别对RGBA通道使用不同的混合方式。</p><p><code>glBlendEquation(GLEnum mode)</code>可以改变混合的计算方式：</p><ul><li>GL_FUNC_ADD：默认选项，将两个分量相加：C¯result=Src+Dst</li><li>GL_FUNC_SUBTRACT：将两个分量相减： C¯result=Src−Dst</li><li>GL_FUNC_REVERSE_SUBTRACT：将两个分量相减，但顺序相反：C¯result=Dst−SrcC¯</li></ul></blockquote><p>混合与深度测试结合时，会出现问题。若一个物体深度值大于半透明物体，但在半透明物体后面渲染，深度测试不会管物体是不是半透明的，而是一刀切地把这个物体的片元全部丢弃了。</p><p>为了解决这一问题，我们必须把深度值大的物体放在渲染顺序的前面。</p><p>一般渲染顺序如下：</p><ol type="1"><li>先绘制所有不透明的物体。（因为不透明物体无需混合，无所谓渲染顺序）</li><li>对所有透明的物体排序。</li><li>按顺序绘制所有透明的物体。</li></ol><p>可以采用STL map自动排序的方式，管理所有透明物体：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++">std::map&lt;<span class="hljs-type">float</span>, glm::vec3&gt; sorted;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; windows.<span class="hljs-built_in">size</span>(); i++)<br>&#123;<br>    <span class="hljs-type">float</span> distance = glm::<span class="hljs-built_in">length</span>(camera.Position - windows[i]);<br>    sorted[distance] = windows[i];<br>&#125;<br></code></pre></td></tr></table></figure><p>但这种方法也只是简单地以物体的中心值作为位置顺序。当物体形状很复杂时，这种方法就不太好了，需要手动微调。一种较高级的解决这类问题的技术叫做次序无关透明度(OrderIndependent Transparency, OIT)。</p><h2 id="面剔除">面剔除</h2><p>每个封闭形状的面都有正反之分。在OpenGL中，通过三角形片段三个顶点的绘制顺序判断该三角形所在面的正反。默认情况下，逆时针顶点所定义的三角形为正向三角形。</p><p>背向观察者的面通常不会被渲染。如果能够取消这些面的渲染，程序速度将会提高约50%。</p><p><code>glEnable(GL_CULL_FACE)</code>用于开启面剔除。</p><p><code>glCullFace(GLEnum mode)</code>用于指定剔除的面。</p><ul><li>GL_FRONT：剔除正面</li><li>GL_BACK：剔除背面</li><li>GL_FRONT_AND_BACK：正反面都剔除</li></ul><p><code>glFrontFace(GLEnum mode)</code>用于指定正向三角形的定义。</p><ul><li>GL_CCW：逆时针三角形为正</li><li>GL_CW：顺时针三角形为正。</li></ul><p><strong>使用面缓冲时，必须确保顶点数据的定义是”逆时针为正“的顺序。否则会出现渲染错误。</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>图形学</tag>
      
      <tag>OpenGL</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LearnOpenGL学习笔记（七） - 模型导入</title>
    <link href="/2024/07/18/LearnOpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89-%E6%A8%A1%E5%9E%8B%E5%AF%BC%E5%85%A5/"/>
    <url>/2024/07/18/LearnOpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89-%E6%A8%A1%E5%9E%8B%E5%AF%BC%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>最难受的一集。 <span id="more"></span></p><h1 id="模型">模型</h1><h2 id="assimp">Assimp</h2><p>3D建模工具如Blender、3DSMax在导出模型文件时，会自动生成所有的顶点坐标、顶点法线和纹理坐标。</p><p><code>.obj</code>格式只包含了模型数据和材质信息（颜色、贴图等），而<code>collada</code>格式则非常丰富，甚至包含了场景、摄像机信息等。</p><p>Assimp是一个开源的模型导入库，支持数十种不同的3D模型格式。</p><p>使用Assimp导入模型时，通常会把模型加载入一个场景（Scene）对象，它包含了导入的模型/场景内的所有数据。Assimp会把场景载入为一系列的节点，每个节点包含了场景对象中存储数据的索引。</p><figure><imgsrc="https://learnopengl-cn.github.io/img/03/01/assimp_structure.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>Scene节点包含了对场景根节点的引用。根节点包含的子节点会有一系列指向场景节点中<code>mMeshes</code>数据中存储的网格数据的索引。Scene节点的<code>mMeshes</code>数组存储了真正的Mesh对象。</p><blockquote><p>我们可以这么理解：真正的Mesh数据存在Scene节点里，Scene节点本身在层级面板中不可见；</p><p>根节点和子节点就像是层级面板中的父对象和一个个子对象，它们不存储数据，只存储索引。</p></blockquote><p>Mesh对象包含了渲染需要的所有数据，如顶点位置、法向量、纹理坐标、面（Face）和材质（含贴图等）。</p><p>面指的是物体的渲染图元（Primitive），如三角形、点、线等。面包含了组成图元的顶点和索引。</p><p>借助Assimp加载模型的步骤如下：</p><ul><li>加载物体到Scene对象中</li><li>遍历所有节点，获取每个节点对应的Mesh对象</li><li>处理每个Mesh对象以获取渲染所需的数据</li></ul><p>完成上述步骤后，我们得到的是一系列Mesh数据，被包含在一个Model对象中。</p><blockquote><p>一个Model由若干个Mesh组成。一个Mesh是一个单独的形状，是OpenGL里绘制物体的最小单位。</p></blockquote><h3 id="引入工程">引入工程</h3><p>在<code>Github Release</code>页面下载最新版本的Assimp源码：<ahref="https://github.com/assimp/assimp/tree/master">assimp/assimp: Theofficial Open-Asset-Importer-Library Repository. Loads 40+3D-file-formats into one unified and clean data structure.(github.com)</a></p><p>把根目录在Clion中打开，然后构建项目，把构建好的dll放到libs文件夹下，随后修改CMakeList.txt：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.28</span>)<br><span class="hljs-keyword">project</span>(LearnOpenGL)<br><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">17</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_FLAGS_DEBUG <span class="hljs-string">&quot;$&#123;CMAKE_CXX_FLAGS_DEBUG&#125; -O0 -g&quot;</span>)<br><span class="hljs-keyword">set</span>(CMAKE_BUILD_TYPE Debug)<br><span class="hljs-comment"># 手动设置 GLFW 路径</span><br><span class="hljs-keyword">set</span>(GLFW_INCLUDE_DIR <span class="hljs-string">&quot;$&#123;CMAKE_SOURCE_DIR&#125;/include/GLFW&quot;</span>)<br><span class="hljs-keyword">set</span>(GLFW_LIB_DIR <span class="hljs-string">&quot;$&#123;CMAKE_SOURCE_DIR&#125;/libs&quot;</span>)<br><span class="hljs-keyword">set</span>(GLFW_LIBRARY <span class="hljs-string">&quot;$&#123;CMAKE_SOURCE_DIR&#125;/libs/glfw3.dll&quot;</span>)<br><span class="hljs-keyword">set</span>(ASSIMP_LIBRARY <span class="hljs-string">&quot;$&#123;CMAKE_SOURCE_DIR&#125;/libs/libassimp-5d.dll&quot;</span>)<br><span class="hljs-keyword">set</span>(ASSIMP_INCLUDE_DIR <span class="hljs-string">&quot;$&#123;CMAKE_SOURCE_DIR&#125;/include/assimp&quot;</span>)<br><span class="hljs-comment"># 添加 IMGUI 库</span><br><span class="hljs-keyword">add_library</span>(IMGUI SHARED<br>        ./imgui/imgui.cpp<br>        ./imgui/imgui_impl_glfw.cpp<br>        ./imgui/imgui_impl_opengl3.cpp<br>        ./imgui/imgui_draw.cpp<br>        ./imgui/imgui_tables.cpp<br>        ./imgui/imgui_widgets.cpp<br>        ./imgui/imgui_demo.cpp<br>        ./imgui/imgui_stdlib.cpp<br>)<br><br><span class="hljs-keyword">target_link_libraries</span>(IMGUI PRIVATE <span class="hljs-variable">$&#123;GLFW_LIBRARY&#125;</span>)<br><br><span class="hljs-comment"># 添加可执行文件</span><br><span class="hljs-keyword">add_executable</span>(LearnOpenGL<br>        Archive/main.cpp<br>        glad.c<br>        <span class="hljs-keyword">include</span>/shader_s.h<br>        GLMTest.cpp<br>        stbitmp.cpp<br>        <span class="hljs-keyword">include</span>/camera.h<br>        <span class="hljs-keyword">include</span>/mesh.h<br>        <span class="hljs-keyword">include</span>/model.h<br>        <span class="hljs-keyword">include</span>/shader.h<br>)<br><br><span class="hljs-comment"># 包含路径</span><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;GLFW_INCLUDE_DIR&#125;</span> <span class="hljs-string">&quot;$&#123;CMAKE_SOURCE_DIR&#125;/include&quot;</span> <span class="hljs-variable">$&#123;ASSIMP_INCLUDE_DIR&#125;</span>)<br><br><span class="hljs-comment"># 链接库</span><br><span class="hljs-keyword">target_link_libraries</span>(LearnOpenGL PRIVATE <span class="hljs-variable">$&#123;GLFW_LIBRARY&#125;</span> IMGUI <span class="hljs-variable">$&#123;ASSIMP_LIBRARY&#125;</span>)<br><br></code></pre></td></tr></table></figure><h3 id="assimp数据结构">Assimp数据结构</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">aiNode</span>&#123;<br>aiNode **mChildren; <span class="hljs-comment">//子节点数组</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *mMeshes; <span class="hljs-comment">//网格数据的索引数组</span><br>aiMetadata* mMetaData; <span class="hljs-comment">//元数据数组</span><br>aiString mName; <span class="hljs-comment">//节点名</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> mNumChildren; <span class="hljs-comment">//子节点数量</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> mNumMeshes; <span class="hljs-comment">//网格数量</span><br>aiNode *mParent; <span class="hljs-comment">//父节点</span><br>aiMatrix4x4 mTransformation; <span class="hljs-comment">//变换矩阵</span><br>&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">aiScene</span>&#123;<br>    aiAnimation** Animations; <span class="hljs-comment">//可通过HasAnimations成员函数判断是否为0</span><br>    aiCamera** mCameras; <span class="hljs-comment">//同上</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> mFlags;<br>    aiLight** mLights;<br>    aiMaterial** mMaterials;<br>    aiMesh** mMeshes;<br>    aiMetadata* mMetaData;<br>    aiString mName;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> mNumAnimations;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> mNumCameras;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> mNumLights;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> mNumMaterials;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> mNumMeshes;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> mNumTextures;<br>    aiNode* mRootNode;<br>    aiTexture **mTextures;<br>&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">aiMesh</span>&#123;<br>    aiAnimMesh** mAnimMeshes;<br>    aiVector3D* mBitangents;<br>    aiBone** mBones;<br>    aiColor4D* mColors[AI_MAX_NUMBER_OF_COLOR_SETS];<br>    aiFaces* mFaces;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> mMaterialIndex;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> mMethod;<br>    aiString mName;<br>    aiVector3D* mNormals;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> mNumAnimMeshes;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> mNumBones;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> mNumFaces;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> mNumUVComponents[AI_MAX_NUMBER_OF_TEXTURECOORDS];<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> mNumVertices;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> mPrimitiveTypes;<br>    aiVector3D* mTangents;<br>    aiVector3D* mTextureCoords[AI_MAX_NUMBER_OF_TEXTURECOORDS];<br>    aiString mTextureCoordsNames[AI_MAX_NUMBER_OF_TEXTURECOORDS];<br>    aiVector3D* mVertices;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="网格">网格</h2><p>网格（Mesh）代表的是单个可绘制实体，它包含了顶点数据、索引和纹理数据。</p><p>我们来逐个考虑需要的属性：</p><ul><li>顶点由一个位置向量定义，为了让顶点表现出正常的光照效果，我们需要定义顶点的法向量。同时，纹理坐标使得纹理能正确映射到形状表面。这三个属性恰好是我们之前在VBO中存储的数据。</li><li>纹理对象生成后由一个无符号整数句柄引用。同时，为了知道这个纹理是漫反射贴图、高光贴图还是别的什么，我们需要一个字符串（或枚举）来定义它的类型。</li></ul><p>由此定义结构体：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Vertex</span> &#123;<br>    glm::vec3 Position;<br>    glm::vec3 Normal;<br>    glm::vec2 TexCoords;<br>&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Texture</span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> id;<br>    string type;<br>    aiString path; <span class="hljs-comment">//用于存储纹理路径</span><br>&#125;<br></code></pre></td></tr></table></figure><p>由于索引只是无符号整数的几何，所以无需单独定义结构体。</p><p>定义完网格对象中存储的内容后，就可以着手构建网格类了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mesh</span>&#123;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//网格数据</span><br>    vector&lt;Vertex&gt; vertices;<br>    vector&lt;<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>&gt; indices;<br>    vector&lt;Texture&gt; textures;<br>    <span class="hljs-comment">//函数</span><br><span class="hljs-built_in">Mesh</span>(vector&lt;Vertex&gt; vertices, vector&lt;<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>&gt; indices, vector&lt;Texture&gt; textures);<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Draw</span><span class="hljs-params">(Shader shader)</span></span>; <span class="hljs-comment">//使用特定着色器绘制形状，同时可设置uniform</span><br>    <span class="hljs-keyword">private</span>:<br>        vector&lt;Texture&gt; textures_loaded; <span class="hljs-comment">//用于存放已加载的纹理，防止重复加载</span><br>    <span class="hljs-comment">//渲染数据</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> VAO,VBO,EBO;<br>    <span class="hljs-comment">//函数</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setupMesh</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//用于初始化缓冲</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="初始化">初始化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">Mesh</span>(vector&lt;Vertex&gt; vertices, vector&lt;<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>&gt; indices, vector&lt;Texture&gt; textures)&#123;<br>    <span class="hljs-keyword">this</span>.vertices = vertices;<br>    <span class="hljs-keyword">this</span>.indices = indices;<br>    <span class="hljs-keyword">this</span>.textures = textures;<br>    <span class="hljs-built_in">setupMesh</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setupMesh</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">glGenVertexArrays</span>(<span class="hljs-number">1</span>,&amp;VAO);<br>    <span class="hljs-built_in">glGenBufferArrays</span>(<span class="hljs-number">1</span>,&amp;VBO);<br>    <span class="hljs-built_in">glGenBufferArrays</span>(<span class="hljs-number">1</span>,&amp;EBO);<br>    <span class="hljs-built_in">glBindVertexArray</span>(VAO);<br>    <span class="hljs-built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);<br>    <span class="hljs-comment">//参数二以字节为单位</span><br>    <span class="hljs-comment">//vertices是Vector对象，非地址</span><br>    <span class="hljs-built_in">glBufferData</span>(GL_ARRAY_BUFFER, vertices.<span class="hljs-built_in">size</span>()*<span class="hljs-built_in">sizeof</span>(Vertex), &amp;vertices[<span class="hljs-number">0</span>], GL_STATIC_DRAW);<br>    <span class="hljs-built_in">glBindBuffer</span>(GL_ELEMENT_ARRAY_BUFFER, EBO);<br>    <span class="hljs-built_in">glBufferData</span>(GL_ELEMENT_ARRAY_BUFFER, indices.<span class="hljs-built_in">size</span>()*<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>), &amp;indices[<span class="hljs-number">0</span>], GL_STATIC_DRAW);<br>    <span class="hljs-built_in">glVertexAttribPointer</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, GL_FLOAT, GL_FALSE, <span class="hljs-built_in">sizeof</span>(Vertex), (<span class="hljs-type">void</span>*)<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">glEnableVertexAttribArray</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">glVertexAttribPointer</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, GL_FLOAT, GL_FALSE, <span class="hljs-built_in">sizeof</span>(Vertex), (<span class="hljs-type">void</span>*)<span class="hljs-built_in">offsetof</span>(Vertex, Normal));<br>    <span class="hljs-built_in">glEnableVertexAttribArray</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">glVertexAttribPointer</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, GL_FLOAT, GL_FALSE, <span class="hljs-built_in">sizeof</span>(Vertex), (<span class="hljs-type">void</span>*)<span class="hljs-built_in">offsetof</span>(Vertex, TexCoords));<br>    <span class="hljs-built_in">glEnableVertexAttribArray</span>(<span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">glBindVertexArray</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：<code>offsetof(struct attrib)</code>关键字可以用于求取属性attrib在结构体struct内的偏移值（字节单位）</strong>。但由于结构体内的属性在内存上是连续的，所以实际上也可以用<code>x * sizeof(float)</code>来代替。</p><h3 id="渲染">渲染</h3><p><code>Draw</code>函数用于设置uniform，指定绘制操作等。</p><p>我们定义：着色器中采样器的名称应当被定义为<code>texture_diffuseN</code>、<code>texture_specularN</code>，其中N∈[1,MAX_TEXTURE_COUNT]。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Draw</span><span class="hljs-params">(Shader &amp;shader)</span> </span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> diffuseNr = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> specularNr = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;(<span class="hljs-type">int</span>)textures.<span class="hljs-built_in">size</span>();i++) &#123;<br>        <span class="hljs-built_in">glActiveTexture</span>(GL_TEXTURE0+i);<br>        string name = textures[i].type;<br>        string number;<br>        <span class="hljs-keyword">if</span>(name==<span class="hljs-string">&quot;texture_diffuse&quot;</span>) &#123;<br>            number = std::<span class="hljs-built_in">to_string</span>(diffuseNr++);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(name==<span class="hljs-string">&quot;texture_specular&quot;</span>) &#123;<br>            number = std::<span class="hljs-built_in">to_string</span>(specularNr++);<br>        &#125;<br>        shader.<span class="hljs-built_in">setInt</span>((<span class="hljs-string">&quot;material.&quot;</span>+name+number).<span class="hljs-built_in">c_str</span>(),i);<br>        <span class="hljs-built_in">glBindTexture</span>(GL_TEXTURE_2D,textures[i].id);<br>    &#125;<br>    <span class="hljs-built_in">glBindVertexArray</span>(VAO);<br>    <span class="hljs-built_in">glDrawElements</span>(GL_TRIANGLES,(<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>))*(<span class="hljs-type">int</span>)indices.<span class="hljs-built_in">size</span>(),GL_UNSIGNED_INT,<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">glBindVertexArray</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">glActiveTexture</span>(GL_TEXTURE0);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="导入模型">导入模型</h2><p>前面我们了解到，一个Model对象包含多个Mesh对象。据此，我们定义Model类：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Model</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Model</span>(<span class="hljs-type">char</span> *path)&#123;<br>        <span class="hljs-built_in">loadModel</span>(path);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Draw</span><span class="hljs-params">(Shader shader)</span></span>;<br><span class="hljs-keyword">private</span>:<br>    vector&lt;Mesh&gt; meshes;<br>    string directory;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loadModel</span><span class="hljs-params">(string path)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">processNode</span><span class="hljs-params">(aiNode *node, <span class="hljs-type">const</span> aiScene *scene)</span></span>;<br>    <span class="hljs-function">Mesh <span class="hljs-title">processMesh</span><span class="hljs-params">(aiMesh *mesh, <span class="hljs-type">const</span> aiScene *scene)</span></span>;<br>    <span class="hljs-function">vector&lt;Texture&gt; <span class="hljs-title">loadMaterialTextures</span><span class="hljs-params">(aiMaterial *mat, aiTextureType type, string typeName)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于<code>Draw</code>函数，遍历所有的网格，并调用它们的<code>Draw</code>函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Draw</span><span class="hljs-params">(Shader shader)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;(<span class="hljs-type">int</span>)meshes.<span class="hljs-built_in">size</span>();i++)&#123;<br>        meshes[i].<span class="hljs-built_in">Draw</span>(shader);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于使用Assimp相关代码的源文件，需要包含<code>Importer.hpp</code>、<code>scene.h</code>以及<code>postprocess.h</code>头文件。</p><p><code>Importer</code>类用于快速地加载模型文件：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loadModel</span><span class="hljs-params">(string path)</span></span>&#123;<br>    Assimp::Importer importer;<br>    <span class="hljs-comment">//参数一为文件路径，参数二为后处理选项。此处意味：将所有图元转换为三角形|翻转纹理坐标以适应OpenGL设置</span><br>    <span class="hljs-comment">//除此以外，还有：</span><br>    <span class="hljs-comment">//aiProcess_GenNormals - 生成法向量</span><br>    <span class="hljs-comment">//aiProcess_SplitLargeMeshes - 分割大网格，防止超过顶点渲染限制</span><br>    <span class="hljs-comment">//aiProcess_OptimizeMeshes - 合并小网格，减少Drawcall</span><br>    <span class="hljs-type">const</span> aiScene *scene = importer.<span class="hljs-built_in">ReadFile</span>(path, aiProcess_Triangulate | aiProcess_FlipUVs);<br>    <span class="hljs-comment">//检查场景和根节点是否为null.</span><br>    <span class="hljs-comment">//mFlags与特定宏求与，得到场景是否完全加载。这么做的目的是：位操作性能好</span><br>    <span class="hljs-keyword">if</span>(!scene||scene-&gt;mFlags&amp;AI_SCENE_FLAGS_INCOMPLETE||!scene-&gt;mRootNode)&#123;<br>        <span class="hljs-comment">//导入期的GetErrorString()函数可得到错误信息</span><br>        cout&lt;&lt;<span class="hljs-string">&quot;ERROR::ASSIMP::&quot;</span>&lt;&lt;<span class="hljs-keyword">import</span>.<span class="hljs-built_in">GetErrorString</span>()&lt;&lt;endl;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//剔除文件本身的名称，得到目录路径</span><br>    directory = path.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>,path.<span class="hljs-built_in">find_last_of</span>(<span class="hljs-string">&#x27;/&#x27;</span>)); <span class="hljs-comment">//find_last_of：查找string最后出现的某字符的索引</span><br>    <span class="hljs-comment">//由根节点开始，可以遍历到所有节点。所以首先处理根节点</span><br>    <span class="hljs-comment">//processNode函数为递归函数</span><br>    <span class="hljs-built_in">processNode</span>(scene-&gt;mRootNode,scene);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">processNode</span><span class="hljs-params">(aiNode *node, <span class="hljs-type">const</span> aiScene* scene)</span></span>&#123;<br>    <span class="hljs-comment">//mNumMeshes指当前节点存储的网格数据数量</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;node-&gt;mNumMeshes;i++)&#123;<br>        <span class="hljs-comment">//记住，节点只存放网格索引，场景中存放的才是真正的网格数据</span><br>        aiMesh *mesh = scene-&gt;mMeshes[node-&gt;mMeshes[i]];<br>        meshes.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">processMesh</span>(mesh,scene));<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;node-&gt;mNumChildren;i++)&#123;<br>        <span class="hljs-comment">//递归处理子节点</span><br>        <span class="hljs-built_in">processNode</span>(node-&gt;mChildren[i],scene);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>之所以费这么多心思遍历子节点获取网格，而不是直接遍历aiScene的Mesh数组，是因为：</p><p>无论是在游戏引擎里还是在3D建模软件中，都存在类似层级面板的东西。在这里，网格之间有严格的父子关系，而节点之间的关系就体现了这一点。</p><p>如果单纯遍历Mesh数组，那网格之间的父子关系就被丢弃了。</p></blockquote><p><code>processMesh</code>函数用于把aiMesh对象转换为我们自己的Mesh类。实现这一步很简单，只需要访问aiMesh的所有属性，并把它们赋值给Mesh类的属性即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">Mesh <span class="hljs-title">processMesh</span><span class="hljs-params">(aiMesh* mesh, <span class="hljs-type">const</span> aiScene* scene)</span></span>&#123;<br>    vector&lt;Vertex&gt; vertices;<br>    vector&lt;Texture&gt; textures;<br>    vector&lt;<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>&gt; indices;<br>    <span class="hljs-comment">//处理顶点</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;mesh-&gt;mNumVertices;i++)&#123;<br>        Vertex vertex;<br>        glm::vec3 tmpVec;<br>        tmpVec.x = mesh-&gt;mVertices[i].x;<br>        tmpVec.y = mesh-&gt;mVertices[i].y;<br>        tmpVec.z = mesh-&gt;mVertices[i].z;<br>        vertex.Position = tmpVec;<br>        tmpVec.x = mesh-&gt;mNormals[i].x;<br>        tmpVec.y = mesh-&gt;mNormals[i].y;<br>        tmpVec.z = mesh-&gt;mNormals[i].z;<br>        vertex.Normal = tmpVec;<br>        glm::vec2 uv;<br>        <span class="hljs-comment">//aiMesh结构体的mTexCoords可以被看作是二维数组。它的第一维是纹理的序号（Assimp允许同一个顶点上包含八个纹理的uv），第二维才是表示uv的二维向量。</span><br>        <span class="hljs-keyword">if</span>(mesh-&gt;mTexCoords[<span class="hljs-number">0</span>])&#123;<br>        uv.x = mesh-&gt;mTexCoords[<span class="hljs-number">0</span>][i].x;<br>        uv.y = mesh-&gt;mTexCoords[<span class="hljs-number">0</span>][i].y;<br>        vertex.TexCoords = uv;<br>        &#125;<br><span class="hljs-keyword">else</span>&#123;<br>            vertex.TexCoords = glm::<span class="hljs-built_in">vec2</span>(<span class="hljs-number">0.0f</span>,<span class="hljs-number">0.0f</span>);<br>        &#125;<br>        vertices.<span class="hljs-built_in">push_back</span>(vertex);<br>    &#125;<br>    <span class="hljs-comment">//处理索引</span><br>    <span class="hljs-comment">//每个网格包含了若干面，每个面包含了绘制这个面的顶点索引。</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;mesh-&gt;mNumFaces;i++)&#123;<br>        aiFace face = mesh-&gt;mFaces[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;face.mNumIndices;j++)&#123;<br>            indices.<span class="hljs-built_in">push_back</span>(face.mIndices[j]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//处理材质</span><br>    <span class="hljs-comment">//一个网格只能使用一个材质，如果网格没有材质，mMaterialIndex为负数</span><br>    <span class="hljs-comment">//和节点-网格的关系一样，网格本身只存储材质索引，场景对象才存储真正的aiMaterial</span><br>    <span class="hljs-keyword">if</span>(mesh-&gt;mMaterialIndex&gt;=<span class="hljs-number">0</span>)&#123;<br>        aiMaterial *material = scene-&gt;mMaterials[mesh-&gt;mMaterialIndex];<br>        vector&lt;Texture&gt; diffuseMaps = <span class="hljs-built_in">loadMaterialTextures</span>(material,aiTextureType_DIFFUSE,<span class="hljs-string">&quot;texture_diffuse&quot;</span>);<br>        <span class="hljs-comment">//其实这里用for循环也行</span><br>        textures.<span class="hljs-built_in">insert</span>(textures.<span class="hljs-built_in">end</span>(),diffuseMaps.<span class="hljs-built_in">begin</span>(),diffuseMaps.<span class="hljs-built_in">end</span>());<br>        vector&lt;Texture&gt; specularMaps = <span class="hljs-built_in">loadMaterialTextures</span>(material,aiTextureType_SPECULAR,<span class="hljs-string">&quot;texture_specular&quot;</span>);<br>        textures.<span class="hljs-built_in">insert</span>(textures.<span class="hljs-built_in">end</span>(),specularMaps.<span class="hljs-built_in">begin</span>(),specularMaps.<span class="hljs-built_in">end</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>到这里，我们Mesh类的属性就都填充完毕了。接下来，我们要结合stbi_image库来加载材质中的纹理。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">vector&lt;Texture&gt; <span class="hljs-title">loadMaterialTextures</span><span class="hljs-params">(aiMaterial* mat, aiTextureType type, string typeName)</span></span>&#123;<br>    vector&lt;Texture&gt; textures;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;mat-&gt;<span class="hljs-built_in">GetTextureCount</span>(type);i++)&#123;<br>        aiString str;<br>        <span class="hljs-comment">//这里获取到的str是纹理的文件名，而非路径</span><br>        mat-&gt;<span class="hljs-built_in">GetTexture</span>(type,i,&amp;str);<br>        <span class="hljs-type">bool</span> skip = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-keyword">this</span>-&gt;textures_loaded.<span class="hljs-built_in">size</span>(); j++)<br>        &#123;<br>            <span class="hljs-comment">//aiString.data()也可以用于获取const char*</span><br>            <span class="hljs-comment">//这里匹配了当前纹理与textures_loaded数组中的内容。若发现匹配的，则直接跳过加载</span><br>            <span class="hljs-keyword">if</span>(std::<span class="hljs-built_in">strcmp</span>(textures_loaded[j].path.<span class="hljs-built_in">data</span>(), str.<span class="hljs-built_in">C_Str</span>()) == <span class="hljs-number">0</span>)<br>            &#123;<br>                textures.<span class="hljs-built_in">push_back</span>(textures_loaded[j]);<br>                skip = <span class="hljs-literal">true</span>; <br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!skip)&#123;<br>        Texture texture;<br>        <span class="hljs-comment">//aiString可以用C_Str()函数转化为const char*</span><br>        <span class="hljs-comment">//这里的directory是模型所在的目录</span><br>        texture.id = <span class="hljs-built_in">TextureFromFile</span>(str.<span class="hljs-built_in">C_Str</span>(),<span class="hljs-keyword">this</span>-&gt;directory); <br>        texture.type = typeName;<br>        texture.path = str;<br>        textures.<span class="hljs-built_in">push_back</span>(texture);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> textures;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title">TextureFromFile</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* path, <span class="hljs-type">const</span> string &amp;directory)</span></span>&#123;<br>    string filename = <span class="hljs-built_in">string</span>(path);<br>    filename = directory + <span class="hljs-string">&#x27;/&#x27;</span> + filename;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-built_in">glGenTextures</span>(<span class="hljs-number">1</span>,&amp;id);<br>    <span class="hljs-type">int</span> width, height, channels;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* data = <span class="hljs-built_in">stbi_load</span>(filename.<span class="hljs-built_in">c_str</span>(), &amp;width,&amp;height,&amp;channels,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(data)&#123;<br>        GLenum format;<br>        <span class="hljs-keyword">if</span>(channels==<span class="hljs-number">1</span>)&#123;<br>            format = GL_RED;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(channels==<span class="hljs-number">3</span>)&#123;<br>            format = GL_RGB;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(channels==<span class="hljs-number">4</span>)&#123;<br>            format = GL_RGBA;<br>        &#125;<br>        <span class="hljs-built_in">glBindTexture</span>(GL_TEXTURE_2D,id);<br>        <span class="hljs-built_in">glTexImage2D</span>(GL_TEXTURE_2D, <span class="hljs-number">0</span>, format, width, height, <span class="hljs-number">0</span>, format, GL_UNSIGNED_BYTE, data);<br>        <span class="hljs-built_in">glGenerateMipmap</span>(GL_TEXTURE_2D);<br>        <span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);<br>        <span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);<br>        <span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);<br>        <span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);<br>        <span class="hljs-built_in">stbi_image_free</span>(data);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Texture failed to load at path: &quot;</span> &lt;&lt; path &lt;&lt; std::endl;<br>        <span class="hljs-built_in">stbi_image_free</span>(data);<br>    &#125;<br>    <span class="hljs-keyword">return</span> id;<br>&#125;<br></code></pre></td></tr></table></figure><p>记得修改Shader：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs glsl">struct Material&#123;<br>    <span class="hljs-type">sampler2D</span> texture_diffuse1;<br>    <span class="hljs-type">sampler2D</span> texture_specular1;<br>    <span class="hljs-type">float</span> shininess;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>图形学</tag>
      
      <tag>OpenGL</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LearnOpenGL学习笔记（六） - 材质、光照贴图与投光物</title>
    <link href="/2024/07/17/LearnOpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89-%E6%9D%90%E8%B4%A8%E3%80%81%E5%85%89%E7%85%A7%E8%B4%B4%E5%9B%BE%E4%B8%8E%E6%8A%95%E5%85%89%E7%89%A9/"/>
    <url>/2024/07/17/LearnOpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89-%E6%9D%90%E8%B4%A8%E3%80%81%E5%85%89%E7%85%A7%E8%B4%B4%E5%9B%BE%E4%B8%8E%E6%8A%95%E5%85%89%E7%89%A9/</url>
    
    <content type="html"><![CDATA[<p>有趣。 <span id="more"></span></p><h2 id="材质">材质</h2><p>在通常的着色器编写中，并不是直接使用 <code>objectColor</code>计算表面颜色的，而是使用材质（Material）。材质定义了物体表面的反射特性，包含环境光、漫反射率和镜面反射率等属性。</p><p>与 C 语言类似，OpenGL也可以定义结构体来组织数据。以下示例展示了如何在 GLSL 中定义一个<code>Material</code> 结构体，并将其用作 uniform 变量：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-meta">#version 330 core</span><br>struct Material &#123;<br>    <span class="hljs-type">vec3</span> ambient;<br>    <span class="hljs-type">vec3</span> diffuse;<br>    <span class="hljs-type">vec3</span> specular;<br>    <span class="hljs-type">float</span> shininess;<br>&#125;; <br><span class="hljs-keyword">uniform</span> Material material;<br></code></pre></td></tr></table></figure><h3 id="环境光">环境光</h3><p><code>ambient</code>材质向量定义了在环境光照下，这个表面反射的颜色。环境光通常是模拟全局光照的，它在所有方向上均匀地影响物体的每个部分。<code>ambient</code>通常设置为表面的基础颜色，以确保即使在阴影中物体也能被轻微看到。</p><h3 id="漫反射">漫反射</h3><p><code>diffuse</code>材质向量定义了表面的漫反射颜色。漫反射模拟了光在粗糙表面上的扩散反射，使光在多个方向上散射。漫反射颜色设置为期望的物体颜色，因为它直接影响物体在被光照射时的可见颜色。</p><h3 id="镜面反射">镜面反射</h3><p><code>specular</code>材质向量设置了表面的镜面反射颜色。它决定了光在表面上的镜面高光颜色。这种反射通常用于模拟光滑表面的光泽度或闪亮效果。高光的颜色可以是白色的（表示强光反射），也可以是其他颜色，具体取决于表面材料的特性。</p><h3 id="镜面反射度">镜面反射度</h3><p><code>shininess</code> 参数影响镜面高光的散射程度或半径。较高的<code>shininess</code>值会使高光更加集中和尖锐，模拟光滑或抛光的表面；较低的<code>shininess</code> 值会使高光更加扩散和柔和，模拟粗糙的表面。</p><p>材质属性的设置需要丰富的实践。</p><h3 id="光源">光源</h3><p>通常来说，物体对于环境光、漫反射光和高光的反射力度是不同的。材质描述了物体在反射这三类光时的颜色属性，而反射力度是另一种截然不同的属性。</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs glsl">struct Light &#123;<br>    <span class="hljs-type">vec3</span> position;<br>    <span class="hljs-type">vec3</span> ambient; <span class="hljs-comment">//环境光影响系数</span><br>    <span class="hljs-type">vec3</span> diffuse; <span class="hljs-comment">//漫反射率</span><br>    <span class="hljs-type">vec3</span> specular; <span class="hljs-comment">//镜面反射率</span><br>&#125;;<br><span class="hljs-keyword">uniform</span> Light light;<br></code></pre></td></tr></table></figure><p>一般，环境光的反射力度较小，在0.1f左右。漫反射可以在0.5f-0.7f左右，而高光一般都为1.0f。</p><blockquote><p>我该如何理解漫反射、镜面反射率？</p><p>与漫反射颜色不同，漫反射率是指物体对漫反射颜色中R、G、B分量的反射程度。</p><p>假设漫反射率为（0.2f, 0.3f,0.4f），那么，漫反射颜色中，有20%的红色能被漫反射到观察者视角中，30%的绿色以及40%的红色同理。</p><p>镜面反射率也是如此。镜面反射率通常被设置为（1.0f, 1.0f,1.0f），因为镜面反射一般直接反映出光源的颜色。</p></blockquote><h2 id="光照贴图">光照贴图</h2><p>之前，我们对材质三个光照分类的控制，是使用传入uniform来实现的。但实际上，我们经常会遇到一个物体的不同部分是不同材质的情况。为了处理这种情况，我们引入光照贴图（Map）的概念，对材质的不同区域设置不同的光照分量强度。</p><p>贴图，类似于纹理，也是一种覆盖物体的图像。它允许着色器逐片段索引其中的颜色值。</p><p>和纹理一样，在着色器内使用<code>sampler2D</code>类型定义采样器，并使用<code>texture(sampler2D tex, vec2 uv)</code>函数采样。</p><h3 id="漫反射贴图">漫反射贴图</h3><p>漫反射贴图（DiffuseMap）可以看作是传统光照模型（如Phong、Blinn-Phong）中的Base-Color。它表现了物体本身的颜色。</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs glsl">struct Material &#123;<br>    <span class="hljs-type">sampler2D</span> diffuse;<br>    <span class="hljs-type">vec3</span>      specular;<br>    <span class="hljs-type">float</span>     shininess;<br>&#125;; <br>...<br><span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> TexCoords;<br>...<br><span class="hljs-type">vec3</span> diffuse = light.diffuse * diff * <span class="hljs-type">vec3</span>(<span class="hljs-built_in">texture</span>(material.diffuse, TexCoords));<br><span class="hljs-type">vec3</span> ambient = <span class="hljs-type">vec3</span>(<span class="hljs-built_in">texture</span>(material.diffuse,TexCoords))*lightColor*light.ambient;<br></code></pre></td></tr></table></figure><blockquote><p>这里移除了结构体内的<code>vec3 ambient</code>属性，因为几乎在所有情况下，环境光颜色都等于漫反射颜色，所以环境光用漫反射贴图进行采样。</p></blockquote><h3 id="高光贴图">高光贴图</h3><p>高光贴图用于控制高光分量。</p><p><code>vec3 specular = specularRatio * lightColor * vec3(texture(material.specular, TexCoords)) * light.specular</code></p><h2 id="投光物">投光物</h2><p>将光投射到物体的光源叫做投光物（Light Caster）。</p><h3 id="平行光">平行光</h3><p>平行光，又称定向光（DirectionalLight），投射的所有光线都来自于同一方向，与光源的位置无关。</p><p>太阳光被视为一种平行光。</p><p>对于定向光，其结构体中只需包含一个方向向量和三个光照分量即可。</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs glsl">struct Light &#123;<br>    <span class="hljs-type">vec3</span> direction;<br>    <span class="hljs-type">vec3</span> ambient;<br>    <span class="hljs-type">vec3</span> diffuse;<br>    <span class="hljs-type">vec3</span> specular;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-meta">#version 330 core</span><br><br>struct Material &#123;<br>    <span class="hljs-type">sampler2D</span> diffuse;<br>    <span class="hljs-type">sampler2D</span> specular;<br>    <span class="hljs-type">float</span> shininess;<br>&#125;;<br><br>struct Light &#123;<br>    <span class="hljs-type">vec3</span> direction;<br>    <span class="hljs-type">vec3</span> ambient;<br>    <span class="hljs-type">vec3</span> diffuse;<br>    <span class="hljs-type">vec3</span> specular;<br>    <span class="hljs-type">vec3</span> color;<br>    <span class="hljs-type">float</span> strength;<br>&#125;;<br><br><span class="hljs-keyword">uniform</span> Light light;<br><span class="hljs-keyword">uniform</span> Material material;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">vec3</span> viewPos;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">float</span> time;<br><br><span class="hljs-keyword">in</span> <span class="hljs-type">vec3</span> norm;<br><span class="hljs-keyword">in</span> <span class="hljs-type">vec3</span> fragPos;<br><span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> TexCoords;<br><span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> FragColor;<br><br><span class="hljs-type">void</span> main() &#123;<br>    <span class="hljs-comment">// 计算光源方向</span><br>    <span class="hljs-type">vec3</span> lightDir = <span class="hljs-built_in">normalize</span>(-light.direction);<br><br>    <span class="hljs-comment">// 计算环境光</span><br>    <span class="hljs-type">vec3</span> ambient = <span class="hljs-type">vec3</span>(<span class="hljs-built_in">texture</span>(material.diffuse, TexCoords)) * light.ambient;<br><br>    <span class="hljs-comment">// 计算漫反射光</span><br>    <span class="hljs-type">vec3</span> normal = <span class="hljs-built_in">normalize</span>(norm);<br>    <span class="hljs-type">float</span> diffuseStrength = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(normal, lightDir), <span class="hljs-number">0.0</span>);<br>    <span class="hljs-type">vec3</span> diffuse = <span class="hljs-type">vec3</span>(<span class="hljs-built_in">texture</span>(material.diffuse, TexCoords)) * diffuseStrength * light.diffuse;<br><br>    <span class="hljs-comment">// 计算高光</span><br>    <span class="hljs-type">vec3</span> viewDir = <span class="hljs-built_in">normalize</span>(viewPos - fragPos);<br>    <span class="hljs-type">vec3</span> reflectDir = <span class="hljs-built_in">reflect</span>(-lightDir, normal);<br>    <span class="hljs-type">float</span> specularStrength = <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(viewDir, reflectDir), <span class="hljs-number">0.0</span>), material.shininess);<br>    <span class="hljs-type">vec3</span> specular = specularStrength * <span class="hljs-type">vec3</span>(<span class="hljs-built_in">texture</span>(material.specular, TexCoords)) * light.specular;<br><br>    <span class="hljs-comment">// 合并所有光照效果</span><br>    <span class="hljs-type">vec3</span> result = ambient + diffuse + specular;<br><br>    <span class="hljs-comment">// 输出最终颜色</span><br>    FragColor = <span class="hljs-type">vec4</span>(result*light.color*light.strength, <span class="hljs-number">1.0</span>f);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="点光源">点光源</h3><p>与平行光不同，点光源（PointLight）的光线会随距离衰减（Attenuation）。</p><p>在现实世界中，灯在近处通常会非常亮，但随着距离的增加光源的亮度一开始会下降非常快，但在远处时剩余的光强度就会下降的非常缓慢了。为了模拟这一过程，我们使用下列公式：</p><span class="katex-error" title="ParseError: KaTeX parse error: {equation} can be used only in display mode." style="color:#cc0000">\begin{equation} F_{att} = \frac{1.0}{K_c + K_l * d + K_q * d^2} \end{equation}</span><p><br></p><p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mrow><mi>a</mi><mi>t</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">F_{att}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">tt</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是衰减率，用于乘以光照强度。</p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mi>c</mi></msub></mrow><annotation encoding="application/x-tex">K_{c}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><p>是常数项，通常为1.0，用于保证分母大于1，使得衰减率始终随距离增大而减小。</p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mi>l</mi></msub></mrow><annotation encoding="application/x-tex">K_{l}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><p>是一次项系数，以线性方式减少强度。</p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mi>q</mi></msub></mrow><annotation encoding="application/x-tex">K_{q}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><p>是二次项系数，当距离较大时，二次项的影响会更加显著。。</p><p>经过该公式计算的衰减率乘以光强，最终得到的亮度如下：</p><figure><img src="https://learnopengl-cn.github.io/img/02/05/attenuation.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>三个K值的具体值设置需要实践经验。一次项系数越小，光源覆盖的距离越大，二次项系数的变化趋势与一次项系数相同，但它比一次项系数小更多。</p><table><thead><tr><th style="text-align: left;">距离</th><th style="text-align: left;">常数项</th><th style="text-align: left;">一次项</th><th style="text-align: left;">二次项</th></tr></thead><tbody><tr><td style="text-align: left;">7</td><td style="text-align: left;">1.0</td><td style="text-align: left;">0.7</td><td style="text-align: left;">1.8</td></tr><tr><td style="text-align: left;">13</td><td style="text-align: left;">1.0</td><td style="text-align: left;">0.35</td><td style="text-align: left;">0.44</td></tr><tr><td style="text-align: left;">20</td><td style="text-align: left;">1.0</td><td style="text-align: left;">0.22</td><td style="text-align: left;">0.20</td></tr><tr><td style="text-align: left;">32</td><td style="text-align: left;">1.0</td><td style="text-align: left;">0.14</td><td style="text-align: left;">0.07</td></tr><tr><td style="text-align: left;">50</td><td style="text-align: left;">1.0</td><td style="text-align: left;">0.09</td><td style="text-align: left;">0.032</td></tr><tr><td style="text-align: left;">65</td><td style="text-align: left;">1.0</td><td style="text-align: left;">0.07</td><td style="text-align: left;">0.017</td></tr><tr><td style="text-align: left;">100</td><td style="text-align: left;">1.0</td><td style="text-align: left;">0.045</td><td style="text-align: left;">0.0075</td></tr><tr><td style="text-align: left;">160</td><td style="text-align: left;">1.0</td><td style="text-align: left;">0.027</td><td style="text-align: left;">0.0028</td></tr><tr><td style="text-align: left;">200</td><td style="text-align: left;">1.0</td><td style="text-align: left;">0.022</td><td style="text-align: left;">0.0019</td></tr><tr><td style="text-align: left;">325</td><td style="text-align: left;">1.0</td><td style="text-align: left;">0.014</td><td style="text-align: left;">0.0007</td></tr><tr><td style="text-align: left;">600</td><td style="text-align: left;">1.0</td><td style="text-align: left;">0.007</td><td style="text-align: left;">0.0002</td></tr><tr><td style="text-align: left;">3250</td><td style="text-align: left;">1.0</td><td style="text-align: left;">0.0014</td><td style="text-align: left;">0.000007</td></tr></tbody></table><p>具体实现衰减同样需要修改着色器中的Light结构体，并把计算得到的衰减值乘以三个光照分量。</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs glsl">struct Light &#123;<br>    <span class="hljs-comment">//光源位置</span><br>    <span class="hljs-type">vec3</span> position;<br>    <span class="hljs-comment">//材质光照分量</span><br>    <span class="hljs-type">vec3</span> ambient;<br>    <span class="hljs-type">vec3</span> diffuse;<br>    <span class="hljs-type">vec3</span> specular;<br>    <span class="hljs-comment">//灯光自身属性</span><br>    <span class="hljs-type">vec3</span> color;<br>    <span class="hljs-type">float</span> strength;<br>    <span class="hljs-comment">//点光源衰减参数</span><br>    <span class="hljs-type">float</span> constant;<br>    <span class="hljs-type">float</span> linear;<br>    <span class="hljs-type">float</span> quadratic;<br>&#125;;<br>    <br>    <span class="hljs-type">void</span> main()&#123;<br>            <span class="hljs-type">float</span> <span class="hljs-built_in">distance</span> = <span class="hljs-built_in">length</span>(fragPos-light.position);<br>    <span class="hljs-type">float</span> attenuation = <span class="hljs-number">1.0</span>/(light.constant+<span class="hljs-built_in">distance</span>*light.linear+<span class="hljs-built_in">distance</span>*<span class="hljs-built_in">distance</span>*light.quadratic);<br>    ambient  *= attenuation;<br>    diffuse   *= attenuation;<br>    specular *= attenuation;<br>    <span class="hljs-comment">// 合并所有光照效果</span><br>    <span class="hljs-type">vec3</span> result = ambient + diffuse + specular;<br>    <span class="hljs-comment">// 输出最终颜色</span><br>    FragColor = <span class="hljs-type">vec4</span>(result*light.color*light.strength, <span class="hljs-number">1.0</span>f);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="聚光">聚光</h3><p>聚光（Spotlight）是位于环境中某个位置的光源，它只朝一个特定方向而不是所有方向照射光线。</p><p>聚光可以用一个世界坐标、一个方向和一个切光角（CufoffAngle）确定。切光角指定了光锥体的半径。</p><p><img src="https://yoi-note.oss-cn-chengdu.aliyuncs.com/Image/202407171229493.png" alt="image-20240717122930242" style="zoom:50%;" /></p><p>如图所示，θ代表图元和聚光方向的夹角，ϕ代表切光角。</p><p>具体计算过程为：首先判断θ的cos值，若大于cosϕ，则说明片段位于光锥体内，执行光照计算（与点光源相同）。若小于，则直接输出环境光色。</p><p>使用<code>smoothstep(float t1, float t2, float x)</code>函数来生成平滑边缘。</p><blockquote><p>当x小于t1时，函数返回0；x大于t2时，函数返回1；x位于[t1,t2]时，进行平滑插值。</p></blockquote><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs glsl">struct Light &#123;<br>    <span class="hljs-type">vec3</span> direction;<br>    <span class="hljs-type">vec3</span> position;<br>    <span class="hljs-type">float</span> cutoff;<br>    <span class="hljs-type">float</span> outer;<br>    <span class="hljs-type">vec3</span> ambient;<br>    <span class="hljs-type">vec3</span> diffuse;<br>    <span class="hljs-type">vec3</span> specular;<br>    <span class="hljs-type">vec3</span> color;<br>    <span class="hljs-type">float</span> strength;<br>&#125;;<br>...<br><span class="hljs-type">void</span> main() &#123;<br>    <span class="hljs-comment">//计算聚光区域</span><br>    <span class="hljs-type">vec3</span> light_frag_dir = <span class="hljs-built_in">normalize</span>(fragPos-light.position);<br>    <span class="hljs-type">float</span> theta = <span class="hljs-built_in">dot</span>(light_frag_dir,<span class="hljs-built_in">normalize</span>(light.direction));<br>    <span class="hljs-type">float</span> spotRange = <span class="hljs-built_in">smoothstep</span>(light.outer,light.cutoff,theta);<br>    <span class="hljs-type">vec3</span> lightDir = -light.direction;<br>    <span class="hljs-comment">// 计算环境光</span><br>    <span class="hljs-type">vec3</span> ambient = <span class="hljs-type">vec3</span>(<span class="hljs-built_in">texture</span>(material.diffuse, TexCoords)) * light.ambient;<br>    <span class="hljs-comment">// 计算漫反射光</span><br>    <span class="hljs-type">vec3</span> normal = <span class="hljs-built_in">normalize</span>(norm);<br>    <span class="hljs-type">float</span> diffuseStrength = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(normal, lightDir), <span class="hljs-number">0.0</span>);<br>    <span class="hljs-type">vec3</span> diffuse = <span class="hljs-type">vec3</span>(<span class="hljs-built_in">texture</span>(material.diffuse, TexCoords)) * diffuseStrength * light.diffuse;<br>    <span class="hljs-comment">// 计算高光</span><br>    <span class="hljs-type">vec3</span> viewDir = <span class="hljs-built_in">normalize</span>(viewPos - fragPos);<br>    <span class="hljs-type">vec3</span> reflectDir = <span class="hljs-built_in">reflect</span>(-lightDir, normal);<br>    <span class="hljs-type">float</span> specularStrength = <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(viewDir, reflectDir), <span class="hljs-number">0.0</span>), material.shininess);<br>    <span class="hljs-type">vec3</span> specular = specularStrength * <span class="hljs-type">vec3</span>(<span class="hljs-built_in">texture</span>(material.specular, TexCoords)) * light.specular;<br>    <span class="hljs-comment">// 合并所有光照效果</span><br>    <span class="hljs-type">vec3</span> result = ambient + diffuse*spotRange + specular*spotRange;<br>    <span class="hljs-comment">// 输出最终颜色</span><br>    FragColor = <span class="hljs-type">vec4</span>(result*light.color*light.strength, <span class="hljs-number">1.0</span>f);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多光源">多光源</h3><p>GLSL中的函数和C函数很相似，它有一个函数名、一个返回值类型，如果函数不是在main函数之前声明的，我们还必须在代码文件顶部声明一个原型。</p><p>为了实现多光源效果，我们需要将每个光源对各光照分量的贡献进行累加。</p><p>对于数组类型的uniform，使用<code>“pointLights[0].position”</code>来访问。</p><p>多个光源对片段的影响<strong>就是简单的相加</strong>。</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-keyword">uniform</span> DirectionalLight dirLight;<br><span class="hljs-keyword">uniform</span> SpotLight spotLight;<br><span class="hljs-keyword">uniform</span> PointLight pointLights[NR_POINT_LIGHTS];<br><br><span class="hljs-type">vec3</span> CalcDirLight(DirectionalLight light, <span class="hljs-type">vec3</span> normal, <span class="hljs-type">vec3</span> viewDir)&#123;<br>    <span class="hljs-type">vec3</span> lightDir = <span class="hljs-built_in">normalize</span>(-light.direction);<br>    <span class="hljs-type">vec3</span> ambient = light.ambient * <span class="hljs-built_in">texture</span>(material.diffuse,TexCoords).rgb;<br>    <span class="hljs-type">vec3</span> diffuse = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(lightDir,normal),<span class="hljs-number">0.0</span>f)*light.diffuse*<span class="hljs-built_in">texture</span>(material.diffuse,TexCoords).rgb;<br>    <span class="hljs-type">vec3</span> reflectDir = <span class="hljs-built_in">reflect</span>(-lightDir,normal);<br>    <span class="hljs-type">vec3</span> specular = <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(viewDir,reflectDir),<span class="hljs-number">0.0</span>f),material.shininess)*light.specular*<span class="hljs-built_in">texture</span>(material.specular,TexCoords).rgb;<br>    <span class="hljs-keyword">return</span> (ambient+diffuse+specular)*light.color*light.strength;<br>&#125;<br><br><span class="hljs-type">vec3</span> CalcPointLight(PointLight light, <span class="hljs-type">vec3</span> normal, <span class="hljs-type">vec3</span> viewDir, <span class="hljs-type">vec3</span> fragPos)&#123;<br>    <span class="hljs-type">float</span> <span class="hljs-built_in">distance</span> = <span class="hljs-built_in">length</span>(light.position - fragPos);<br>    <span class="hljs-type">float</span> attenuation = <span class="hljs-number">1</span>/(light.constant+light.linear*<span class="hljs-built_in">distance</span>+light.quadratic*<span class="hljs-built_in">distance</span>*<span class="hljs-built_in">distance</span>);<br>    <span class="hljs-type">vec3</span> lightDir = <span class="hljs-built_in">normalize</span>(light.position - fragPos);<br>    <span class="hljs-type">vec3</span> ambient = light.ambient * <span class="hljs-built_in">texture</span>(material.diffuse,TexCoords).rgb;<br>    <span class="hljs-type">vec3</span> diffuse = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(lightDir,normal),<span class="hljs-number">0.0</span>f)*light.diffuse*<span class="hljs-built_in">texture</span>(material.diffuse,TexCoords).rgb;<br>    <span class="hljs-type">vec3</span> reflectDir = <span class="hljs-built_in">normalize</span>(<span class="hljs-built_in">reflect</span>(-lightDir,normal));<br>    <span class="hljs-type">vec3</span> specular = <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(viewDir,reflectDir),<span class="hljs-number">0.0</span>f),material.shininess)*light.specular*<span class="hljs-built_in">texture</span>(material.specular,TexCoords).rgb;<br>    <span class="hljs-keyword">return</span> (ambient+diffuse+specular)*attenuation*light.color*light.strength;<br>&#125;<br><br><span class="hljs-type">vec3</span> CalcSpotLight(SpotLight light, <span class="hljs-type">vec3</span> normal, <span class="hljs-type">vec3</span> fragPos, <span class="hljs-type">vec3</span> viewDir)&#123;<br>    <span class="hljs-type">float</span> <span class="hljs-built_in">distance</span> = <span class="hljs-built_in">length</span>(light.position - fragPos);<br>    <span class="hljs-type">float</span> attenuation = <span class="hljs-number">1</span>/(light.constant+light.linear*<span class="hljs-built_in">distance</span>+light.quadratic*<span class="hljs-built_in">distance</span>*<span class="hljs-built_in">distance</span>);<br><br>    <span class="hljs-type">vec3</span> lightFragVec = <span class="hljs-built_in">normalize</span>(fragPos-light.position);<br>    <span class="hljs-type">float</span> theta = <span class="hljs-built_in">dot</span>(lightFragVec,<span class="hljs-built_in">normalize</span>(light.direction));<br>    <span class="hljs-type">float</span> spotRange = <span class="hljs-built_in">smoothstep</span>(light.outer,light.cutoff,theta);<br>    <span class="hljs-type">vec3</span> lightDir = -light.direction;<br>    <span class="hljs-type">vec3</span> ambient = light.ambient * <span class="hljs-built_in">texture</span>(material.diffuse,TexCoords).rgb;<br>    <span class="hljs-type">vec3</span> diffuse = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(lightDir,normal),<span class="hljs-number">0.0</span>f)*light.diffuse*<span class="hljs-built_in">texture</span>(material.diffuse,TexCoords).rgb;<br>    <span class="hljs-type">vec3</span> reflectDir = <span class="hljs-built_in">normalize</span>(<span class="hljs-built_in">reflect</span>(-lightDir,normal));<br>    <span class="hljs-type">vec3</span> specular = <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(viewDir,reflectDir),<span class="hljs-number">0.0</span>f),material.shininess)*light.specular*<span class="hljs-built_in">texture</span>(material.specular,TexCoords).rgb;<br>    <span class="hljs-keyword">return</span> ((ambient+diffuse)*spotRange+specular)*attenuation*light.color*light.strength;<br>&#125;<br><br><span class="hljs-type">void</span> main()&#123;<br>    <span class="hljs-type">vec3</span> normal = <span class="hljs-built_in">normalize</span>(norm);<br>    <span class="hljs-type">vec3</span> viewDir = <span class="hljs-built_in">normalize</span>(viewPos-fragPos);<br>    <span class="hljs-type">vec3</span> result = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; NR_POINT_LIGHTS; i++)&#123;<br>        result += CalcPointLight(pointLights[i], normal,viewDir,fragPos);<br>    &#125;<br>    result += CalcDirLight(dirLight,normal,viewDir);<br>    <span class="hljs-keyword">if</span>(spotLightSwitch)&#123;<br>        result += CalcSpotLight(spotLight, normal, fragPos,viewDir);<br>    &#125;<br>    FragColor = <span class="hljs-type">vec4</span>(result,<span class="hljs-number">1.0</span>f);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>图形学</tag>
      
      <tag>OpenGL</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LearnOpenGL学习笔记（五）- CMake、ImGui与光照</title>
    <link href="/2024/07/15/LearnOpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89-%20CMake%E3%80%81ImGui%E4%B8%8E%E5%85%89%E7%85%A7/"/>
    <url>/2024/07/15/LearnOpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89-%20CMake%E3%80%81ImGui%E4%B8%8E%E5%85%89%E7%85%A7/</url>
    
    <content type="html"><![CDATA[<p>TA壬的舒适区 <span id="more"></span></p><h1 id="cmake与imgui">CMake与ImGui</h1><h2 id="设置-cmake-最低版本和项目名称">设置 CMake最低版本和项目名称</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.28</span>)<br><span class="hljs-keyword">project</span>(LearnOpenGL)<br></code></pre></td></tr></table></figure><ul><li><code>cmake_minimum_required(VERSION 3.28)</code>：这行代码指定了我们希望使用的最低CMake 版本是 3.28。</li><li><code>project(LearnOpenGL)</code>：这行代码将我们的项目命名为"LearnOpenGL"。</li></ul><h2 id="设置-c-标准">设置 C++ 标准</h2><p>为了确保代码能够使用特定的 C++ 标准，我们需要明确指定它：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">set</span><span class="hljs-params">(CMAKE_CXX_STANDARD <span class="hljs-number">17</span>)</span></span><br></code></pre></td></tr></table></figure><ul><li><code>set(CMAKE_CXX_STANDARD 17)</code>：这行代码将 C++ 标准设置为C++17。这样可以确保我们的代码能够使用 C++17的特性，同时也能确保编译器正确处理这些特性。</li></ul><h2 id="手动设置-glfw-路径">手动设置 GLFW 路径</h2><p>由于我们使用的是本地安装的 GLFW库，因此需要手动设置其包含目录和库目录：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(GLFW_INCLUDE_DIR <span class="hljs-string">&quot;$&#123;CMAKE_SOURCE_DIR&#125;/include/GLFW&quot;</span>)<br><span class="hljs-keyword">set</span>(GLFW_LIB_DIR <span class="hljs-string">&quot;$&#123;CMAKE_SOURCE_DIR&#125;/libs&quot;</span>)<br><span class="hljs-keyword">set</span>(GLFW_LIBRARY <span class="hljs-string">&quot;$&#123;CMAKE_SOURCE_DIR&#125;/libs/glfw3.dll&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li><code>set(GLFW_INCLUDE_DIR "C:/Users/msik/CLionProjects/LearnOpenGL/include/GLFW")</code>：设置GLFW 的包含目录路径，使编译器能够找到 GLFW 的头文件。</li><li><code>set(GLFW_LIB_DIR "C:/Users/msik/CLionProjects/LearnOpenGL/libs")</code>：设置GLFW 的库目录路径。</li><li><code>set(GLFW_LIBRARY "C:/Users/msik/CLionProjects/LearnOpenGL/libs/glfw3.dll")</code>：设置GLFW 的库文件路径。</li></ul><blockquote><p>${CMAKE_SOURCE_DIR}是内置宏，指CMakeList.txt所在的目录。</p></blockquote><h2 id="添加-imgui-库">添加 IMGUI 库</h2><p>IMGUI是一个常用的图形用户界面库。我们需要将其添加到我们的项目中：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">add_library</span>(IMGUI SHARED<br>        ./imgui/imgui.cpp<br>        ./imgui/imgui_impl_glfw.cpp<br>        ./imgui/imgui_impl_opengl3.cpp<br>        ./imgui/imgui_draw.cpp<br>        ./imgui/imgui_tables.cpp<br>        ./imgui/imgui_widgets.cpp<br>        ./imgui/imgui_demo.cpp<br>        ./imgui/imgui_stdlib.cpp<br>)<br></code></pre></td></tr></table></figure><ul><li><code>add_library(IMGUI SHARED ...)</code>：这行代码定义了一个共享库，名为<code>IMGUI</code>，并包含了多个源文件。共享库可以在多个程序之间共享，提高了代码复用性。</li></ul><p>接下来设置 IMGUI 库的包含目录和链接库：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">target_include_directories</span><span class="hljs-params">(IMGUI PRIVATE $&#123;GLFW_INCLUDE_DIR&#125;)</span></span><br><span class="hljs-function"><span class="hljs-title">target_link_libraries</span><span class="hljs-params">(IMGUI PRIVATE $&#123;GLFW_LIBRARY&#125;)</span></span><br></code></pre></td></tr></table></figure><ul><li><code>target_include_directories(IMGUI PRIVATE $&#123;GLFW_INCLUDE_DIR&#125;)</code>：将GLFW 的包含目录添加到 IMGUI 库的私有包含目录中，确保 IMGUI 库可以访问GLFW 的头文件。</li><li><code>target_link_libraries(IMGUI PRIVATE $&#123;GLFW_LIBRARY&#125;)</code>：将GLFW 库文件链接到 IMGUI 库中，使 IMGUI 库能够使用 GLFW 的功能。</li></ul><h2 id="添加可执行文件">添加可执行文件</h2><p>接下来，我们为项目添加一个可执行文件：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">add_executable</span>(LearnOpenGL<br>        Archive/main.cpp<br>        glad.c<br>        <span class="hljs-keyword">include</span>/shader_s.h<br>        GLMTest.cpp<br>        stbitmp.cpp<br>        <span class="hljs-keyword">include</span>/camera.h<br>)<br></code></pre></td></tr></table></figure><ul><li><code>add_executable(LearnOpenGL ...)</code>：这行代码定义了一个可执行文件，名为<code>LearnOpenGL</code>，并指定了其源文件列表。可执行文件是最终生成的程序，可以运行。</li></ul><h2 id="包含路径">包含路径</h2><p>我们需要指定包含目录，以便编译器能够找到所有头文件：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;GLFW_INCLUDE_DIR&#125;</span> <span class="hljs-string">&quot;$&#123;CMAKE_SOURCE_DIR&#125;/include&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li><code>include_directories(...)</code>：这行代码将 GLFW的包含目录和项目的包含目录添加到编译器的搜索路径中，使编译器能够找到这些头文件。</li></ul><h2 id="链接库">链接库</h2><p>最后，我们需要将所有必要的库链接到可执行文件中：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">target_link_libraries</span>(LearnOpenGL PRIVATE <span class="hljs-variable">$&#123;GLFW_LIBRARY&#125;</span> IMGUI)<br></code></pre></td></tr></table></figure><ul><li><code>target_link_libraries(LearnOpenGL PRIVATE $&#123;GLFW_LIBRARY&#125; IMGUI)</code>：这行代码将GLFW 库和 IMGUI 库链接到 <code>LearnOpenGL</code>可执行文件中，使其能够使用这些库的功能。</li></ul><h2 id="与opengl工程集成">与OpenGL工程集成</h2><ol type="1"><li>添加头文件</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;imgui.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;imgui_impl_glfw.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;imgui_impl_opengl3.h&quot;</span></span><br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>初始化</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">IMGUI_CHECKVERSION</span>(); <span class="hljs-comment">//检查版本</span><br>ImGui::<span class="hljs-built_in">CreateContext</span>(); <span class="hljs-comment">//创建上下文</span><br>ImGuiIO&amp; io = ImGui::<span class="hljs-built_in">GetIO</span>();<br>io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard; <span class="hljs-comment">//激活键盘支持</span><br><br><span class="hljs-built_in">ImGui_ImplGlfw_InitForOpenGL</span>(window, <span class="hljs-literal">true</span>); <span class="hljs-comment">//在GLFW窗口上进行初始化</span><br><span class="hljs-built_in">ImGui_ImplOpenGL3_Init</span>();<br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>每次渲染初始化</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">ImGui_ImplOpenGL3_NewFrame</span>();<br><span class="hljs-built_in">ImGui_ImplGlfw_NewFrame</span>();<br>ImGui::<span class="hljs-built_in">NewFrame</span>();<br><span class="hljs-keyword">if</span>(ImGui::<span class="hljs-built_in">Begin</span>(<span class="hljs-string">&quot;窗口名&quot;</span>))&#123;<br>    <span class="hljs-comment">//窗口控件逻辑放在这</span><br>    <span class="hljs-comment">//..</span><br>    ImGui::<span class="hljs-built_in">End</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4" type="1"><li>每次渲染结束</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">ImGui::<span class="hljs-built_in">Render</span>();<br><span class="hljs-built_in">ImGui_ImplOpenGL3_RenderDrawData</span>(ImGui::<span class="hljs-built_in">GetDrawData</span>());<br></code></pre></td></tr></table></figure><ol start="5" type="1"><li>程序终止</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">ImGui_ImplOpenGL3_Shutdown</span>();<br><span class="hljs-built_in">ImGui_ImplGlfw_Shutdown</span>();<br>ImGui::<span class="hljs-built_in">DestroyContext</span>();<br></code></pre></td></tr></table></figure><h2 id="控件">控件</h2><h3 id="文本">文本</h3><table><thead><tr><th>变体函数</th><th>作用描述</th><th>示例代码</th></tr></thead><tbody><tr><td><code>ImGui::Text</code></td><td>显示简单文本</td><td><code>ImGui::Text("This is some useful text.");</code></td></tr><tr><td><code>ImGui::TextColored</code></td><td>显示带颜色的文本</td><td><code>ImVec4 color = ImVec4(1.0f, 0.0f, 0.0f, 1.0f);</code><br><code>ImGui::TextColored(color, "This is red text.");</code></td></tr><tr><td><code>ImGui::TextDisabled</code></td><td>显示灰色文本，表示禁用状态</td><td><code>ImGui::TextDisabled("This is disabled text.");</code></td></tr><tr><td><code>ImGui::TextWrapped</code></td><td>显示自动换行的文本</td><td><code>ImGui::TextWrapped("This is some long text that will automatically wrap.");</code></td></tr><tr><td><code>ImGui::TextUnformatted</code></td><td>显示不进行格式化的文本</td><td><code>const char* text = "This is unformatted text.";</code><br><code>ImGui::TextUnformatted(text);</code></td></tr><tr><td><code>ImGui::Text</code> (格式化字符串)</td><td>使用格式化字符串显示文本</td><td><code>int value = 42;</code><br><code>ImGui::Text("The answer is %d", value);</code></td></tr></tbody></table><h3 id="按钮">按钮</h3><table><thead><tr><th>控件函数</th><th>作用描述</th><th>示例代码</th></tr></thead><tbody><tr><td><code>ImGui::Button</code></td><td>创建一个按钮</td><td><code>if (ImGui::Button("Click Me")) &#123; /* 按钮被点击时执行的代码 */ &#125;</code></td></tr><tr><td><code>ImGui::SmallButton</code></td><td>创建一个小按钮</td><td><code>if (ImGui::SmallButton("Click Me")) &#123; /* 小按钮被点击时执行的代码 */ &#125;</code></td></tr><tr><td><code>ImGui::InvisibleButton</code></td><td>创建一个不可见的按钮</td><td><code>if (ImGui::InvisibleButton("Click Me", ImVec2(100, 20))) &#123; /* 按钮被点击时执行的代码 */ &#125;</code></td></tr></tbody></table><h3 id="复选框">复选框</h3><table><thead><tr><th>控件函数</th><th>作用描述</th><th>示例代码</th></tr></thead><tbody><tr><td><code>ImGui::Checkbox</code></td><td>创建一个复选框</td><td><code>static bool checked = false;</code><br><code>ImGui::Checkbox("Check Me", &amp;checked);</code></td></tr><tr><td><code>ImGui::CheckboxFlags</code></td><td>创建一个带有标志的复选框</td><td><code>static int flags = 0;</code><br><code>ImGui::CheckboxFlags("Flag 1", &amp;flags, 1);</code></td></tr></tbody></table><h3 id="输入框">输入框</h3><table><thead><tr><th>控件函数</th><th>作用描述</th><th>示例代码</th></tr></thead><tbody><tr><td><code>ImGui::InputText</code></td><td>创建一个文本输入框</td><td><code>static char text[128] = "";</code><br><code>ImGui::InputText("Input Text", text, IM_ARRAYSIZE(text));</code></td></tr><tr><td><code>ImGui::InputTextMultiline</code></td><td>创建一个多行文本输入框</td><td><code>static char text[128] = "";</code><br><code>ImGui::InputTextMultiline("Input Text", text, IM_ARRAYSIZE(text));</code></td></tr><tr><td><code>ImGui::InputInt</code></td><td>创建一个整数输入框</td><td><code>static int value = 0;</code><br><code>ImGui::InputInt("Input Int", &amp;value);</code></td></tr><tr><td><code>ImGui::InputFloat</code></td><td>创建一个浮点数输入框</td><td><code>static float value = 0.0f;</code><br><code>ImGui::InputFloat("Input Float", &amp;value);</code></td></tr></tbody></table><h3 id="滑块">滑块</h3><table><thead><tr><th>控件函数</th><th>作用描述</th><th>示例代码</th></tr></thead><tbody><tr><td><code>ImGui::SliderFloat</code></td><td>创建一个浮点数滑块</td><td><code>static float value = 0.0f;</code><br><code>ImGui::SliderFloat("Float Slider", &amp;value, 0.0f, 1.0f);</code></td></tr><tr><td><code>ImGui::SliderInt</code></td><td>创建一个整数滑块</td><td><code>static int value = 0;</code><br><code>ImGui::SliderInt("Int Slider", &amp;value, 0, 100);</code></td></tr><tr><td><code>ImGui::VSliderFloat</code></td><td>创建一个垂直浮点数滑块</td><td><code>static float value = 0.0f;</code><br><code>ImGui::VSliderFloat("VFloat Slider", ImVec2(20,100), &amp;value, 0.0f, 1.0f);</code></td></tr><tr><td><code>ImGui::VSliderInt</code></td><td>创建一个垂直整数滑块</td><td><code>static int value = 0;</code><br><code>ImGui::VSliderInt("VInt Slider", ImVec2(20,100), &amp;value, 0, 100);</code></td></tr></tbody></table><h3 id="下拉框">下拉框</h3><table><thead><tr><th>控件函数</th><th>作用描述</th><th>示例代码</th></tr></thead><tbody><tr><td><code>ImGui::Combo</code></td><td>创建一个下拉框</td><td><code>static int item = 0;</code><br><code>const char* items[] = &#123; "Item 1", "Item 2", "Item 3" &#125;;</code><br><code>ImGui::Combo("Combo", &amp;item, items, IM_ARRAYSIZE(items));</code></td></tr></tbody></table><h1 id="光照">光照</h1><h2 id="颜色">颜色</h2><p>颜色可以数字化的由红色(Red)、绿色(Green)和蓝色(Blue)三个分量组成，它们通常被缩写为RGB。</p><p>glm中，使用<code>glm::vec3 COLOR_NAME(float x, float y, float z)</code>定义颜色变量。</p><p>现实中，我们看到物体的颜色实际上是被物体反射（即无法被物体吸收）的颜色与光源颜色的叠加。因此，要计算最终我们看到物体的颜色，可以用**光源颜色*物体颜色**的方式得到最终的颜色项链。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">glm::vec3 <span class="hljs-title">lightColor</span><span class="hljs-params">(<span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>)</span></span>;<br><span class="hljs-function">glm::vec3 <span class="hljs-title">toyColor</span><span class="hljs-params">(<span class="hljs-number">1.0f</span>, <span class="hljs-number">0.5f</span>, <span class="hljs-number">0.31f</span>)</span></span>;<br>glm::vec3 result = lightColor * toyColor; <span class="hljs-comment">// = (1.0f, 0.5f, 0.31f);</span><br></code></pre></td></tr></table></figure><p>严谨的物体颜色定义应为：<em>物体从一个光源反射各个颜色分量的大小</em>。考虑如下光源和物体：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">glm::vec3 <span class="hljs-title">lightColor</span><span class="hljs-params">(<span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>)</span></span>;<br><span class="hljs-function">glm::vec3 <span class="hljs-title">toyColor</span><span class="hljs-params">(<span class="hljs-number">1.0f</span>, <span class="hljs-number">0.5f</span>, <span class="hljs-number">0.31f</span>)</span></span>;<br></code></pre></td></tr></table></figure><p>可以得出，物体在反射光源颜色时，R和B通道压根就没有颜色给它反射。而G通道可以反射一半，最终得到颜色<code>(0.0f, 0.5f, 0.0f)</code>，即深绿色。</p><p>当两个物体使用不同材质时，需要创建两个不同的Shader对象。</p><blockquote><p>注意：</p><p>绘制应用不同Shader的对象时，需要<strong>use()</strong>。</p><p>同时，也需要设置新Shader的View和Projection矩阵。</p></blockquote><h2 id="基础光照">基础光照</h2><p>冯氏光照模型（Phong LightingModel）是一种简单的光照模型。它分为三个部分：</p><ul><li><strong>环境光（Ambient）</strong>：在任何情况下都给予物体的颜色。</li><li><strong>漫反射光（Diffuse)</strong>：模拟光源对物体的方向性影响。物体的某部分越正对光源，就越亮。</li><li><strong>高光（Specular）</strong>：有光泽表面上出现的亮点，其颜色更加接近于光照颜色本身。</li></ul><h3 id="环境光">环境光</h3><p>全局光照（GlobalIllumination，GI）是考虑到间接光照的算法。环境光是一种极其简化的全局光照方式。其实现方式如下：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-type">float</span> ambientStrength = <span class="hljs-number">0.1</span>; <span class="hljs-comment">//环境光强度，其值通常很小</span><br><span class="hljs-type">vec3</span> ambient = ambientStrength * lightColor; <span class="hljs-comment">//环境光色 </span><br><span class="hljs-type">vec3</span> result = ambient * objectColor; <span class="hljs-comment">//叠加物体本身颜色</span><br>FragColor = <span class="hljs-type">vec4</span>(result, <span class="hljs-number">1.0</span>);<br></code></pre></td></tr></table></figure><h3 id="漫反射光">漫反射光</h3><p>法向量（NormalVector）是垂直于片段表面的向量。法向量一般存储在顶点数据里，作为一个顶点属性。</p><p>两个单位向量的夹角越小，它们点乘的结果越倾向于1。借助这一点，实现漫反射效果，即：越正对光源，颜色越亮。</p><figure><imgsrc="https://yoi-note.oss-cn-chengdu.aliyuncs.com/Image/202407152052444.png"alt="image-20240715205247231" /><figcaption aria-hidden="true">image-20240715205247231</figcaption></figure><p>这个算法需要获取两个数据：光照方向和法向量。前者通过使用uniform向着色器传递<code>lightPos</code>获得，后者通过顶点属性配置获得。</p><p><strong>任何不涉及距离，只涉及方向的向量与计算都应当归一化</strong></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-type">vec3</span> normal = <span class="hljs-built_in">normalize</span>(norm);<br><span class="hljs-type">vec3</span> lightDir = <span class="hljs-built_in">normalize</span>(lightPos-fragWorldPos);<br><span class="hljs-type">float</span> diffuseStrength = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(normal,lightDir),<span class="hljs-number">0.0</span>); <span class="hljs-comment">//防止得到负数</span><br><span class="hljs-type">vec3</span> diffuse = diffuseStrength*lightColor;<br><span class="hljs-type">vec3</span> ambient = ambientStrength*lightColor;<br>FragColor = <span class="hljs-type">vec4</span>((ambient+diffuse)*objectColor,<span class="hljs-number">1.0</span>f); <span class="hljs-comment">//相加而非相乘</span><br></code></pre></td></tr></table></figure><blockquote><p>传入的法向量是基于局部坐标的。法向量不能简单地通过乘以模型矩阵变换，因为这些变换会破坏发现的垂直性质。</p><figure><imgsrc="https://learnopengl-cn.github.io/img/02/02/basic_lighting_normal_transformation.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>法线矩阵（NormalMatrix）是专门将法向量变换到世界坐标的矩阵。它是模型矩阵左上叫3x3部分的逆矩阵的法线矩阵。因此，可以使用<code>Normal = mat3(transpose(inverse(model))) * aNormal</code>来计算世界坐标下的法线。这一操作应当在cpp程序中进行，然后通过uniform传递到着色器，因为矩阵求逆对着色器来说是非常耗时的。</p></blockquote><h3 id="高光">高光</h3><p>高光取决于LightDir、Norm和ViewDir。</p><p><img src="https://yoi-note.oss-cn-chengdu.aliyuncs.com/Image/202407152055591.png" alt="image-20240715205521385" style="zoom:50%;" /></p><p>如图，入射光和反射光与法线的夹角都是α，ViewDir和反射光的夹角是θ。高光最强的地方就是反射光所在的方向，因此，θ越小，高光越强。因此，同样可以通过点乘来得到高光系数。</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-comment">//高光计算</span><br><span class="hljs-type">vec3</span> viewDir = <span class="hljs-built_in">normalize</span>(viewPos-fragWorldPos); <span class="hljs-comment">//viewDir由uniform传入，指相机的世界坐标</span><br><span class="hljs-type">vec3</span> reflectDir = <span class="hljs-built_in">reflect</span>(-lightDir,normal); <span class="hljs-comment">//reflect函数的参数一是由光源指向物体的方向向量</span><br><span class="hljs-type">vec3</span> specular = <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(reflectDir,viewDir),<span class="hljs-number">0.0</span>),shineness)*lightColor*specularStrength;<span class="hljs-comment">//shineness是反光度属性，越大则高光影响范围越大，强度越强</span><br></code></pre></td></tr></table></figure><p>冯氏光照模型的三个部分是<strong>相加</strong>的。</p><blockquote><p>在顶点着色器中完成的冯氏光照模型角Gouraud着色。它的效果不好，因为其颜色由插值决定。</p></blockquote><h3 id="代码">代码</h3><h4 id="世界空间下">世界空间下</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">float</span> ambientStrength = <span class="hljs-number">0.1f</span>;<br>   <span class="hljs-type">float</span> specularStrength = <span class="hljs-number">0.5f</span>;<br>   <span class="hljs-type">int</span> shineness = <span class="hljs-number">32</span>;<br>   <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">glfwWindowShouldClose</span>(window)) &#123;<br>       <span class="hljs-built_in">process_keyboard_input</span>(window);<br>       <span class="hljs-built_in">glClearColor</span>(<span class="hljs-number">0.2f</span>,<span class="hljs-number">0.3f</span>,<span class="hljs-number">0.4f</span>,<span class="hljs-number">1.0f</span>);<br>       <span class="hljs-built_in">glClear</span>(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);<br>       shader.<span class="hljs-built_in">use</span>();<br>       shader.<span class="hljs-built_in">setVec3</span>(<span class="hljs-string">&quot;viewPos&quot;</span>,camera.Position.x,camera.Position.y,camera.Position.z);<br>       <span class="hljs-comment">//绘制imgui交互窗口</span><br>       <span class="hljs-built_in">imgui_frame_init</span>();<br>       <span class="hljs-keyword">if</span>(ImGui::<span class="hljs-built_in">Begin</span>(<span class="hljs-string">&quot;window&quot;</span>))&#123;<br>           ImGui::<span class="hljs-built_in">SliderFloat</span>(<span class="hljs-string">&quot;AmbientStrength&quot;</span>,&amp;ambientStrength,<span class="hljs-number">0.0f</span>,<span class="hljs-number">1.0f</span>);<br>           shader.<span class="hljs-built_in">setFloat</span>(<span class="hljs-string">&quot;ambientStrength&quot;</span>,ambientStrength);<br>           ImGui::<span class="hljs-built_in">SliderFloat</span>(<span class="hljs-string">&quot;SpecularStrength&quot;</span>,&amp;specularStrength,<span class="hljs-number">0.0f</span>,<span class="hljs-number">1.0f</span>);<br>           shader.<span class="hljs-built_in">setFloat</span>(<span class="hljs-string">&quot;specularStrength&quot;</span>,specularStrength);<br>           ImGui::<span class="hljs-built_in">SliderInt</span>(<span class="hljs-string">&quot;Shineness&quot;</span>,&amp;shineness,<span class="hljs-number">2</span>,<span class="hljs-number">256</span>);<br>           shader.<span class="hljs-built_in">setInt</span>(<span class="hljs-string">&quot;shineness&quot;</span>,shineness);<br>           ImGui::<span class="hljs-built_in">SliderFloat3</span>(<span class="hljs-string">&quot;LightPos&quot;</span>,glm::<span class="hljs-built_in">value_ptr</span>(lightPos),<span class="hljs-number">-3.0f</span>,<span class="hljs-number">3.0f</span>);<br>           ImGui::<span class="hljs-built_in">Checkbox</span>(<span class="hljs-string">&quot;canViewRotate(K to switch)&quot;</span>,&amp;canMove);<br>           ImGui::<span class="hljs-built_in">End</span>();<br>       &#125;<br>       <span class="hljs-type">float</span> currFrame=<span class="hljs-built_in">glfwGetTime</span>();<br>       deltaTime = currFrame-lastFrame;<br>       lastFrame = currFrame;<br>       <span class="hljs-comment">//变换</span><br>       glm::mat4 view = camera.<span class="hljs-built_in">GetViewMatrix</span>();<br>       glm::mat4 proj = glm::<span class="hljs-built_in">perspective</span>(glm::<span class="hljs-built_in">radians</span>(camera.Zoom), (<span class="hljs-type">float</span>)SCR_WIDTH / (<span class="hljs-type">float</span>)SCR_HEIGHT, <span class="hljs-number">0.1f</span>, <span class="hljs-number">100.0f</span>);<br>       shader.<span class="hljs-built_in">setMat4</span>(<span class="hljs-string">&quot;view&quot;</span>,view);<br>       shader.<span class="hljs-built_in">setMat4</span>(<span class="hljs-string">&quot;proj&quot;</span>,proj);<br>       <span class="hljs-comment">//绘制物体</span><br>       <span class="hljs-built_in">glBindVertexArray</span>(VAO);<br>       glm::mat4 model = glm::<span class="hljs-built_in">mat4</span>(<span class="hljs-number">1.0f</span>);<br>       shader.<span class="hljs-built_in">setMat4</span>(<span class="hljs-string">&quot;model&quot;</span>, model);<br>       shader.<span class="hljs-built_in">setVec3</span>(<span class="hljs-string">&quot;lightPos&quot;</span>,lightPos.x,lightPos.y,lightPos.z);<br>       <span class="hljs-built_in">glDrawArrays</span>(GL_TRIANGLES, <span class="hljs-number">0</span>, <span class="hljs-number">36</span>);<br>   <span class="hljs-comment">//绘制光源</span><br>       <span class="hljs-built_in">glBindVertexArray</span>(lightVAO);<br>       lightShader.<span class="hljs-built_in">use</span>();<br>       lightShader.<span class="hljs-built_in">setMat4</span>(<span class="hljs-string">&quot;view&quot;</span>,view);<br>       lightShader.<span class="hljs-built_in">setMat4</span>(<span class="hljs-string">&quot;proj&quot;</span>,proj);<br>       model = glm::<span class="hljs-built_in">translate</span>(model,lightPos);<br>       model = glm::<span class="hljs-built_in">scale</span>(model,glm::<span class="hljs-built_in">vec3</span>(<span class="hljs-number">0.5f</span>));<br>       lightShader.<span class="hljs-built_in">setMat4</span>(<span class="hljs-string">&quot;model&quot;</span>, model);<br>       <span class="hljs-built_in">glDrawArrays</span>(GL_TRIANGLES, <span class="hljs-number">0</span>, <span class="hljs-number">36</span>);<br>       <span class="hljs-built_in">imgui_end_draw</span>();<br>       <span class="hljs-comment">//收尾操作</span><br>       <span class="hljs-built_in">glfwSwapBuffers</span>(window);<br>       <span class="hljs-built_in">glfwPollEvents</span>();<br>   &#125;<br></code></pre></td></tr></table></figure><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-meta">#version 330 core</span><br><span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> FragColor;<br><span class="hljs-keyword">in</span> <span class="hljs-type">vec3</span> norm;<br><span class="hljs-keyword">in</span> <span class="hljs-type">vec3</span> fragWorldPos;<br><br><span class="hljs-keyword">uniform</span> <span class="hljs-type">vec3</span> objectColor;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">vec3</span> lightColor;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">float</span> ambientStrength;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">float</span> specularStrength;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">int</span> shineness;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">vec3</span> lightPos;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">vec3</span> viewPos;<br><br><span class="hljs-type">void</span> main() &#123;<br>    <span class="hljs-comment">//漫反射光计算</span><br>    <span class="hljs-type">vec3</span> normal = <span class="hljs-built_in">normalize</span>(norm);<br>    <span class="hljs-type">vec3</span> lightDir = <span class="hljs-built_in">normalize</span>(lightPos-fragWorldPos);<br>    <span class="hljs-type">float</span> diffuseStrength = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(normal,lightDir),<span class="hljs-number">0.0</span>);<br>    <span class="hljs-type">vec3</span> diffuse = diffuseStrength*lightColor;<br>    <span class="hljs-comment">//环境光计算</span><br>    <span class="hljs-type">vec3</span> ambient = ambientStrength*lightColor;<br>    <span class="hljs-comment">//高光计算</span><br>    <span class="hljs-type">vec3</span> viewDir = <span class="hljs-built_in">normalize</span>(viewPos-fragWorldPos);<br>    <span class="hljs-type">vec3</span> reflectDir = <span class="hljs-built_in">reflect</span>(-lightDir,normal);<br>    <span class="hljs-type">vec3</span> specular = <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(reflectDir,viewDir),<span class="hljs-number">0.0</span>),shineness)*lightColor*specularStrength;<br>    FragColor = <span class="hljs-type">vec4</span>((ambient+diffuse+specular)*objectColor,<span class="hljs-number">1.0</span>f);<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-meta">#version 330 core</span><br><span class="hljs-keyword">layout</span> (<span class="hljs-keyword">location</span> = <span class="hljs-number">0</span>) <span class="hljs-keyword">in</span> <span class="hljs-type">vec3</span> aPos;<br><span class="hljs-keyword">layout</span> (<span class="hljs-keyword">location</span> = <span class="hljs-number">1</span>) <span class="hljs-keyword">in</span> <span class="hljs-type">vec3</span> aNorm;<br><br><span class="hljs-keyword">uniform</span> <span class="hljs-type">mat4</span> model;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">mat4</span> view;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">mat4</span> proj;<br><span class="hljs-keyword">out</span> <span class="hljs-type">vec3</span> norm;<br><span class="hljs-keyword">out</span> <span class="hljs-type">vec3</span> fragWorldPos;<br><br><span class="hljs-type">void</span> main()<br>&#123;<br>    <span class="hljs-built_in">gl_Position</span> = proj * view * model * <span class="hljs-type">vec4</span>(aPos, <span class="hljs-number">1.0</span>);<br>    fragWorldPos = (model*<span class="hljs-type">vec4</span>(aPos,<span class="hljs-number">1.0</span>f)).xyz;<br>    norm = aNorm;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="观察空间下">观察空间下</h4><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-meta">#version 330 core</span><br><span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> FragColor;<br><span class="hljs-keyword">in</span> <span class="hljs-type">vec3</span> norm;<br><span class="hljs-keyword">in</span> <span class="hljs-type">vec3</span> fragViewPos;<br><span class="hljs-keyword">in</span> <span class="hljs-type">vec3</span> lightViewPos;<br><br><span class="hljs-keyword">uniform</span> <span class="hljs-type">vec3</span> objectColor;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">vec3</span> lightColor;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">float</span> ambientStrength;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">float</span> specularStrength;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">int</span> shineness;<br><br><span class="hljs-type">void</span> main() &#123;<br>    <span class="hljs-comment">//漫反射光计算</span><br>    <span class="hljs-type">vec3</span> normal = <span class="hljs-built_in">normalize</span>(norm);<br>    <span class="hljs-type">vec3</span> lightDir = <span class="hljs-built_in">normalize</span>(lightViewPos-fragViewPos);<br>    <span class="hljs-type">float</span> diffuseStrength = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(normal,lightDir),<span class="hljs-number">0.0</span>);<br>    <span class="hljs-type">vec3</span> diffuse = diffuseStrength*lightColor;<br>    <span class="hljs-comment">//环境光计算</span><br>    <span class="hljs-type">vec3</span> ambient = ambientStrength*lightColor;<br>    <span class="hljs-comment">//高光计算</span><br>    <span class="hljs-type">vec3</span> viewDir = <span class="hljs-built_in">normalize</span>(-fragViewPos);<br>    <span class="hljs-type">vec3</span> reflectDir = <span class="hljs-built_in">reflect</span>(-lightDir,normal);<br>    <span class="hljs-type">vec3</span> specular = <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(reflectDir,viewDir),<span class="hljs-number">0.0</span>),shineness)*lightColor*specularStrength;<br>    FragColor = <span class="hljs-type">vec4</span>((ambient+diffuse+specular)*objectColor,<span class="hljs-number">1.0</span>f);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-meta">#version 330 core</span><br><span class="hljs-keyword">layout</span> (<span class="hljs-keyword">location</span> = <span class="hljs-number">0</span>) <span class="hljs-keyword">in</span> <span class="hljs-type">vec3</span> aPos;<br><span class="hljs-keyword">layout</span> (<span class="hljs-keyword">location</span> = <span class="hljs-number">1</span>) <span class="hljs-keyword">in</span> <span class="hljs-type">vec3</span> aNorm;<br><br><span class="hljs-keyword">uniform</span> <span class="hljs-type">mat4</span> model;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">mat4</span> view;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">mat4</span> proj;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">vec3</span> lightPos;<br><span class="hljs-keyword">out</span> <span class="hljs-type">vec3</span> norm;<br><span class="hljs-keyword">out</span> <span class="hljs-type">vec3</span> fragViewPos;<br><span class="hljs-keyword">out</span> <span class="hljs-type">vec3</span> lightViewPos;<br><br><span class="hljs-type">void</span> main()<br>&#123;<br>    <span class="hljs-built_in">gl_Position</span> = proj * view * model * <span class="hljs-type">vec4</span>(aPos, <span class="hljs-number">1.0</span>);<br>    fragViewPos = (view*model*<span class="hljs-type">vec4</span>(aPos,<span class="hljs-number">1.0</span>f)).xyz;<br>    lightViewPos = (view*<span class="hljs-type">vec4</span>(lightPos,<span class="hljs-number">1.0</span>f)).xyz;<br>    norm =  <span class="hljs-type">mat3</span>(<span class="hljs-built_in">transpose</span>(<span class="hljs-built_in">inverse</span>(view * model)))*aNorm; <span class="hljs-comment">//关键在于使用法线矩阵变换法线位置</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>图形学</tag>
      
      <tag>OpenGL</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LearnOpenGL学习笔记（四） - 摄像机与入门知识点总结</title>
    <link href="/2024/07/14/LearnOpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%20-%20%E6%91%84%E5%83%8F%E6%9C%BA%E4%B8%8E%E5%85%A5%E9%97%A8%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <url>/2024/07/14/LearnOpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%20-%20%E6%91%84%E5%83%8F%E6%9C%BA%E4%B8%8E%E5%85%A5%E9%97%A8%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>逐渐理解一切... <span id="more"></span></p><h1 id="摄像机">摄像机</h1><p>定义一个摄像机，需要获取其世界坐标、观察方向、指向其右侧与上方的方向向量。</p><ul><li><p>世界坐标：与观察矩阵所使用的变换相同。</p><ul><li><code>glm::vec3 cameraPos = glm::vec3(0.0f,0.0f,3.0f)</code></li></ul></li><li><p>观察方向：借助矢量相减，获取摄像机位置与世界原点之间的方向向量。</p><ul><li><code>glm::vec3 cameraDir = glm::normalize(cameraPos - vec3(0.0f,0.0f,0.0f))</code></li><li><strong>这样得到的实际上是观察方向的反方向。</strong></li></ul></li><li><p>右轴：将上向量与观察方向叉乘。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">glm::vec3 up = glm::<span class="hljs-built_in">vec3</span>(<span class="hljs-number">0.0f</span>,<span class="hljs-number">1.0f</span>,<span class="hljs-number">0.0f</span>);<br>glm::vec3 cameraRight = glm::<span class="hljs-built_in">normalize</span>(glm::<span class="hljs-built_in">cross</span>(up,cameraDir));<br></code></pre></td></tr></table></figure></li><li><p>上轴：将右轴与观察方向叉乘。</p></li></ul><p><code>glm::vec3 cameraUp = glm::normalize(glm::cross(cameraRight,cameraDir))</code></p><blockquote><p>上面的操作定义了一个额外的坐标空间。</p><p>这个操作被称为格拉姆-施密特正交化（Gram-Schmidt Process）</p></blockquote><h2 id="lookat矩阵">LookAt矩阵</h2><p>坐标空间被定义后，便可以创建一个矩阵。把这个矩阵乘以任意向量，便可以把这个向量变换到我们定义的坐标空间。在摄像机空间中，这个矩阵被称为<code>LookAt</code>矩阵。</p><figure><imgsrc="https://yoi-note.oss-cn-chengdu.aliyuncs.com/Image/202407141120521.png"alt="image-20240714112018261" /><figcaption aria-hidden="true">image-20240714112018261</figcaption></figure><blockquote><p>其中，R为相机右轴，U为相机上轴，D为摄像机方向向量（相反，由原点指向相机），P为摄像机位置。</p></blockquote><p>GLM提供了快速创建LookAt矩阵的方法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">glm::mat4 view;<br>view = glm::<span class="hljs-built_in">lookAt</span>(glm::<span class="hljs-built_in">vec3</span>(<span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">3.0f</span>), <span class="hljs-comment">//参数一：摄像机位置</span><br>           glm::<span class="hljs-built_in">vec3</span>(<span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>), <span class="hljs-comment">//参数二：目标位置</span><br>           glm::<span class="hljs-built_in">vec3</span>(<span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>)); <span class="hljs-comment">//参数三：世界空间的上向量。</span><br></code></pre></td></tr></table></figure><p>一般，我们会把三个参数以全局变量的形式定义。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">glm::vec3 cameraPos   = glm::<span class="hljs-built_in">vec3</span>(<span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>,  <span class="hljs-number">3.0f</span>);<br>glm::vec3 cameraFront = glm::<span class="hljs-built_in">vec3</span>(<span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">-1.0f</span>);<br>glm::vec3 cameraUp    = glm::<span class="hljs-built_in">vec3</span>(<span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>,  <span class="hljs-number">0.0f</span>);<br>view = glm::<span class="hljs-built_in">lookAt</span>(cameraPos, cameraPos + cameraFront, cameraUp);<br></code></pre></td></tr></table></figure><blockquote><p>对于任何仅表示方向的向量，都应该做正交化处理。</p></blockquote><h2 id="deltatime">Deltatime</h2><p>Deltatime变量存储了渲染上一帧需要的时间。将该变量引入移动速度的计算，就可以做到每帧的移动速度在各种设备上相对平衡。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">float</span> currentFrame = <span class="hljs-built_in">glfwGetTime</span>();<br>deltaTime = currentFrame - lastFrame;<br>lastFrame = currentFrame;<br></code></pre></td></tr></table></figure><h2 id="视角旋转">视角旋转</h2><p>欧拉角分为三种：</p><ul><li>俯仰角（Pitch）：如何往上或往下看的角，绕x轴旋转。</li><li>偏航角（Yaw）：往左和往右看的程度，绕y轴旋转。</li><li>滚转角（Roll）：翻滚摄像机的程序，绕z轴旋转。</li></ul><p>在Unity和其他引擎中，一般不关心滚转角。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">direction.x = <span class="hljs-built_in">cos</span>(glm::<span class="hljs-built_in">radians</span>(pitch)) * <span class="hljs-built_in">cos</span>(glm::<span class="hljs-built_in">radians</span>(yaw)); <span class="hljs-comment">// 译注：direction代表摄像机的前轴(Front)，这个前轴是和本文第一幅图片的第二个摄像机的方向向量是相反的</span><br>direction.y = <span class="hljs-built_in">sin</span>(glm::<span class="hljs-built_in">radians</span>(pitch));<br>direction.z = <span class="hljs-built_in">cos</span>(glm::<span class="hljs-built_in">radians</span>(pitch)) * <span class="hljs-built_in">sin</span>(glm::<span class="hljs-built_in">radians</span>(yaw));<br></code></pre></td></tr></table></figure><blockquote><p>理解上面的算法：</p><figure><img src="https://learnopengl-cn.github.io/img/01/09/camera_pitch.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>在x/z平面，可以计算水平距离和垂直距离。水平距离是cos(pitch)，垂直距离（即最终的y分量）是sin(pitch)。</p><p>完成水平距离计算后，还要计算x分量和z分量。从上往下看x/z平面：</p><figure><img src="https://learnopengl-cn.github.io/img/01/09/camera_yaw.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>可以知道x分量是cos(yaw)，z分量是sin(yaw)</p></blockquote><p>对于鼠标输入，其水平移动影响Yaw角，竖直移动影响Pitch角。通过计算每一帧鼠标在垂直和水平方向与上一帧的插值，就可以得到具体的pitch和raw角。</p><p><code>glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED)</code>让当前拥有焦点的窗口隐藏并捕捉鼠标。</p><blockquote><p>捕捉（Capture）意味着，无论鼠标如何移动，都不会离开窗口范围。</p></blockquote><p>定义鼠标移动回调函数：<code>void mouse_callback(GLFWwindow* window, double xpos, double ypos)</code>，并将其注册到<code>glfwSetCursorPosCallback(window, mouse_callback)</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mouse_callback</span><span class="hljs-params">(GLFWwindow* window, <span class="hljs-type">double</span> xpos, <span class="hljs-type">double</span> ypos)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//判断鼠标是否第一次进入窗口。如果不设置，会发生鼠标第一次进入窗口时突然跳一下的情况。</span><br>    <span class="hljs-keyword">if</span>(firstMouse)<br>    &#123;<br>        lastX = xpos;<br>        lastY = ypos;<br>        firstMouse = <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//计算鼠标x、y方向的增量</span><br>    <span class="hljs-type">float</span> xoffset = xpos - lastX;<br>    <span class="hljs-comment">//注意：这里要反过来加，否则是空战游戏的操作模式。</span><br>    <span class="hljs-type">float</span> yoffset = lastY - ypos; <br>    lastX = xpos;<br>    lastY = ypos;<br><br>    <span class="hljs-comment">//灵敏度配置</span><br>    <span class="hljs-type">float</span> sensitivity = <span class="hljs-number">0.05</span>;<br>    xoffset *= sensitivity;<br>    yoffset *= sensitivity;<br><br>    yaw   += xoffset;<br>    pitch += yoffset;<br><br>    <span class="hljs-comment">//限制pitch，防止视角偏转。空战类游戏可能不需要限制</span><br>    <span class="hljs-keyword">if</span>(pitch &gt; <span class="hljs-number">89.0f</span>)<br>        pitch = <span class="hljs-number">89.0f</span>;<br>    <span class="hljs-keyword">if</span>(pitch &lt; <span class="hljs-number">-89.0f</span>)<br>        pitch = <span class="hljs-number">-89.0f</span>;<br><br>    <span class="hljs-comment">//根据三角学原理，修改相机朝向。要注意弧度角度转换</span><br>    glm::vec3 front;<br>    front.x = <span class="hljs-built_in">cos</span>(glm::<span class="hljs-built_in">radians</span>(yaw)) * <span class="hljs-built_in">cos</span>(glm::<span class="hljs-built_in">radians</span>(pitch));<br>    front.y = <span class="hljs-built_in">sin</span>(glm::<span class="hljs-built_in">radians</span>(pitch));<br>    front.z = <span class="hljs-built_in">sin</span>(glm::<span class="hljs-built_in">radians</span>(yaw)) * <span class="hljs-built_in">cos</span>(glm::<span class="hljs-built_in">radians</span>(pitch));<br>    cameraFront = glm::<span class="hljs-built_in">normalize</span>(front);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="视角缩放">视角缩放</h2><p><strong>缩放作用于FOV，FOV是投影矩阵范畴的概念，所以缩放是改变的投影矩阵。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">scroll_callback</span><span class="hljs-params">(GLFWwindow* window, <span class="hljs-type">double</span> xoffset, <span class="hljs-type">double</span> yoffset)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">if</span>(fov &gt;= <span class="hljs-number">1.0f</span> &amp;&amp; fov &lt;= <span class="hljs-number">45.0f</span>)<br>    fov -= yoffset;<br>  <span class="hljs-keyword">if</span>(fov &lt;= <span class="hljs-number">1.0f</span>)<br>    fov = <span class="hljs-number">1.0f</span>;<br>  <span class="hljs-keyword">if</span>(fov &gt;= <span class="hljs-number">45.0f</span>)<br>    fov = <span class="hljs-number">45.0f</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>projection = glm::perspective(glm::radians(fov), 800.0f / 600.0f, 0.1f, 100.0f);</code></p><p><code>glfwSetScrollCallback(window, scroll_callback);</code></p><h2 id="手动计算">手动计算</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">glm::mat4 <span class="hljs-title">GetViewMatrix</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 重新计算摄像机的 Right 和 Up 向量</span><br>    Right = glm::<span class="hljs-built_in">normalize</span>(glm::<span class="hljs-built_in">cross</span>(Front, WorldUp));<br>    Up = glm::<span class="hljs-built_in">normalize</span>(glm::<span class="hljs-built_in">cross</span>(Right, Front));<br><br>    <span class="hljs-comment">// 计算LookAt矩阵</span><br>    <span class="hljs-function">glm::mat4 <span class="hljs-title">rotation</span><span class="hljs-params">(<span class="hljs-number">1.0f</span>)</span></span>;<br>    rotation[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = Right.x;<br>    rotation[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = Right.y;<br>    rotation[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] = Right.z;<br>    rotation[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = Up.x;<br>    rotation[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = Up.y;<br>    rotation[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>] = Up.z;<br>    <span class="hljs-comment">//负的是因为，实际上变的是物体而不是摄像机</span><br>    rotation[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = -Front.x;<br>    rotation[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = -Front.y;<br>    rotation[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>] = -Front.z;<br><br>    <span class="hljs-function">glm::mat4 <span class="hljs-title">translation</span><span class="hljs-params">(<span class="hljs-number">1.0f</span>)</span></span>;<br>    translation[<span class="hljs-number">3</span>][<span class="hljs-number">0</span>] = -Position.x;<br>    translation[<span class="hljs-number">3</span>][<span class="hljs-number">1</span>] = -Position.y;<br>    translation[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>] = -Position.z;<br><br>    <span class="hljs-keyword">return</span> rotation * translation;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="知识点">知识点</h2><ul><li>相机空间的施密特正交化：相机位置、方向向量（目标指向相机）、右轴、上轴</li><li>LookAt矩阵与观察矩阵：<code>view = glm::lookAt(cameraPos, cameraPos + cameraFront, cameraUp)</code><ul><li>此处<code>cameraFront</code>为相机指向目标的向量</li></ul></li><li>Deltatime控制速度</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">direction.x = <span class="hljs-built_in">cos</span>(glm::<span class="hljs-built_in">radians</span>(pitch)) * <span class="hljs-built_in">cos</span>(glm::<span class="hljs-built_in">radians</span>(yaw));<br>direction.y = <span class="hljs-built_in">sin</span>(glm::<span class="hljs-built_in">radians</span>(pitch));<br>direction.z = <span class="hljs-built_in">cos</span>(glm::<span class="hljs-built_in">radians</span>(pitch)) * <span class="hljs-built_in">sin</span>(glm::<span class="hljs-built_in">radians</span>(yaw));<br></code></pre></td></tr></table></figure><ul><li>鼠标输入<ul><li><code>glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED)</code></li><li><code>glfwSetCursorPosCallback(window, mouse_callback)</code></li><li><code>pitch</code>角的限制，注意弧度转换</li><li>初次鼠标进入时的判断</li></ul></li><li>滚轮、FOV与投影矩阵</li></ul><h1 id="复习">复习</h1><ul><li><strong>OpenGL</strong>：一个定义了函数布局和输出的图形API的正式规范。</li></ul><p>除OpenGL外，还有DirectX 11，DirectX12，Metal，Vulkan等图形API。在教程中，我们使用的OpenGL版本是3.3。</p><p>我们使用GLFW管理窗口相关的API。</p><ul><li><strong>GLAD</strong>：一个扩展加载库，用来为我们加载并设定所有OpenGL函数指针，从而让我们能够使用所有（现代）OpenGL函数。</li></ul><p>在OpenGL中，所有函数都是运行时动态确定的，因此，IDE没办法给我们提供编译时语法检查和代码补全。为了解决这一问题，我们引入GLAD库，让上述功能成为可能。</p><p><code>gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)</code>用来加载所有OpenGL函数指针。</p><ul><li><strong>视口(Viewport)</strong>： 我们需要渲染的窗口。</li></ul><p>视口与窗口是不同的概念。视口指的是渲染范围，是最终裁剪变换处理的区域。使用<code>glViewport(x,y,width,height)</code>初始化并配置视口。</p><ul><li><strong>图形管线(Graphics Pipeline)</strong>：一个顶点在呈现为像素之前经过的全部过程。</li></ul><p>基本的图形管线可以定义为：顶点数据-&gt;顶点着色器-&gt;几何着色器-&gt;形状装配-&gt;光栅化-&gt;片段着色器-&gt;测试与混合-&gt;输出</p><ul><li><strong>着色器(Shader)</strong>：一个运行在显卡上的小型程序。很多阶段的图形管道都可以使用自定义的着色器来代替原有的功能。</li><li><strong>标准化设备坐标(Normalized Device Coordinates,NDC)</strong>：顶点在通过在剪裁坐标系中剪裁与透视除法后最终呈现在的坐标系。所有位置在NDC下-1.0到1.0的顶点将不会被丢弃并且可见。</li></ul><p>经过顶点着色器处理的坐标必定处于NDC范围内。</p><ul><li><strong>顶点缓冲对象(Vertex Buffer Object)</strong>：一个调用显存并存储所有顶点数据供显卡使用的缓冲对象。</li></ul><p><code>glDrawArray</code>函数直接使用VBO内的数据进行绘制。</p><ul><li><strong>顶点数组对象(Vertex Array Object)</strong>：存储缓冲区和顶点属性状态</li></ul><p>在不使用VAO时，我们每次想绘制一个物体，都需要手动绑定对应的VBO，设置顶点属性指针。</p><p>VAO可以把这些操作保存，并生成一个VAO对象。之后每次想要绘制这个物体，绑定对应的VAO即可。</p><ul><li><strong>元素缓冲对象(Element BufferObject，EBO)，也叫索引缓冲对象(Index Buffer Object，IBO)</strong>：一个存储元素索引供索引化绘制使用的缓冲对象。</li></ul><p>通常，输入的顶点数据不会包含重复的顶点。但对于一些图元来说，它们是共用顶点的。为了简化输入顶点数据，我们使用EBO记录绘制对象所使用的顶点序号。</p><ul><li><strong>Uniform</strong>：一个特殊类型的GLSL变量。它是全局的（在一个着色器程序中每一个着色器都能够访问uniform变量），并且只需要被设定一次。</li></ul><p>使用<code>glUniformnx(Location, value)</code>向某着色器的某个uniform传递值。</p><p>location使用<code>glGetUniformLocation(shaderProgram, nameofuniform)</code>获取。</p><p><code>n</code>代表参数个数，<code>x</code>代表数据类型，可以是fv（float数组）、4i（ivec4）等。</p><p>向Uniform传值之前，对应的着色器程序必须被use。</p><ul><li><strong>纹理(Texture)</strong>：一种包裹着物体的特殊类型图像，给物体精细的视觉效果。</li></ul><p><code>glGenTexture(cnt, addr)</code>用于创建纹理对象。</p><p><code>glBindTexture(GL_TEXTURE_2D, textureObj)</code>用于绑定对象到纹理上下文。</p><p><code>glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_X,GL_X)</code>用于设置纹理参数。参数有GL_TEXTURE_WARP和GL_TEXTURE_MIN_FILTER等。</p><p><code>glTexImage2D(GL_TEXTURE_2D,0,IMAGETYPE,width,height,0,IMAGETYPE,GL_UNSIGNED_BYTE,data)</code>用于将纹理数据载入上下文。</p><p><code>glGenerateMipmap(GL_TEXTURE_2D)</code>用于生成当前上下文存储纹理的多级渐远纹理。</p><p><code>glActiveTexture(GL_TEXTUREX)</code>用于激活X号纹理单元。类似于，让GL_TEXTURE_2D目标换到X号槽。</p><blockquote><p>Active操作以后要Bind。</p></blockquote><ul><li><p><strong>纹理环绕(Texture Wrapping)</strong>：定义了一种当纹理顶点超出范围(0,1)时指定OpenGL如何采样纹理的模式。</p></li><li><p><strong>纹理过滤(Texture Filtering)</strong>：定义了一种当有多种纹素选择时指定OpenGL如何采样纹理的模式。这通常在纹理被放大情况下发生。</p></li><li><p><strong>多级渐远纹理(Mipmaps)</strong>：被存储的材质的一些缩小版本，根据距观察者的距离会使用材质的合适大小。</p></li><li><p><strong>stb_image.h</strong>： 图像加载库。</p></li></ul><p><code>stbi_load(path, &amp;width, &amp;height,&amp;channels,0)</code></p><ul><li><strong>纹理单元(Texture Units)</strong>：通过绑定纹理到不同纹理单元从而允许多个纹理在同一对象上渲染。</li><li><strong>向量(Vector)</strong>：一个定义了在空间中方向和/或位置的数学实体。</li><li><strong>矩阵(Matrix)</strong>： 一个矩形阵列的数学表达式。</li><li><strong>GLM</strong>： 一个为OpenGL打造的数学库。</li><li><strong>局部空间(Local Space)</strong>：一个物体的初始空间。所有的坐标都是相对于物体的原点的。</li></ul><p>局部空间类似于Unity的Transform属性的参数。</p><ul><li><p><strong>世界空间(World Space)</strong>：所有的坐标都相对于全局原点。</p></li><li><p><strong>观察空间(View Space)</strong>：所有的坐标都是从摄像机的视角观察的。</p></li><li><p><strong>裁剪空间(Clip Space)</strong>：所有的坐标都是从摄像机视角观察的，但是该空间应用了投影。这个空间应该是一个顶点坐标最终的空间，作为顶点着色器的输出。OpenGL负责处理剩下的事情（裁剪/透视除法）。</p></li><li><p><strong>屏幕空间(Screen Space)</strong>：所有的坐标都由屏幕视角来观察。坐标的范围是从0到屏幕的宽/高。</p></li><li><p><strong>LookAt矩阵</strong>：一种特殊类型的观察矩阵，它创建了一个坐标系，其中所有坐标都根据从一个位置正在观察目标的用户旋转或者平移。</p></li><li><p><strong>欧拉角(Euler Angles)</strong>：被定义为偏航角(Yaw)，俯仰角(Pitch)，和滚转角(Roll)从而允许我们通过这三个值构造任何3D方向。</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>图形学</tag>
      
      <tag>OpenGL</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LearnOpenGL学习笔记（三） - 变换与坐标</title>
    <link href="/2024/07/13/LearnOpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%20-%20%E5%8F%98%E6%8D%A2%E4%B8%8E%E5%9D%90%E6%A0%87/"/>
    <url>/2024/07/13/LearnOpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%20-%20%E5%8F%98%E6%8D%A2%E4%B8%8E%E5%9D%90%E6%A0%87/</url>
    
    <content type="html"><![CDATA[<p>快乐的一天。 <span id="more"></span></p><h1 id="变换">变换</h1><h2 id="缩放">缩放</h2><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="red"><msub><mi>S</mi><mn>1</mn></msub></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="red"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="red"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="red"><mn>0</mn></mstyle></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="green"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="green"><msub><mi>S</mi><mn>2</mn></msub></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="green"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="green"><mn>0</mn></mstyle></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="blue"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="blue"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="blue"><msub><mi>S</mi><mn>3</mn></msub></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="blue"><mn>0</mn></mstyle></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="purple"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="purple"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="purple"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="purple"><mn>1</mn></mstyle></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>⋅</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="red"><msub><mi>S</mi><mn>1</mn></msub><mo>⋅</mo><mi>x</mi></mstyle></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="green"><msub><mi>S</mi><mn>2</mn></msub><mo>⋅</mo><mi>y</mi></mstyle></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="blue"><msub><mi>S</mi><mn>3</mn></msub><mo>⋅</mo><mi>z</mi></mstyle></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{bmatrix} \color{red}{S_1} &amp; \color{red}0 &amp; \color{red}0 &amp; \color{red}0 \\ \color{green}0 &amp; \color{green}{S_2} &amp; \color{green}0 &amp; \color{green}0 \\ \color{blue}0 &amp; \color{blue}0 &amp; \color{blue}{S_3} &amp; \color{blue}0 \\ \color{purple}0 &amp; \color{purple}0 &amp; \color{purple}0 &amp; \color{purple}1 \end{bmatrix} \cdot \begin{pmatrix} x \\ y \\ z \\ 1 \end{pmatrix} = \begin{pmatrix} \color{red}{S_1} \cdot x \\ \color{green}{S_2} \cdot y \\ \color{blue}{S_3} \cdot z \\ 1 \end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.8em;vertical-align:-2.15em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewBox="0 0 667 4800"><path d="M403 1759 V84 H666 V0 H319 V1759 v1200 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:red;"><span class="mord" style="color:red;"><span class="mord mathnormal" style="margin-right:0.05764em;color:red;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:red;"><span class="mord mtight" style="color:red;">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:green;">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:blue;">0</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:purple;">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:red;">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:green;"><span class="mord" style="color:green;"><span class="mord mathnormal" style="margin-right:0.05764em;color:green;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:green;"><span class="mord mtight" style="color:green;">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:blue;">0</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:purple;">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:red;">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:green;">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:blue;"><span class="mord" style="color:blue;"><span class="mord mathnormal" style="margin-right:0.05764em;color:blue;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:blue;"><span class="mord mtight" style="color:blue;">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:purple;">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:red;">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:green;">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:blue;">0</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:purple;">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewBox="0 0 667 4800"><path d="M347 1759 V0 H0 V84 H263 V1759 v1200 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:4.8em;vertical-align:-2.15em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.875em" height="4.800em" viewBox="0 0 875 4800"><path d="M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,1284c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-1292c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.875em" height="4.800em" viewBox="0 0 875 4800"><path d="M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,1209c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-1344c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:4.8em;vertical-align:-2.15em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.875em" height="4.800em" viewBox="0 0 875 4800"><path d="M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,1284c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-1292c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:red;"><span class="mord" style="color:red;"><span class="mord mathnormal" style="margin-right:0.05764em;color:red;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:red;"><span class="mord mtight" style="color:red;">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:red;">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="color:red;">x</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:green;"><span class="mord" style="color:green;"><span class="mord mathnormal" style="margin-right:0.05764em;color:green;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:green;"><span class="mord mtight" style="color:green;">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:green;">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;color:green;">y</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:blue;"><span class="mord" style="color:blue;"><span class="mord mathnormal" style="margin-right:0.05764em;color:blue;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:blue;"><span class="mord mtight" style="color:blue;">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:blue;">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;color:blue;">z</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.875em" height="4.800em" viewBox="0 0 875 4800"><path d="M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,1209c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-1344c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span></span></span></span><p><br></p><blockquote><p>三维空间的变换矩阵一般都是四维矩阵。w分量与具体变换无关。</p></blockquote><h2 id="位移">位移</h2><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="red"><mn>1</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="red"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="red"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="red"><msub><mi>T</mi><mi>x</mi></msub></mstyle></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="green"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="green"><mn>1</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="green"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="green"><msub><mi>T</mi><mi>y</mi></msub></mstyle></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="blue"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="blue"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="blue"><mn>1</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="blue"><msub><mi>T</mi><mi>z</mi></msub></mstyle></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="purple"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="purple"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="purple"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="purple"><mn>1</mn></mstyle></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>⋅</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>+</mo><mstyle mathcolor="red"><msub><mi>T</mi><mi>x</mi></msub></mstyle></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>y</mi><mo>+</mo><mstyle mathcolor="green"><msub><mi>T</mi><mi>y</mi></msub></mstyle></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>z</mi><mo>+</mo><mstyle mathcolor="blue"><msub><mi>T</mi><mi>z</mi></msub></mstyle></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{bmatrix}  \color{red}1 &amp; \color{red}0 &amp; \color{red}0 &amp; \color{red}{T_x} \\ \color{green}0 &amp; \color{green}1 &amp; \color{green}0 &amp; \color{green}{T_y} \\ \color{blue}0 &amp; \color{blue}0 &amp; \color{blue}1 &amp; \color{blue}{T_z} \\ \color{purple}0 &amp; \color{purple}0 &amp; \color{purple}0 &amp; \color{purple}1 \end{bmatrix} \cdot \begin{pmatrix} x \\ y \\ z \\ 1 \end{pmatrix} = \begin{pmatrix} x + \color{red}{T_x} \\ y + \color{green}{T_y} \\ z + \color{blue}{T_z} \\ 1 \end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.8em;vertical-align:-2.15em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewBox="0 0 667 4800"><path d="M403 1759 V84 H666 V0 H319 V1759 v1200 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:red;">1</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:green;">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:blue;">0</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:purple;">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:red;">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:green;">1</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:blue;">0</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:purple;">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:red;">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:green;">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:blue;">1</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:purple;">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:red;"><span class="mord" style="color:red;"><span class="mord mathnormal" style="margin-right:0.13889em;color:red;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:red;"><span class="mord mathnormal mtight" style="color:red;">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:green;"><span class="mord" style="color:green;"><span class="mord mathnormal" style="margin-right:0.13889em;color:green;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:green;"><span class="mord mathnormal mtight" style="margin-right:0.03588em;color:green;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:blue;"><span class="mord" style="color:blue;"><span class="mord mathnormal" style="margin-right:0.13889em;color:blue;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:blue;"><span class="mord mathnormal mtight" style="margin-right:0.04398em;color:blue;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:purple;">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewBox="0 0 667 4800"><path d="M347 1759 V0 H0 V84 H263 V1759 v1200 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:4.8em;vertical-align:-2.15em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.875em" height="4.800em" viewBox="0 0 875 4800"><path d="M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,1284c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-1292c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.875em" height="4.800em" viewBox="0 0 875 4800"><path d="M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,1209c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-1344c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:4.8em;vertical-align:-2.15em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.875em" height="4.800em" viewBox="0 0 875 4800"><path d="M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,1284c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-1292c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord" style="color:red;"><span class="mord" style="color:red;"><span class="mord mathnormal" style="margin-right:0.13889em;color:red;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:red;"><span class="mord mathnormal mtight" style="color:red;">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord" style="color:green;"><span class="mord" style="color:green;"><span class="mord mathnormal" style="margin-right:0.13889em;color:green;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:green;"><span class="mord mathnormal mtight" style="margin-right:0.03588em;color:green;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord" style="color:blue;"><span class="mord" style="color:blue;"><span class="mord mathnormal" style="margin-right:0.13889em;color:blue;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:blue;"><span class="mord mathnormal mtight" style="margin-right:0.04398em;color:blue;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.875em" height="4.800em" viewBox="0 0 875 4800"><path d="M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,1209c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-1344c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span></span></span></span><p><br></p><blockquote><p>可以看到，因为有了w分量，所以才能实现位移。</p><p>w分量被称为<strong>齐次坐标</strong>（HomogeneousCoordinates）。齐次坐标为0的向量被称为方向向量，它无法被位移。</p></blockquote><h2 id="旋转">旋转</h2><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="red"><mn>1</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="red"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="red"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="red"><mn>0</mn></mstyle></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="green"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="green"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mstyle mathcolor="green"><mrow><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="green"><mn>0</mn></mstyle></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="blue"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="blue"><mrow><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="blue"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="blue"><mn>0</mn></mstyle></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="purple"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="purple"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="purple"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="purple"><mn>1</mn></mstyle></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>⋅</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="green"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow><mo>⋅</mo><mi>y</mi><mo>−</mo><mstyle mathcolor="green"><mrow><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow><mo>⋅</mo><mi>z</mi></mstyle></mstyle></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="blue"><mrow><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow><mo>⋅</mo><mi>y</mi><mo>+</mo><mstyle mathcolor="blue"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow><mo>⋅</mo><mi>z</mi></mstyle></mstyle></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{bmatrix} \color{red}1 &amp; \color{red}0 &amp; \color{red}0 &amp; \color{red}0 \\ \color{green}0 &amp; \color{green}{\cos \theta} &amp; - \color{green}{\sin \theta} &amp; \color{green}0 \\ \color{blue}0 &amp; \color{blue}{\sin \theta} &amp; \color{blue}{\cos \theta} &amp; \color{blue}0 \\ \color{purple}0 &amp; \color{purple}0 &amp; \color{purple}0 &amp; \color{purple}1 \end{bmatrix} \cdot \begin{pmatrix} x \\ y \\ z \\ 1 \end{pmatrix} = \begin{pmatrix} x \\ \color{green}{\cos \theta} \cdot y - \color{green}{\sin \theta} \cdot z \\ \color{blue}{\sin \theta} \cdot y + \color{blue}{\cos \theta} \cdot z \\ 1 \end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.8em;vertical-align:-2.15em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewBox="0 0 667 4800"><path d="M403 1759 V84 H666 V0 H319 V1759 v1200 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:red;">1</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:green;">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:blue;">0</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:purple;">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:red;">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:green;"><span class="mop" style="color:green;"><span style="color:green;">c</span><span style="color:green;">o</span><span style="color:green;">s</span></span><span class="mspace" style="color:green;margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:green;">θ</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:blue;"><span class="mop" style="color:blue;"><span style="color:blue;">s</span><span style="color:blue;">i</span><span style="color:blue;">n</span></span><span class="mspace" style="color:blue;margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:blue;">θ</span></span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:purple;">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:red;">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord" style="color:green;"><span class="mop" style="color:green;"><span style="color:green;">s</span><span style="color:green;">i</span><span style="color:green;">n</span></span><span class="mspace" style="color:green;margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:green;">θ</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:blue;"><span class="mop" style="color:blue;"><span style="color:blue;">c</span><span style="color:blue;">o</span><span style="color:blue;">s</span></span><span class="mspace" style="color:blue;margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:blue;">θ</span></span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:purple;">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:red;">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:green;">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:blue;">0</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:purple;">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewBox="0 0 667 4800"><path d="M347 1759 V0 H0 V84 H263 V1759 v1200 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:4.8em;vertical-align:-2.15em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.875em" height="4.800em" viewBox="0 0 875 4800"><path d="M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,1284c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-1292c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.875em" height="4.800em" viewBox="0 0 875 4800"><path d="M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,1209c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-1344c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:4.8em;vertical-align:-2.15em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.875em" height="4.800em" viewBox="0 0 875 4800"><path d="M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,1284c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-1292c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:green;"><span class="mop" style="color:green;"><span style="color:green;">c</span><span style="color:green;">o</span><span style="color:green;">s</span></span><span class="mspace" style="color:green;margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:green;">θ</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:green;">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;color:green;">y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:green;">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord" style="color:green;"><span class="mop" style="color:green;"><span style="color:green;">s</span><span style="color:green;">i</span><span style="color:green;">n</span></span><span class="mspace" style="color:green;margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:green;">θ</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:green;">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;color:green;">z</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:blue;"><span class="mop" style="color:blue;"><span style="color:blue;">s</span><span style="color:blue;">i</span><span style="color:blue;">n</span></span><span class="mspace" style="color:blue;margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:blue;">θ</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:blue;">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;color:blue;">y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:blue;">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord" style="color:blue;"><span class="mop" style="color:blue;"><span style="color:blue;">c</span><span style="color:blue;">o</span><span style="color:blue;">s</span></span><span class="mspace" style="color:blue;margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:blue;">θ</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:blue;">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;color:blue;">z</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.875em" height="4.800em" viewBox="0 0 875 4800"><path d="M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,1209c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-1344c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span></span></span></span><p><br></p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="red"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mstyle mathcolor="red"><mrow><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="red"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="red"><mn>0</mn></mstyle></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="green"><mrow><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="green"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="green"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="green"><mn>0</mn></mstyle></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="blue"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="blue"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="blue"><mn>1</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="blue"><mn>0</mn></mstyle></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="purple"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="purple"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="purple"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="purple"><mn>1</mn></mstyle></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>⋅</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="red"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow><mo>⋅</mo><mi>x</mi><mo>−</mo><mstyle mathcolor="red"><mrow><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow><mo>⋅</mo><mi>y</mi></mstyle></mstyle></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="green"><mrow><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow><mo>⋅</mo><mi>x</mi><mo>+</mo><mstyle mathcolor="green"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow><mo>⋅</mo><mi>y</mi></mstyle></mstyle></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{bmatrix} \color{red}{\cos \theta} &amp; - \color{red}{\sin \theta} &amp; \color{red}0 &amp; \color{red}0 \\ \color{green}{\sin \theta} &amp; \color{green}{\cos \theta} &amp; \color{green}0 &amp; \color{green}0 \\ \color{blue}0 &amp; \color{blue}0 &amp; \color{blue}1 &amp; \color{blue}0 \\ \color{purple}0 &amp; \color{purple}0 &amp; \color{purple}0 &amp; \color{purple}1 \end{bmatrix} \cdot \begin{pmatrix} x \\ y \\ z \\ 1 \end{pmatrix} = \begin{pmatrix} \color{red}{\cos \theta} \cdot x - \color{red}{\sin \theta} \cdot y  \\ \color{green}{\sin \theta} \cdot x + \color{green}{\cos \theta} \cdot y \\ z \\ 1 \end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.8em;vertical-align:-2.15em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewBox="0 0 667 4800"><path d="M403 1759 V84 H666 V0 H319 V1759 v1200 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:red;"><span class="mop" style="color:red;"><span style="color:red;">c</span><span style="color:red;">o</span><span style="color:red;">s</span></span><span class="mspace" style="color:red;margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:red;">θ</span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:green;"><span class="mop" style="color:green;"><span style="color:green;">s</span><span style="color:green;">i</span><span style="color:green;">n</span></span><span class="mspace" style="color:green;margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:green;">θ</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:blue;">0</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:purple;">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord" style="color:red;"><span class="mop" style="color:red;"><span style="color:red;">s</span><span style="color:red;">i</span><span style="color:red;">n</span></span><span class="mspace" style="color:red;margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:red;">θ</span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:green;"><span class="mop" style="color:green;"><span style="color:green;">c</span><span style="color:green;">o</span><span style="color:green;">s</span></span><span class="mspace" style="color:green;margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:green;">θ</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:blue;">0</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:purple;">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:red;">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:green;">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:blue;">1</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:purple;">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:red;">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:green;">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:blue;">0</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:purple;">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewBox="0 0 667 4800"><path d="M347 1759 V0 H0 V84 H263 V1759 v1200 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:4.8em;vertical-align:-2.15em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.875em" height="4.800em" viewBox="0 0 875 4800"><path d="M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,1284c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-1292c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.875em" height="4.800em" viewBox="0 0 875 4800"><path d="M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,1209c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-1344c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:4.8em;vertical-align:-2.15em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.875em" height="4.800em" viewBox="0 0 875 4800"><path d="M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,1284c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-1292c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:red;"><span class="mop" style="color:red;"><span style="color:red;">c</span><span style="color:red;">o</span><span style="color:red;">s</span></span><span class="mspace" style="color:red;margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:red;">θ</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:red;">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="color:red;">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:red;">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord" style="color:red;"><span class="mop" style="color:red;"><span style="color:red;">s</span><span style="color:red;">i</span><span style="color:red;">n</span></span><span class="mspace" style="color:red;margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:red;">θ</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:red;">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;color:red;">y</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:green;"><span class="mop" style="color:green;"><span style="color:green;">s</span><span style="color:green;">i</span><span style="color:green;">n</span></span><span class="mspace" style="color:green;margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:green;">θ</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:green;">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="color:green;">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:green;">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord" style="color:green;"><span class="mop" style="color:green;"><span style="color:green;">c</span><span style="color:green;">o</span><span style="color:green;">s</span></span><span class="mspace" style="color:green;margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:green;">θ</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:green;">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;color:green;">y</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.875em" height="4.800em" viewBox="0 0 875 4800"><path d="M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,1209c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-1344c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span></span></span></span><p><br></p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="red"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="red"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="red"><mrow><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="red"><mn>0</mn></mstyle></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="green"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="green"><mn>1</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="green"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="green"><mn>0</mn></mstyle></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mstyle mathcolor="blue"><mrow><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="blue"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="blue"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="blue"><mn>0</mn></mstyle></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="purple"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="purple"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="purple"><mn>0</mn></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="purple"><mn>1</mn></mstyle></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>⋅</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="red"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow><mo>⋅</mo><mi>x</mi><mo>+</mo><mstyle mathcolor="red"><mrow><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow><mo>⋅</mo><mi>z</mi></mstyle></mstyle></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mstyle mathcolor="blue"><mrow><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow><mo>⋅</mo><mi>x</mi><mo>+</mo><mstyle mathcolor="blue"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow><mo>⋅</mo><mi>z</mi></mstyle></mstyle></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{bmatrix} \color{red}{\cos \theta} &amp; \color{red}0 &amp; \color{red}{\sin \theta} &amp; \color{red}0 \\ \color{green}0 &amp; \color{green}1 &amp; \color{green}0 &amp; \color{green}0 \\ - \color{blue}{\sin \theta} &amp; \color{blue}0 &amp; \color{blue}{\cos \theta} &amp; \color{blue}0 \\ \color{purple}0 &amp; \color{purple}0 &amp; \color{purple}0 &amp; \color{purple}1 \end{bmatrix} \cdot \begin{pmatrix} x \\ y \\ z \\ 1 \end{pmatrix} = \begin{pmatrix} \color{red}{\cos \theta} \cdot x + \color{red}{\sin \theta} \cdot z \\ y \\ - \color{blue}{\sin \theta} \cdot x + \color{blue}{\cos \theta} \cdot z \\ 1 \end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.8em;vertical-align:-2.15em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewBox="0 0 667 4800"><path d="M403 1759 V84 H666 V0 H319 V1759 v1200 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:red;"><span class="mop" style="color:red;"><span style="color:red;">c</span><span style="color:red;">o</span><span style="color:red;">s</span></span><span class="mspace" style="color:red;margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:red;">θ</span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:green;">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord" style="color:blue;"><span class="mop" style="color:blue;"><span style="color:blue;">s</span><span style="color:blue;">i</span><span style="color:blue;">n</span></span><span class="mspace" style="color:blue;margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:blue;">θ</span></span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:purple;">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:red;">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:green;">1</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:blue;">0</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:purple;">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:red;"><span class="mop" style="color:red;"><span style="color:red;">s</span><span style="color:red;">i</span><span style="color:red;">n</span></span><span class="mspace" style="color:red;margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:red;">θ</span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:green;">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:blue;"><span class="mop" style="color:blue;"><span style="color:blue;">c</span><span style="color:blue;">o</span><span style="color:blue;">s</span></span><span class="mspace" style="color:blue;margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:blue;">θ</span></span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:purple;">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:red;">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:green;">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:blue;">0</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:purple;">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewBox="0 0 667 4800"><path d="M347 1759 V0 H0 V84 H263 V1759 v1200 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:4.8em;vertical-align:-2.15em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.875em" height="4.800em" viewBox="0 0 875 4800"><path d="M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,1284c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-1292c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.875em" height="4.800em" viewBox="0 0 875 4800"><path d="M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,1209c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-1344c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:4.8em;vertical-align:-2.15em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.875em" height="4.800em" viewBox="0 0 875 4800"><path d="M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,1284c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-1292c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:red;"><span class="mop" style="color:red;"><span style="color:red;">c</span><span style="color:red;">o</span><span style="color:red;">s</span></span><span class="mspace" style="color:red;margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:red;">θ</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:red;">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="color:red;">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:red;">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord" style="color:red;"><span class="mop" style="color:red;"><span style="color:red;">s</span><span style="color:red;">i</span><span style="color:red;">n</span></span><span class="mspace" style="color:red;margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:red;">θ</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:red;">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;color:red;">z</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord" style="color:blue;"><span class="mop" style="color:blue;"><span style="color:blue;">s</span><span style="color:blue;">i</span><span style="color:blue;">n</span></span><span class="mspace" style="color:blue;margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:blue;">θ</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:blue;">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="color:blue;">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:blue;">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord" style="color:blue;"><span class="mop" style="color:blue;"><span style="color:blue;">c</span><span style="color:blue;">o</span><span style="color:blue;">s</span></span><span class="mspace" style="color:blue;margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:blue;">θ</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:blue;">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;color:blue;">z</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.875em" height="4.800em" viewBox="0 0 875 4800"><path d="M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,1209c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-1344c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span></span></span></span><p><br></p><p>上面三个矩阵分别是以x、y、z轴旋转θ°的旋转矩阵。</p><p>这些矩阵复合可能会导致万向节死锁。沿任意旋转轴旋转θ°的旋转矩阵如下：</p><p><br></p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi><mo>+</mo><mstyle mathcolor="red"><msup><msub><mi>R</mi><mi>x</mi></msub><mn>2</mn></msup><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>cos</mi><mo>⁡</mo><mi>θ</mi><mo stretchy="false">)</mo></mstyle></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="red"><msub><mi>R</mi><mi>x</mi></msub><mstyle mathcolor="green"><msub><mi>R</mi><mi>y</mi></msub><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>cos</mi><mo>⁡</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>−</mo><mstyle mathcolor="blue"><msub><mi>R</mi><mi>z</mi></msub><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mstyle></mstyle></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="red"><msub><mi>R</mi><mi>x</mi></msub><mstyle mathcolor="blue"><msub><mi>R</mi><mi>z</mi></msub><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>cos</mi><mo>⁡</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>+</mo><mstyle mathcolor="green"><msub><mi>R</mi><mi>y</mi></msub><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mstyle></mstyle></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="green"><msub><mi>R</mi><mi>y</mi></msub><mstyle mathcolor="red"><msub><mi>R</mi><mi>x</mi></msub><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>cos</mi><mo>⁡</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>+</mo><mstyle mathcolor="blue"><msub><mi>R</mi><mi>z</mi></msub><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mstyle></mstyle></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi><mo>+</mo><mstyle mathcolor="green"><msup><msub><mi>R</mi><mi>y</mi></msub><mn>2</mn></msup><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>cos</mi><mo>⁡</mo><mi>θ</mi><mo stretchy="false">)</mo></mstyle></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="green"><msub><mi>R</mi><mi>y</mi></msub><mstyle mathcolor="blue"><msub><mi>R</mi><mi>z</mi></msub><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>cos</mi><mo>⁡</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>−</mo><mstyle mathcolor="red"><msub><mi>R</mi><mi>x</mi></msub><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mstyle></mstyle></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="blue"><msub><mi>R</mi><mi>z</mi></msub><mstyle mathcolor="red"><msub><mi>R</mi><mi>x</mi></msub><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>cos</mi><mo>⁡</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>−</mo><mstyle mathcolor="green"><msub><mi>R</mi><mi>y</mi></msub><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mstyle></mstyle></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle mathcolor="blue"><msub><mi>R</mi><mi>z</mi></msub><mstyle mathcolor="green"><msub><mi>R</mi><mi>y</mi></msub><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>cos</mi><mo>⁡</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>+</mo><mstyle mathcolor="red"><msub><mi>R</mi><mi>x</mi></msub><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mstyle></mstyle></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi><mo>+</mo><mstyle mathcolor="blue"><msup><msub><mi>R</mi><mi>z</mi></msub><mn>2</mn></msup><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>cos</mi><mo>⁡</mo><mi>θ</mi><mo stretchy="false">)</mo></mstyle></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\begin{bmatrix} \cos \theta + \color{red}{R_x}^2(1 - \cos \theta) &amp; \color{red}{R_x}\color{green}{R_y}(1 - \cos \theta) - \color{blue}{R_z} \sin \theta &amp; \color{red}{R_x}\color{blue}{R_z}(1 - \cos \theta) + \color{green}{R_y} \sin \theta &amp; 0 \\ \color{green}{R_y}\color{red}{R_x} (1 - \cos \theta) + \color{blue}{R_z} \sin \theta &amp; \cos \theta + \color{green}{R_y}^2(1 - \cos \theta) &amp; \color{green}{R_y}\color{blue}{R_z}(1 - \cos \theta) - \color{red}{R_x} \sin \theta &amp; 0 \\ \color{blue}{R_z}\color{red}{R_x}(1 - \cos \theta) - \color{green}{R_y} \sin \theta &amp; \color{blue}{R_z}\color{green}{R_y}(1 - \cos \theta) + \color{red}{R_x} \sin \theta &amp; \cos \theta + \color{blue}{R_z}^2(1 - \cos \theta) &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 1 \end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.942em;vertical-align:-2.221em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewBox="0 0 667 4800"><path d="M403 1759 V84 H666 V0 H319 V1759 v1200 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.721em;"><span style="top:-4.8337em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord" style="color:red;"><span class="mord" style="color:red;"><span class="mord" style="color:red;"><span class="mord mathnormal" style="margin-right:0.00773em;color:red;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:red;"><span class="mord mathnormal mtight" style="color:red;">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8873em;"><span style="top:-3.1362em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:red;"><span class="mord mtight" style="color:red;">2</span></span></span></span></span></span></span></span><span class="mopen" style="color:red;">(</span><span class="mord" style="color:red;">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:red;">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop" style="color:red;"><span style="color:red;">c</span><span style="color:red;">o</span><span style="color:red;">s</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:red;">θ</span><span class="mclose" style="color:red;">)</span></span></span><span style="top:-3.5863em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:green;"><span class="mord" style="color:green;"><span class="mord mathnormal" style="margin-right:0.00773em;color:green;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:green;"><span class="mord mathnormal mtight" style="margin-right:0.03588em;color:green;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span><span class="mord" style="color:red;"><span class="mord" style="color:red;"><span class="mord mathnormal" style="margin-right:0.00773em;color:red;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:red;"><span class="mord mathnormal mtight" style="color:red;">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mopen" style="color:red;">(</span><span class="mord" style="color:red;">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:red;">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop" style="color:red;"><span style="color:red;">c</span><span style="color:red;">o</span><span style="color:red;">s</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:red;">θ</span><span class="mclose" style="color:red;">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:red;">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord" style="color:blue;"><span class="mord" style="color:blue;"><span class="mord mathnormal" style="margin-right:0.00773em;color:blue;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:blue;"><span class="mord mathnormal mtight" style="margin-right:0.04398em;color:blue;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop" style="color:blue;"><span style="color:blue;">s</span><span style="color:blue;">i</span><span style="color:blue;">n</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:blue;">θ</span></span></span><span style="top:-2.339em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:blue;"><span class="mord" style="color:blue;"><span class="mord mathnormal" style="margin-right:0.00773em;color:blue;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:blue;"><span class="mord mathnormal mtight" style="margin-right:0.04398em;color:blue;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mord" style="color:red;"><span class="mord" style="color:red;"><span class="mord mathnormal" style="margin-right:0.00773em;color:red;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:red;"><span class="mord mathnormal mtight" style="color:red;">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mopen" style="color:red;">(</span><span class="mord" style="color:red;">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:red;">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop" style="color:red;"><span style="color:red;">c</span><span style="color:red;">o</span><span style="color:red;">s</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:red;">θ</span><span class="mclose" style="color:red;">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:red;">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord" style="color:green;"><span class="mord" style="color:green;"><span class="mord mathnormal" style="margin-right:0.00773em;color:green;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:green;"><span class="mord mathnormal mtight" style="margin-right:0.03588em;color:green;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop" style="color:green;"><span style="color:green;">s</span><span style="color:green;">i</span><span style="color:green;">n</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:green;">θ</span></span></span><span style="top:-1.139em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.221em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.721em;"><span style="top:-4.8337em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:red;"><span class="mord" style="color:red;"><span class="mord mathnormal" style="margin-right:0.00773em;color:red;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:red;"><span class="mord mathnormal mtight" style="color:red;">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mord" style="color:green;"><span class="mord" style="color:green;"><span class="mord mathnormal" style="margin-right:0.00773em;color:green;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:green;"><span class="mord mathnormal mtight" style="margin-right:0.03588em;color:green;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span><span class="mopen" style="color:green;">(</span><span class="mord" style="color:green;">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:green;">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop" style="color:green;"><span style="color:green;">c</span><span style="color:green;">o</span><span style="color:green;">s</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:green;">θ</span><span class="mclose" style="color:green;">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:green;">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord" style="color:blue;"><span class="mord" style="color:blue;"><span class="mord mathnormal" style="margin-right:0.00773em;color:blue;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:blue;"><span class="mord mathnormal mtight" style="margin-right:0.04398em;color:blue;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop" style="color:blue;"><span style="color:blue;">s</span><span style="color:blue;">i</span><span style="color:blue;">n</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:blue;">θ</span></span></span><span style="top:-3.5863em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord" style="color:green;"><span class="mord" style="color:green;"><span class="mord" style="color:green;"><span class="mord mathnormal" style="margin-right:0.00773em;color:green;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:green;"><span class="mord mathnormal mtight" style="margin-right:0.03588em;color:green;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8873em;"><span style="top:-3.1362em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:green;"><span class="mord mtight" style="color:green;">2</span></span></span></span></span></span></span></span><span class="mopen" style="color:green;">(</span><span class="mord" style="color:green;">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:green;">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop" style="color:green;"><span style="color:green;">c</span><span style="color:green;">o</span><span style="color:green;">s</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:green;">θ</span><span class="mclose" style="color:green;">)</span></span></span><span style="top:-2.339em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:blue;"><span class="mord" style="color:blue;"><span class="mord mathnormal" style="margin-right:0.00773em;color:blue;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:blue;"><span class="mord mathnormal mtight" style="margin-right:0.04398em;color:blue;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mord" style="color:green;"><span class="mord" style="color:green;"><span class="mord mathnormal" style="margin-right:0.00773em;color:green;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:green;"><span class="mord mathnormal mtight" style="margin-right:0.03588em;color:green;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span><span class="mopen" style="color:green;">(</span><span class="mord" style="color:green;">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:green;">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop" style="color:green;"><span style="color:green;">c</span><span style="color:green;">o</span><span style="color:green;">s</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:green;">θ</span><span class="mclose" style="color:green;">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:green;">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord" style="color:red;"><span class="mord" style="color:red;"><span class="mord mathnormal" style="margin-right:0.00773em;color:red;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:red;"><span class="mord mathnormal mtight" style="color:red;">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop" style="color:red;"><span style="color:red;">s</span><span style="color:red;">i</span><span style="color:red;">n</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:red;">θ</span></span></span><span style="top:-1.139em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.221em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.721em;"><span style="top:-4.8337em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:red;"><span class="mord" style="color:red;"><span class="mord mathnormal" style="margin-right:0.00773em;color:red;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:red;"><span class="mord mathnormal mtight" style="color:red;">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mord" style="color:blue;"><span class="mord" style="color:blue;"><span class="mord mathnormal" style="margin-right:0.00773em;color:blue;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:blue;"><span class="mord mathnormal mtight" style="margin-right:0.04398em;color:blue;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mopen" style="color:blue;">(</span><span class="mord" style="color:blue;">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:blue;">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop" style="color:blue;"><span style="color:blue;">c</span><span style="color:blue;">o</span><span style="color:blue;">s</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:blue;">θ</span><span class="mclose" style="color:blue;">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:blue;">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord" style="color:green;"><span class="mord" style="color:green;"><span class="mord mathnormal" style="margin-right:0.00773em;color:green;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:green;"><span class="mord mathnormal mtight" style="margin-right:0.03588em;color:green;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop" style="color:green;"><span style="color:green;">s</span><span style="color:green;">i</span><span style="color:green;">n</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:green;">θ</span></span></span><span style="top:-3.5863em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="color:green;"><span class="mord" style="color:green;"><span class="mord mathnormal" style="margin-right:0.00773em;color:green;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:green;"><span class="mord mathnormal mtight" style="margin-right:0.03588em;color:green;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span><span class="mord" style="color:blue;"><span class="mord" style="color:blue;"><span class="mord mathnormal" style="margin-right:0.00773em;color:blue;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:blue;"><span class="mord mathnormal mtight" style="margin-right:0.04398em;color:blue;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mopen" style="color:blue;">(</span><span class="mord" style="color:blue;">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:blue;">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop" style="color:blue;"><span style="color:blue;">c</span><span style="color:blue;">o</span><span style="color:blue;">s</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:blue;">θ</span><span class="mclose" style="color:blue;">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:blue;">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord" style="color:red;"><span class="mord" style="color:red;"><span class="mord mathnormal" style="margin-right:0.00773em;color:red;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:red;"><span class="mord mathnormal mtight" style="color:red;">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop" style="color:red;"><span style="color:red;">s</span><span style="color:red;">i</span><span style="color:red;">n</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:red;">θ</span></span></span><span style="top:-2.339em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord" style="color:blue;"><span class="mord" style="color:blue;"><span class="mord" style="color:blue;"><span class="mord mathnormal" style="margin-right:0.00773em;color:blue;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:blue;"><span class="mord mathnormal mtight" style="margin-right:0.04398em;color:blue;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8873em;"><span style="top:-3.1362em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:blue;"><span class="mord mtight" style="color:blue;">2</span></span></span></span></span></span></span></span><span class="mopen" style="color:blue;">(</span><span class="mord" style="color:blue;">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin" style="color:blue;">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop" style="color:blue;"><span style="color:blue;">c</span><span style="color:blue;">o</span><span style="color:blue;">s</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:blue;">θ</span><span class="mclose" style="color:blue;">)</span></span></span><span style="top:-1.139em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.221em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.721em;"><span style="top:-4.8337em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.5863em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.339em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.139em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.221em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewBox="0 0 667 4800"><path d="M347 1759 V0 H0 V84 H263 V1759 v1200 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span></span></span></span><h2 id="组合">组合</h2><p>当矩阵相乘时，在最右边的矩阵是第一个与向量相乘的，所以应该从右向左读矩阵乘法。</p><p>建议：<strong>在组合矩阵时，先进行缩放操作，然后是旋转，最后才是位移</strong></p><h2 id="glm">GLM</h2><p>GLM是在OpenGL中使用各类数学函数的头文件库。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;glm/glm.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;glm/gtc/matrix_transform.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;glm/gtc/type_ptr.hpp&gt;</span></span><br></code></pre></td></tr></table></figure><p><code>glm::vec4 vec(x,y,z,w)</code>用于创建一个名为vec的四维向量。</p><p><code>glm::mat4 trans = glm::mat4(1.0f)</code>用于创建一个名为trans的四维矩阵，它是一个单位矩阵。</p><blockquote><p>直接使用glm::mat4创建矩阵，会生成一个零矩阵。</p></blockquote><p>当需要对一个向量进行变换操作时，用它乘以对应的变换矩阵即可。</p><h3 id="平移">平移</h3><p><code>glm::translate(mat4, vec3)</code>用于创建一个位移变换矩阵。<code>mat4</code>一般就是单位矩阵，<code>vec3</code>是位移向量。</p><h3 id="缩放-1">缩放</h3><p><code>glm::scale(mat4, vec3)</code>用于创建缩放变换矩阵。<code>mat4</code>是单位矩阵，<code>vec3</code>是各轴缩放系数。</p><h3 id="旋转-1">旋转</h3><p><code>glm::rotate(mat4, radians, vec3)</code>用于创建旋转矩阵。<code>mat4</code>是单位矩阵，<code>radians</code>是需要旋转的弧度，<code>vec3</code>是旋转轴。</p><blockquote><p>radians是一个glm::radians类型变量，表示弧度。通过glm::radians(floatangle)可把角度转换为弧度。</p></blockquote><h3 id="数据传递">数据传递</h3><p>定义<code>mat4</code>类型的<code>uniform</code>，使用如下代码传递：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> transformLoc = <span class="hljs-built_in">glGetUniformLocation</span>(ourShader.ID, <span class="hljs-string">&quot;transform&quot;</span>);<br><span class="hljs-comment">//参数二：传递矩阵的个数</span><br><span class="hljs-comment">//参数三：是否转置。使用GLM（列主序）时无需转置</span><br><span class="hljs-comment">//参数四：把GLM矩阵转换为OpenGL可以读懂的类型</span><br><span class="hljs-built_in">glUniformMatrix4fv</span>(transformLoc, <span class="hljs-number">1</span>, GL_FALSE, glm::<span class="hljs-built_in">value_ptr</span>(trans));<br></code></pre></td></tr></table></figure><p>存在多个对象时，需要单独对每个对象进行变换。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++">shader.<span class="hljs-built_in">use</span>();<br>glm::mat4 trans = glm::<span class="hljs-built_in">mat4</span>(<span class="hljs-number">1.0f</span>);<br>trans = glm::<span class="hljs-built_in">translate</span>(trans,glm::<span class="hljs-built_in">vec3</span>(<span class="hljs-number">-0.5f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>));<br>trans = glm::<span class="hljs-built_in">scale</span>(trans,glm::<span class="hljs-built_in">vec3</span>(<span class="hljs-built_in">sin</span>(<span class="hljs-built_in">glfwGetTime</span>()),<span class="hljs-built_in">sin</span>(<span class="hljs-built_in">glfwGetTime</span>()),<span class="hljs-number">0</span>));<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> transLoc = <span class="hljs-built_in">glGetUniformLocation</span>(shader.ID,<span class="hljs-string">&quot;trans&quot;</span>);<br><span class="hljs-built_in">glUniformMatrix4fv</span>(transLoc,<span class="hljs-number">1</span>,GL_FALSE,glm::<span class="hljs-built_in">value_ptr</span>(trans));<br><span class="hljs-built_in">glDrawElements</span>(GL_TRIANGLES,<span class="hljs-number">6</span>,GL_UNSIGNED_INT,<span class="hljs-number">0</span>);<br>trans = glm::<span class="hljs-built_in">mat4</span>(<span class="hljs-number">1.0f</span>);<br>trans = glm::<span class="hljs-built_in">translate</span>(trans,glm::<span class="hljs-built_in">vec3</span>(<span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>, <span class="hljs-number">0.0f</span>));<br>trans = glm::<span class="hljs-built_in">rotate</span>(trans,<span class="hljs-number">100</span>*glm::<span class="hljs-built_in">radians</span>((<span class="hljs-type">float</span>)<span class="hljs-built_in">glfwGetTime</span>()),glm::<span class="hljs-built_in">vec3</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>));<br><span class="hljs-built_in">glUniformMatrix4fv</span>(transLoc,<span class="hljs-number">1</span>,GL_FALSE,glm::<span class="hljs-built_in">value_ptr</span>(trans));<br><span class="hljs-built_in">glDrawElements</span>(GL_TRIANGLES,<span class="hljs-number">6</span>,GL_UNSIGNED_INT,<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><h1 id="坐标">坐标</h1><p>通常情况下，顶点坐标不一定在NDC范围以内。我们需要在顶点着色器中自行把这些坐标转化为NDC坐标。</p><p>这个坐标转化的过程类似于流水线。</p><p>在坐标转换的过程中，有三个变换矩阵非常重要：</p><ul><li>模型（Model）矩阵</li><li>观察（View）矩阵</li><li>投影（Projection）矩阵</li></ul><p>坐标变换以下列顺序进行：</p><blockquote><p>局部坐标 -&gt; 世界坐标 -&gt; 观察坐标 -&gt; 裁剪坐标 -&gt;屏幕坐标</p></blockquote><figure><imgsrc="https://learnopengl-cn.github.io/img/01/08/coordinate_systems.png"alt="coordinate_systems" /><figcaption aria-hidden="true">coordinate_systems</figcaption></figure><p>坐标变换概述：</p><ol type="1"><li>局部坐标是对象相对于局部原点的坐标，也是物体起始的坐标。</li><li>下一步是将局部坐标变换为世界空间坐标，世界空间坐标是处于一个更大的空间范围的。这些坐标相对于世界的全局原点，它们会和其它物体一起相对于世界的原点进行摆放。</li><li>接下来我们将世界坐标变换为观察空间坐标，使得每个坐标都是从摄像机或者说观察者的角度进行观察的。</li><li>坐标到达观察空间之后，我们需要将其投影到裁剪坐标。裁剪坐标会被处理至-1.0到1.0的范围内，并判断哪些顶点将会出现在屏幕上。</li><li>最后，我们将裁剪坐标变换为屏幕坐标，我们将使用一个叫做视口变换(ViewportTransform)的过程。视口变换将位于-1.0到1.0范围的坐标变换到由glViewport函数所定义的坐标范围内。最后变换出来的坐标将会送到光栅器，将其转化为片段。</li></ol><h2 id="局部空间">局部空间</h2><p>单个物体所在的坐标空间。只在单个物体上有意义。</p><h2 id="世界空间">世界空间</h2><p>每个物体摆放的不同位置。</p><p>使用模型矩阵将局部左边转换为世界坐标。</p><h2 id="观察空间">观察空间</h2><p>又称摄像机空间或视觉空间，是从摄像机的视角所观察到的空间。</p><p>使用观察矩阵，将世界坐标转换为观察坐标。</p><h2 id="裁剪空间">裁剪空间</h2><p>对于任何屏幕上不可见的坐标，都应当被剔除。剔除完以后，剩下的坐标就是屏幕上可见的片段。</p><p>使用投影矩阵将观察坐标变换到裁剪坐标。投影矩阵指定了一个范围的坐标，比如在每个维度上的-1000到1000。投影矩阵接着会将在这个指定的范围内的坐标变换为标准化设备坐标的范围(-1.0,1.0)。所有在范围外的坐标不会被映射到在-1.0到1.0的范围之间，所以会被裁剪掉。</p><blockquote><p>若一个图元一部分在裁剪范围内，一部分在范围外，在交界处将会生成新的顶点。</p></blockquote><p>投影矩阵创建了一个观察箱（ViewingBox），这个观察箱被称为平截头体（Frustum，Unity里称为<strong>视锥</strong>）。</p><p>投影（Projection）是把特定范围内的坐标转换到NDC范围内的过程。</p><p>所有顶点被变换到裁剪空间后，一次透视除法将会执行。具体表现为：位置向量的x，y，z分量分别除以齐次w分量。这一步骤由顶点着色器自动执行。</p><p>随后，最终坐标会被映射到屏幕空间中，并被变换为Fragment。</p><p>投影矩阵分为正交（Orthographic）和透视（Perspective）投影矩阵。</p><p>正交投影矩阵所框定的范围类似于一个长方体。变换后，每个向量的w分量都不会改变。</p><blockquote><p>使用<code>glm::ortho(left, right, bottom, top, near, far)</code>创建正射投影矩阵。</p><p>前两个参数为Frustum的左右坐标，第三、第四个参数为底部和顶部。第五第六个参数为近平面和远平面。</p></blockquote><p>投射投影矩阵所框定的范围类似于一个四边台体。它会修改每个顶点坐标的w值，使得离观察者越远的顶点坐标，w分量就越大。这样，在执行透视除法时，越远的顶点坐标，其x、y、z值会被除的越多，就好像被缩小了一样，从而达成“近大远小”的效果。</p><blockquote><p>使用<code>glm::mat4 proj = glm::perspective(glm::radians(angle), (float)width / (float)height, near, far)</code>创建投影矩阵。</p><p>参数一定义了视野（Field of view，FOV）的值，通常为45.0f.</p><p>参数二定义了宽高比。</p><p>参数三、四为近平面和远平面。</p></blockquote><h2 id="组合-1">组合</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs math">V_&#123;clip&#125; = M_&#123;projection&#125; \cdot M_&#123;view&#125; \cdot M_&#123;model&#125; \cdot V_&#123;local&#125;<br><br></code></pre></td></tr></table></figure><p>经过上面的变换后，就能得到应当被赋给gl_Position的坐标。随后，VertexShader对其进行透视除法和裁剪。</p><h2 id="实践">实践</h2><p>首先创建模型矩阵。一种直观理解模型矩阵的方式是，Unity中的Transform组件。</p><figure><imgsrc="https://yoi-note.oss-cn-chengdu.aliyuncs.com/Image/202407131655497.png"alt="image-20240713165542375" /><figcaption aria-hidden="true">image-20240713165542375</figcaption></figure><p>模型矩阵对物体本身进行平移、旋转、缩放操作，对应Transform的三个属性。</p><p>要绘制世界坐标不同的物体的时候，只需要创建不同的模型矩阵即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">glm::mat4 model;<br><span class="hljs-comment">//该模型矩阵让物体绕x轴旋转-55°</span><br>model = glm::<span class="hljs-built_in">rotate</span>(model, glm::<span class="hljs-built_in">radians</span>(<span class="hljs-number">-55.0f</span>), glm::<span class="hljs-built_in">vec3</span>(<span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>));<br></code></pre></td></tr></table></figure><p>随后创建观察矩阵。当没有观察矩阵时，摄像机处于世界空间原点。在使用上面那个模型矩阵变换的情况下，物体同样处在世界原点。所以我们要往后退，以看到物体。而往后退等价于让物体往后退，所以有观察矩阵：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">glm::mat4 view;<br><span class="hljs-comment">// 注意，我们将矩阵向我们要进行移动场景的反方向移动。</span><br><span class="hljs-comment">// OpenGL使用右手坐标系，z轴正方向指向屏幕外。</span><br>view = glm::<span class="hljs-built_in">translate</span>(view, glm::<span class="hljs-built_in">vec3</span>(<span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">-3.0f</span>));<br></code></pre></td></tr></table></figure><p>最后创建投影矩阵。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">glm::mat4 projection;<br>projection = glm::<span class="hljs-built_in">perspective</span>(glm::<span class="hljs-built_in">radians</span>(<span class="hljs-number">45.0f</span>), screenWidth / screenHeight, <span class="hljs-number">0.1f</span>, <span class="hljs-number">100.0f</span>);<br></code></pre></td></tr></table></figure><p>然后修改Vertex Shader，并传入变换矩阵</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-meta">#version 330 core</span><br><span class="hljs-keyword">layout</span> (<span class="hljs-keyword">location</span> = <span class="hljs-number">0</span>) <span class="hljs-keyword">in</span> <span class="hljs-type">vec3</span> aPos;<br><span class="hljs-keyword">layout</span> (<span class="hljs-keyword">location</span> = <span class="hljs-number">1</span>) <span class="hljs-keyword">in</span> <span class="hljs-type">vec3</span> aCol;<br><span class="hljs-keyword">layout</span> (<span class="hljs-keyword">location</span> = <span class="hljs-number">2</span>) <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> aTex;<br><br><span class="hljs-keyword">out</span> <span class="hljs-type">vec3</span> col;<br><span class="hljs-keyword">out</span> <span class="hljs-type">vec2</span> uv;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">mat4</span> model;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">mat4</span> view;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">mat4</span> proj;<br><br><span class="hljs-type">void</span> main()&#123;<br>    <span class="hljs-built_in">gl_Position</span> = proj*view*model*<span class="hljs-type">vec4</span>(aPos,<span class="hljs-number">1.0</span>);<br>    col = aCol;<br>    uv = aTex;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> modelLoc = <span class="hljs-built_in">glGetUniformLocation</span>(shader.ID,<span class="hljs-string">&quot;model&quot;</span>);<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> viewLoc = <span class="hljs-built_in">glGetUniformLocation</span>(shader.ID,<span class="hljs-string">&quot;view&quot;</span>);<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> projLoc = <span class="hljs-built_in">glGetUniformLocation</span>(shader.ID,<span class="hljs-string">&quot;proj&quot;</span>);<br><span class="hljs-built_in">glUniformMatrix4fv</span>(modelLoc,<span class="hljs-number">1</span>,GL_FALSE,glm::<span class="hljs-built_in">value_ptr</span>(model));<br><span class="hljs-built_in">glUniformMatrix4fv</span>(viewLoc,<span class="hljs-number">1</span>,GL_FALSE,glm::<span class="hljs-built_in">value_ptr</span>(view));<br><span class="hljs-built_in">glUniformMatrix4fv</span>(projLoc,<span class="hljs-number">1</span>,GL_FALSE,glm::<span class="hljs-built_in">value_ptr</span>(proj));<br><span class="hljs-built_in">glDrawElements</span>(GL_TRIANGLES,<span class="hljs-number">6</span>,GL_UNSIGNED_INT,<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><h3 id="z-buffer">Z-Buffer</h3><p>绘制立方体时，使用Z-Buffer解决覆盖问题。</p><p>GLFW自动生成Z-Buffer存储深度信息。片段想要输出它的颜色时，OpenGL会将它的深度值和z缓冲进行比较，如果当前的片段在其它片段之后，它将会被丢弃，否则将会覆盖。这个过程称为<strong>深度测试(DepthTesting)</strong>，它是由OpenGL自动完成的。</p><p>深度测试默认关闭，使用<code>glEnable(GL_DEPTH_TEST)</code>开启。</p><p>同时，深度缓冲也需要在每帧清除。</p><p><code>glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);</code></p><p>绘制许多物体时，不妨使用for循环+改变model矩阵的方式。</p><h2 id="完整代码">完整代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;glad/glad.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;GLFW/glfw3.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;shader_s.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stb_image.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;glm/glm.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;glm/gtc/matrix_transform.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;glm/gtc/type_ptr.hpp&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">float</span> offsetX=<span class="hljs-number">0</span>;<br><span class="hljs-type">float</span> offsetY=<span class="hljs-number">0</span>;<br><span class="hljs-type">float</span> offsetZ=<span class="hljs-number">0</span>;<br><br>glm::vec3 cubePositions[] = &#123;<br>    glm::<span class="hljs-built_in">vec3</span>( <span class="hljs-number">0.0f</span>,  <span class="hljs-number">0.0f</span>,  <span class="hljs-number">0.0f</span>),<br>    glm::<span class="hljs-built_in">vec3</span>( <span class="hljs-number">2.0f</span>,  <span class="hljs-number">5.0f</span>, <span class="hljs-number">-15.0f</span>),<br>    glm::<span class="hljs-built_in">vec3</span>(<span class="hljs-number">-1.5f</span>, <span class="hljs-number">-2.2f</span>, <span class="hljs-number">-2.5f</span>),<br>    glm::<span class="hljs-built_in">vec3</span>(<span class="hljs-number">-3.8f</span>, <span class="hljs-number">-2.0f</span>, <span class="hljs-number">-12.3f</span>),<br>    glm::<span class="hljs-built_in">vec3</span>( <span class="hljs-number">2.4f</span>, <span class="hljs-number">-0.4f</span>, <span class="hljs-number">-3.5f</span>),<br>    glm::<span class="hljs-built_in">vec3</span>(<span class="hljs-number">-1.7f</span>,  <span class="hljs-number">3.0f</span>, <span class="hljs-number">-7.5f</span>),<br>    glm::<span class="hljs-built_in">vec3</span>( <span class="hljs-number">1.3f</span>, <span class="hljs-number">-2.0f</span>, <span class="hljs-number">-2.5f</span>),<br>    glm::<span class="hljs-built_in">vec3</span>( <span class="hljs-number">1.5f</span>,  <span class="hljs-number">2.0f</span>, <span class="hljs-number">-2.5f</span>),<br>    glm::<span class="hljs-built_in">vec3</span>( <span class="hljs-number">1.5f</span>,  <span class="hljs-number">0.2f</span>, <span class="hljs-number">-1.5f</span>),<br>    glm::<span class="hljs-built_in">vec3</span>(<span class="hljs-number">-1.3f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">-1.5f</span>)<br>  &#125;;<br><br><span class="hljs-type">float</span> vertices[] = &#123;<br>    <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>,<br>     <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>,<br>     <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>,<br>     <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>,<br>    <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>,<br>    <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>,<br><br>    <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>,<br>     <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>,<br>     <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>,<br>     <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>,<br>    <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>,<br>    <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>,<br><br>    <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>,<br>    <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>,<br>    <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>,<br>    <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>,<br>    <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>,<br>    <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>,<br><br>     <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>,<br>     <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>,<br>     <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>,<br>     <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>,<br>     <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>,<br>     <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>,<br><br>    <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>,<br>     <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>,<br>     <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>,<br>     <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>,<br>    <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>,<br>    <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>,<br><br>    <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>,<br>     <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>,<br>     <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>,<br>     <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>,<br>    <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>,<br>    <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">process_input</span><span class="hljs-params">(GLFWwindow* window)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">glfwGetKey</span>(window,GLFW_KEY_RIGHT)==GLFW_PRESS) &#123;<br>        offsetX+=<span class="hljs-number">0.01f</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">glfwGetKey</span>(window,GLFW_KEY_LEFT)==GLFW_PRESS) &#123;<br>        offsetX-=<span class="hljs-number">0.01f</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">glfwGetKey</span>(window,GLFW_KEY_UP)==GLFW_PRESS) &#123;<br>        offsetY+=<span class="hljs-number">0.01f</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">glfwGetKey</span>(window,GLFW_KEY_DOWN)==GLFW_PRESS) &#123;<br>        offsetY-=<span class="hljs-number">0.01f</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mouse_scroll_zoom</span><span class="hljs-params">(GLFWwindow* window, <span class="hljs-type">double</span> xoffset, <span class="hljs-type">double</span> yoffset)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(yoffset&gt;<span class="hljs-number">0</span>) &#123;<br>        offsetZ+=<span class="hljs-number">0.1f</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(yoffset&lt;<span class="hljs-number">0</span>) &#123;<br>        offsetZ-=<span class="hljs-number">0.1f</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">frame_buffer_size_callback</span><span class="hljs-params">(GLFWwindow* window, <span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span> </span>&#123;<br>    <span class="hljs-built_in">glViewport</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,width,height);<br>&#125;<br><br><span class="hljs-function">GLFWwindow* <span class="hljs-title">sys_init</span><span class="hljs-params">(<span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span> </span>&#123;<br>    <span class="hljs-comment">//glfw初始化</span><br>    <span class="hljs-built_in">glfwInit</span>();<br>    <span class="hljs-built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MAJOR,<span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MINOR,<span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">glfwWindowHint</span>(GLFW_OPENGL_PROFILE,GLFW_OPENGL_CORE_PROFILE);<br>    GLFWwindow* window = <span class="hljs-built_in">glfwCreateWindow</span>(<span class="hljs-number">800</span>,<span class="hljs-number">600</span>,<span class="hljs-string">&quot;LearnOpenGL&quot;</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span>(window==<span class="hljs-literal">NULL</span>) &#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Failed to create window&quot;</span>&lt;&lt;endl;<br>        <span class="hljs-built_in">glfwTerminate</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-built_in">glfwMakeContextCurrent</span>(window);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">gladLoadGLLoader</span>((GLADloadproc)glfwGetProcAddress)) &#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Failed to load proc&quot;</span>&lt;&lt;endl;<br>        <span class="hljs-built_in">glfwTerminate</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-built_in">glViewport</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">800</span>,<span class="hljs-number">600</span>);<br>    <span class="hljs-built_in">glfwSetFramebufferSizeCallback</span>(window,frame_buffer_size_callback);<br>    <span class="hljs-built_in">glfwSetScrollCallback</span>(window,mouse_scroll_zoom);<br>    <span class="hljs-keyword">return</span> window;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quick_config_buffers</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> GLTYPE, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>* handle, <span class="hljs-type">void</span>* data, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> size)</span> </span>&#123;<br>    <span class="hljs-built_in">glGenBuffers</span>(<span class="hljs-number">1</span>, handle);<br>    <span class="hljs-built_in">glBindBuffer</span>(GLTYPE, *handle);<br>    <span class="hljs-built_in">glBufferData</span>(GLTYPE, size, data, GL_STATIC_DRAW);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quick_config_vao</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *VAO, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *VBO, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *EBO)</span> </span>&#123;<br>    <span class="hljs-built_in">glGenVertexArrays</span>(<span class="hljs-number">1</span>, VAO);<br>    <span class="hljs-built_in">glBindVertexArray</span>(*VAO);<br><br>    <span class="hljs-built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, *VBO);<br>    <span class="hljs-built_in">glBindBuffer</span>(GL_ELEMENT_ARRAY_BUFFER, *EBO);<br><br>    <span class="hljs-comment">// 激活顶点属性</span><br>    <span class="hljs-built_in">glVertexAttribPointer</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, GL_FLOAT, GL_FALSE, <span class="hljs-number">5</span> * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">float</span>), (<span class="hljs-type">void</span>*)<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">glEnableVertexAttribArray</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">glVertexAttribPointer</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, GL_FLOAT, GL_FALSE, <span class="hljs-number">5</span> * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">float</span>), (<span class="hljs-type">void</span>*)(<span class="hljs-number">3</span> * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">float</span>)));<br>    <span class="hljs-built_in">glEnableVertexAttribArray</span>(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-built_in">glBindVertexArray</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">// Unbind VAO</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title">quick_config_texture</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* path,<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> IMAGETYPE)</span> </span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> texture;<br>    <span class="hljs-built_in">stbi_set_flip_vertically_on_load</span>(<span class="hljs-literal">true</span>);<br>    <span class="hljs-built_in">glGenTextures</span>(<span class="hljs-number">1</span>,&amp;texture);<br>    <span class="hljs-built_in">glBindTexture</span>(GL_TEXTURE_2D,texture);<br>    <span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D,GL_TEXTURE_WRAP_S,GL_REPEAT);<br>    <span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D,GL_TEXTURE_WRAP_T,GL_REPEAT);<br>    <span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR_MIPMAP_LINEAR);<br>    <span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);<br>    <span class="hljs-type">int</span> width,height,channels;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* data = <span class="hljs-built_in">stbi_load</span>(path, &amp;width, &amp;height,&amp;channels,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(data) &#123;<br>        <span class="hljs-built_in">glTexImage2D</span>(GL_TEXTURE_2D,<span class="hljs-number">0</span>,IMAGETYPE,width,height,<span class="hljs-number">0</span>,IMAGETYPE,GL_UNSIGNED_BYTE,data);<br>        <span class="hljs-built_in">glGenerateMipmap</span>(GL_TEXTURE_2D);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Failed to load image&quot;</span>&lt;&lt;endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">stbi_image_free</span>(data);<br>    <span class="hljs-keyword">return</span> texture;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//初始化系统与函数加载</span><br>    GLFWwindow* window = <span class="hljs-built_in">sys_init</span>(<span class="hljs-number">800</span>,<span class="hljs-number">600</span>);<br>    <span class="hljs-keyword">if</span>(window==<span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-comment">//加载着色器</span><br>    <span class="hljs-function">Shader <span class="hljs-title">shader</span><span class="hljs-params">(<span class="hljs-string">&quot;Shaders/vertex.glsl&quot;</span>,<span class="hljs-string">&quot;Shaders/fragment.glsl&quot;</span>)</span></span>;<br>    <span class="hljs-comment">//配置VBO、EBO、VAO</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> VBO, EBO, VAO;<br>    <span class="hljs-built_in">quick_config_buffers</span>(GL_ARRAY_BUFFER, &amp;VBO, vertices, <span class="hljs-built_in">sizeof</span>(vertices));<br>    <span class="hljs-built_in">quick_config_vao</span>(&amp;VAO, &amp;VBO, &amp;EBO);<br>    <span class="hljs-comment">//加载、配置纹理</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> textures[<span class="hljs-number">2</span>];<br>    textures[<span class="hljs-number">0</span>]=<span class="hljs-built_in">quick_config_texture</span>(<span class="hljs-string">&quot;Imgs/container.jpg&quot;</span>,GL_RGB);<br>    textures[<span class="hljs-number">1</span>]=<span class="hljs-built_in">quick_config_texture</span>(<span class="hljs-string">&quot;Imgs/awesomeface.png&quot;</span>,GL_RGBA);<br>    shader.<span class="hljs-built_in">use</span>();<br>    shader.<span class="hljs-built_in">setInt</span>(<span class="hljs-string">&quot;texture1&quot;</span>,<span class="hljs-number">0</span>);<br>    shader.<span class="hljs-built_in">setInt</span>(<span class="hljs-string">&quot;texture2&quot;</span>,<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">glActiveTexture</span>(GL_TEXTURE0);<br>    <span class="hljs-built_in">glBindTexture</span>(GL_TEXTURE_2D,textures[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">glActiveTexture</span>(GL_TEXTURE1);<br>    <span class="hljs-built_in">glBindTexture</span>(GL_TEXTURE_2D,textures[<span class="hljs-number">1</span>]);<br>    <span class="hljs-built_in">glEnable</span>(GL_DEPTH_TEST);<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">glfwWindowShouldClose</span>(window)) &#123;<br>        <span class="hljs-built_in">process_input</span>(window);<br>        <span class="hljs-built_in">glClearColor</span>(<span class="hljs-number">0.2f</span>,<span class="hljs-number">0.3f</span>,<span class="hljs-number">0.4f</span>,<span class="hljs-number">1.0f</span>);<br>        <span class="hljs-built_in">glClear</span>(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);<br>        shader.<span class="hljs-built_in">use</span>();<br>        <span class="hljs-comment">//变换</span><br>        glm::mat4 view = glm::<span class="hljs-built_in">mat4</span>(<span class="hljs-number">1.0f</span>);<br>        view = glm::<span class="hljs-built_in">translate</span>(view,glm::<span class="hljs-built_in">vec3</span>(<span class="hljs-number">0.0f</span>+offsetX,<span class="hljs-number">0.0f</span>+offsetY,<span class="hljs-number">-3.0f</span>+offsetZ));<br>        glm::mat4 proj = glm::<span class="hljs-built_in">perspective</span>(glm::<span class="hljs-built_in">radians</span>(<span class="hljs-number">45.0f</span>),<span class="hljs-number">800.0f</span>/<span class="hljs-number">600.0f</span>,<span class="hljs-number">0.1f</span>,<span class="hljs-number">100.0f</span>);<br>        shader.<span class="hljs-built_in">setMat4</span>(<span class="hljs-string">&quot;view&quot;</span>,view);<br>        shader.<span class="hljs-built_in">setMat4</span>(<span class="hljs-string">&quot;proj&quot;</span>,proj);<br>        <span class="hljs-built_in">glBindVertexArray</span>(VAO);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>        &#123;<br>            glm::mat4 model = glm::<span class="hljs-built_in">mat4</span>(<span class="hljs-number">1.0f</span>);<br>            model = glm::<span class="hljs-built_in">translate</span>(model, cubePositions[i]);<br>            <span class="hljs-type">float</span> angle = <span class="hljs-number">20.0f</span> * i;<br>            model = glm::<span class="hljs-built_in">rotate</span>(model, (<span class="hljs-type">float</span>)<span class="hljs-built_in">glfwGetTime</span>()*glm::<span class="hljs-built_in">radians</span>(angle), glm::<span class="hljs-built_in">vec3</span>(<span class="hljs-number">1.0f</span>, <span class="hljs-number">0.3f</span>, <span class="hljs-number">0.5f</span>));<br>            shader.<span class="hljs-built_in">setMat4</span>(<span class="hljs-string">&quot;model&quot;</span>, model);<br>            <span class="hljs-built_in">glDrawArrays</span>(GL_TRIANGLES, <span class="hljs-number">0</span>, <span class="hljs-number">36</span>);<br>        &#125;<br>        <span class="hljs-comment">//收尾操作</span><br>        <span class="hljs-built_in">glfwSwapBuffers</span>(window);<br>        <span class="hljs-built_in">glfwPollEvents</span>();<br>    &#125;<br>    <span class="hljs-built_in">glDeleteTextures</span>(<span class="hljs-number">2</span>,textures);<br>    <span class="hljs-built_in">glfwTerminate</span>();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-meta">#version 330 core</span><br><span class="hljs-keyword">layout</span> (<span class="hljs-keyword">location</span> = <span class="hljs-number">0</span>) <span class="hljs-keyword">in</span> <span class="hljs-type">vec3</span> aPos;<br><span class="hljs-keyword">layout</span> (<span class="hljs-keyword">location</span> = <span class="hljs-number">1</span>) <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> aTex;<br><br><span class="hljs-keyword">out</span> <span class="hljs-type">vec2</span> uv;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">mat4</span> model;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">mat4</span> view;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">mat4</span> proj;<br><br><span class="hljs-type">void</span> main()&#123;<br>    <span class="hljs-built_in">gl_Position</span> = proj*view*model*<span class="hljs-type">vec4</span>(aPos,<span class="hljs-number">1.0</span>);<br>    uv = aTex;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-meta">#version 330 core</span><br><span class="hljs-keyword">layout</span> (<span class="hljs-keyword">location</span> = <span class="hljs-number">0</span>) <span class="hljs-keyword">in</span> <span class="hljs-type">vec3</span> aPos;<br><span class="hljs-keyword">layout</span> (<span class="hljs-keyword">location</span> = <span class="hljs-number">1</span>) <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> aTex;<br><br><span class="hljs-keyword">out</span> <span class="hljs-type">vec2</span> uv;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">mat4</span> model;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">mat4</span> view;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">mat4</span> proj;<br><br><span class="hljs-type">void</span> main()&#123;<br>    <span class="hljs-built_in">gl_Position</span> = proj*view*model*<span class="hljs-type">vec4</span>(aPos,<span class="hljs-number">1.0</span>);<br>    uv = aTex;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>图形学</tag>
      
      <tag>OpenGL</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LearnOpenGL学习笔记（二） - 着色器与纹理</title>
    <link href="/2024/07/12/LearnOpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%20-%20%E7%9D%80%E8%89%B2%E5%99%A8%E4%B8%8E%E7%BA%B9%E7%90%86/"/>
    <url>/2024/07/12/LearnOpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%20-%20%E7%9D%80%E8%89%B2%E5%99%A8%E4%B8%8E%E7%BA%B9%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>喘口气。 <span id="more"></span></p><h1 id="着色器">着色器</h1><h2 id="glsl">GLSL</h2><p>典型着色器程序的结构如下：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-meta">#version version_number</span><br><span class="hljs-keyword">in</span> type in_variable_name;<br><span class="hljs-keyword">in</span> type in_variable_name;<br><span class="hljs-keyword">out</span> type out_variable_name;<br><span class="hljs-keyword">uniform</span> type uniform_name;<br><span class="hljs-type">int</span> main()<br>&#123;<br>  <span class="hljs-comment">// 处理输入并进行一些图形操作</span><br>  ...<br>  <span class="hljs-comment">// 输出处理过的结果到输出变量</span><br>  out_variable_name = weird_stuff_we_processed;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>对于Vertex Shader，输入变量被称为VertexAttribute。在OpenGL中一般至少能声明16个VertexAttribute，每个含4个分量。</p></blockquote><h3 id="向量">向量</h3><p>向量是GLSL中最常用的数据类型。包含<code>vecn</code>、<code>bvecn</code>、<code>ivecn</code>、<code>uvecn</code>、<code>dvecn</code>。前缀代表分量的基本类型，后缀n代表维度数。一般使用<code>vecn</code>。</p><p>使用<code>.x</code>、<code>.y</code>、<code>.z</code>和<code>.w</code>来获取它们的第1、2、3、4个分量。GLSL也允许对颜色使用<code>rgba</code>，或是对纹理坐标使用<code>stpq</code>访问相同的分量。</p><p>与CG类似，可以通过重组（Swizzling）的方式填充向量分量。</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-type">vec2</span> someVec;<br><span class="hljs-type">vec4</span> differentVec = someVec.xyxx;<br><span class="hljs-type">vec3</span> anotherVec = differentVec.zyw;<br><span class="hljs-type">vec4</span> otherVec = someVec.xxxx + anotherVec.yxzy;<br></code></pre></td></tr></table></figure><p>与此同时，还可以使用向量构造函数直接给向量变量复制，如<code>vec2 vect = vec2(0.5, 0.7)</code></p><h3 id="输入输出">输入输出</h3><p><code>in</code>和<code>out</code>关键字用于定义着色器的输入和输出。只要一个输出变量与下一个着色器阶段的输入匹配，它就会传递下去（前一阶段的输出变量的变量名，应当与后阶段的输入变量的变量名相同）。但在顶点和片段着色器中会有点不同。</p><p>对于VertexShader，其特殊点在于<code>location</code>关键字。<code>location</code>定义了着色器从顶点数据的哪一部分接收数据。例如，在VertexShader中，我定义了两个<code>vec4</code>，第一个是位置数据aPos，它的<code>location</code>是0；第二个是颜色数据<code>aCol</code>，它的<code>location</code>是1。</p><p>使用<code>layout (location = 0)</code>定义某输入变量的<code>location</code>。</p><p>对于FragmentShader，应当始终保证存在一个<code>vec4</code>型输出变量，用于输出最终颜色。</p><h3 id="uniform">Uniform</h3><p><code>Uniform</code>用于在cpp程序中向着色器输入数据，改变其表现。</p><p>如其名，<code>Uniform</code>在每个着色器程序中都是独一无二的。在这个Program链接的所有Shader中，只能存在一个相同名称的<code>Uniform</code>。</p><p>使用<code>uniform</code>关键字定义<code>Uniform</code>变量。</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-keyword">uniform</span> <span class="hljs-type">vec4</span> ourColor;<br></code></pre></td></tr></table></figure><p>在cpp程序中改变<code>uniform</code>的代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">float</span> timeValue = <span class="hljs-built_in">glfwGetTime</span>(); <span class="hljs-comment">//获取当前程序运行的秒数</span><br><span class="hljs-type">float</span> greenValue = (<span class="hljs-built_in">sin</span>(timeValue) / <span class="hljs-number">2.0f</span>) + <span class="hljs-number">0.5f</span>;<br><span class="hljs-comment">//使用glGetUniformLocation函数，在shaderProgram程序中获取名为&quot;outColor&quot;的Uniform变量位置</span><br><span class="hljs-type">int</span> vertexColorLocation = <span class="hljs-built_in">glGetUniformLocation</span>(shaderProgram, <span class="hljs-string">&quot;ourColor&quot;</span>);<br><span class="hljs-built_in">glUseProgram</span>(shaderProgram);<br><span class="hljs-comment">//获取位置后，使用glUniform4f函数，以之前获取的位置为参数，设置它的值。</span><br><span class="hljs-built_in">glUniform4f</span>(vertexColorLocation, <span class="hljs-number">0.0f</span>, greenValue, <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>);<br></code></pre></td></tr></table></figure><blockquote><p>更新uniform值时，必须Use它所在的Program，否则更新无效。</p><p>除glUniform4f外，还有glUniform3i（ivec3)、glUniformfv（float[]或vecn）、glUniformui(unsignedint)等。</p></blockquote><h2 id="多顶点属性">多顶点属性</h2><p>考虑如下顶点数据：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">float</span> vertices[] = &#123;<br>    <span class="hljs-comment">// 位置              // 颜色</span><br>     <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>, <span class="hljs-number">0.0f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>,   <span class="hljs-comment">// 右下</span><br>    <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>, <span class="hljs-number">0.0f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>,   <span class="hljs-comment">// 左下</span><br>     <span class="hljs-number">0.0f</span>,  <span class="hljs-number">0.5f</span>, <span class="hljs-number">0.0f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>    <span class="hljs-comment">// 顶部</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>我们知道，可以使用<code>layout(location = x)</code>来标记不同的顶点属性，通过<code>gVertexAttribPointer</code>来告诉程序该如何处理这些不同的属性。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 位置属性</span><br><span class="hljs-built_in">glVertexAttribPointer</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, GL_FLOAT, GL_FALSE, <span class="hljs-number">6</span> * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">float</span>), (<span class="hljs-type">void</span>*)<span class="hljs-number">0</span>);<br><span class="hljs-built_in">glEnableVertexAttribArray</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">// 颜色属性</span><br><span class="hljs-built_in">glVertexAttribPointer</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, GL_FLOAT, GL_FALSE, <span class="hljs-number">6</span> * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">float</span>), (<span class="hljs-type">void</span>*)(<span class="hljs-number">3</span>* <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">float</span>)));<br><span class="hljs-built_in">glEnableVertexAttribArray</span>(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h3 id="自定义着色器类">自定义着色器类</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> SHADER_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SHADER_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;glad/glad.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Shader</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> ID;<br>    <span class="hljs-comment">// constructor generates the shader on the fly</span><br>    <span class="hljs-comment">// ------------------------------------------------------------------------</span><br>    <span class="hljs-built_in">Shader</span>(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* vertexPath, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* fragmentPath)<br>    &#123;<br>        <span class="hljs-comment">// 1. retrieve the vertex/fragment source code from filePath</span><br>        std::string vertexCode;<br>        std::string fragmentCode;<br>        std::ifstream vShaderFile;<br>        std::ifstream fShaderFile;<br>        <span class="hljs-comment">// ensure ifstream objects can throw exceptions:</span><br>        vShaderFile.<span class="hljs-built_in">exceptions</span> (std::ifstream::failbit | std::ifstream::badbit);<br>        fShaderFile.<span class="hljs-built_in">exceptions</span> (std::ifstream::failbit | std::ifstream::badbit);<br>        <span class="hljs-keyword">try</span><br>        &#123;<br>            <span class="hljs-comment">// open files</span><br>            vShaderFile.<span class="hljs-built_in">open</span>(vertexPath);<br>            fShaderFile.<span class="hljs-built_in">open</span>(fragmentPath);<br>            std::stringstream vShaderStream, fShaderStream;<br>            <span class="hljs-comment">// read file&#x27;s buffer contents into streams</span><br>            vShaderStream &lt;&lt; vShaderFile.<span class="hljs-built_in">rdbuf</span>();<br>            fShaderStream &lt;&lt; fShaderFile.<span class="hljs-built_in">rdbuf</span>();<br>            <span class="hljs-comment">// close file handlers</span><br>            vShaderFile.<span class="hljs-built_in">close</span>();<br>            fShaderFile.<span class="hljs-built_in">close</span>();<br>            <span class="hljs-comment">// convert stream into string</span><br>            vertexCode   = vShaderStream.<span class="hljs-built_in">str</span>();<br>            fragmentCode = fShaderStream.<span class="hljs-built_in">str</span>();<br>        &#125;<br>        <span class="hljs-built_in">catch</span> (std::ifstream::failure&amp; e)<br>        &#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;ERROR::SHADER::FILE_NOT_SUCCESSFULLY_READ: &quot;</span> &lt;&lt; e.<span class="hljs-built_in">what</span>() &lt;&lt; std::endl;<br>        &#125;<br>        <span class="hljs-type">const</span> <span class="hljs-type">char</span>* vShaderCode = vertexCode.<span class="hljs-built_in">c_str</span>();<br>        <span class="hljs-type">const</span> <span class="hljs-type">char</span> * fShaderCode = fragmentCode.<span class="hljs-built_in">c_str</span>();<br>        <span class="hljs-comment">// 2. compile shaders</span><br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> vertex, fragment;<br>        <span class="hljs-comment">// vertex shader</span><br>        vertex = <span class="hljs-built_in">glCreateShader</span>(GL_VERTEX_SHADER);<br>        <span class="hljs-built_in">glShaderSource</span>(vertex, <span class="hljs-number">1</span>, &amp;vShaderCode, <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-built_in">glCompileShader</span>(vertex);<br>        <span class="hljs-built_in">checkCompileErrors</span>(vertex, <span class="hljs-string">&quot;VERTEX&quot;</span>);<br>        <span class="hljs-comment">// fragment Shader</span><br>        fragment = <span class="hljs-built_in">glCreateShader</span>(GL_FRAGMENT_SHADER);<br>        <span class="hljs-built_in">glShaderSource</span>(fragment, <span class="hljs-number">1</span>, &amp;fShaderCode, <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-built_in">glCompileShader</span>(fragment);<br>        <span class="hljs-built_in">checkCompileErrors</span>(fragment, <span class="hljs-string">&quot;FRAGMENT&quot;</span>);<br>        <span class="hljs-comment">// shader Program</span><br>        ID = <span class="hljs-built_in">glCreateProgram</span>();<br>        <span class="hljs-built_in">glAttachShader</span>(ID, vertex);<br>        <span class="hljs-built_in">glAttachShader</span>(ID, fragment);<br>        <span class="hljs-built_in">glLinkProgram</span>(ID);<br>        <span class="hljs-built_in">checkCompileErrors</span>(ID, <span class="hljs-string">&quot;PROGRAM&quot;</span>);<br>        <span class="hljs-comment">// delete the shaders as they&#x27;re linked into our program now and no longer necessary</span><br>        <span class="hljs-built_in">glDeleteShader</span>(vertex);<br>        <span class="hljs-built_in">glDeleteShader</span>(fragment);<br>    &#125;<br>    <span class="hljs-comment">// activate the shader</span><br>    <span class="hljs-comment">// ------------------------------------------------------------------------</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">use</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">glUseProgram</span>(ID);<br>    &#125;<br>    <span class="hljs-comment">// utility uniform functions</span><br>    <span class="hljs-comment">// ------------------------------------------------------------------------</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setBool</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp;name, <span class="hljs-type">bool</span> value)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">glUniform1i</span>(<span class="hljs-built_in">glGetUniformLocation</span>(ID, name.<span class="hljs-built_in">c_str</span>()), (<span class="hljs-type">int</span>)value);<br>    &#125;<br>    <span class="hljs-comment">// ------------------------------------------------------------------------</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setInt</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp;name, <span class="hljs-type">int</span> value)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">glUniform1i</span>(<span class="hljs-built_in">glGetUniformLocation</span>(ID, name.<span class="hljs-built_in">c_str</span>()), value);<br>    &#125;<br>    <span class="hljs-comment">// ------------------------------------------------------------------------</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setFloat</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp;name, <span class="hljs-type">float</span> value)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">glUniform1f</span>(<span class="hljs-built_in">glGetUniformLocation</span>(ID, name.<span class="hljs-built_in">c_str</span>()), value);<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">// utility function for checking shader compilation/linking errors.</span><br>    <span class="hljs-comment">// ------------------------------------------------------------------------</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">checkCompileErrors</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> shader, std::string type)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> success;<br>        <span class="hljs-type">char</span> infoLog[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">if</span> (type != <span class="hljs-string">&quot;PROGRAM&quot;</span>)<br>        &#123;<br>            <span class="hljs-built_in">glGetShaderiv</span>(shader, GL_COMPILE_STATUS, &amp;success);<br>            <span class="hljs-keyword">if</span> (!success)<br>            &#123;<br>                <span class="hljs-built_in">glGetShaderInfoLog</span>(shader, <span class="hljs-number">1024</span>, <span class="hljs-literal">NULL</span>, infoLog);<br>                std::cout &lt;&lt; <span class="hljs-string">&quot;ERROR::SHADER_COMPILATION_ERROR of type: &quot;</span> &lt;&lt; type &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span> &lt;&lt; infoLog &lt;&lt; <span class="hljs-string">&quot;\n -- --------------------------------------------------- -- &quot;</span> &lt;&lt; std::endl;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">glGetProgramiv</span>(shader, GL_LINK_STATUS, &amp;success);<br>            <span class="hljs-keyword">if</span> (!success)<br>            &#123;<br>                <span class="hljs-built_in">glGetProgramInfoLog</span>(shader, <span class="hljs-number">1024</span>, <span class="hljs-literal">NULL</span>, infoLog);<br>                std::cout &lt;&lt; <span class="hljs-string">&quot;ERROR::PROGRAM_LINKING_ERROR of type: &quot;</span> &lt;&lt; type &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span> &lt;&lt; infoLog &lt;&lt; <span class="hljs-string">&quot;\n -- --------------------------------------------------- -- &quot;</span> &lt;&lt; std::endl;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><blockquote><p>Shader对象的构造必须要在加载完GLAD proc以后，否则报错。</p></blockquote><h1 id="纹理">纹理</h1><h2 id="简介">简介</h2><p>纹理（Texture）用于在不增加顶点数量的情况下添加物体的细节。它就像一层贴纸一样贴在几何体上。</p><blockquote><p>纹理也可以用来存储数据。</p></blockquote><p>纹理“贴”到几何体上的过程被称为映射（Map）。纹理坐标（TextureCoordinate）用于指定某个顶点该从纹理的哪个位置采样（Sample，采集Fragment颜色）。非顶点的几何体区域通过片段插值（FragmentInterpolation）采样。</p><p>纹理坐标以左下角为原点，右上角为（1, 1）点。</p><p>对于超出[0, 1]范围的纹理坐标，可以指定纹理环绕方式来处理。</p><table><thead><tr><th style="text-align: left;">环绕方式</th><th style="text-align: left;">描述</th></tr></thead><tbody><tr><td style="text-align: left;">GL_REPEAT</td><tdstyle="text-align: left;">对纹理的默认行为。重复纹理图像。(用于二方连续纹理)</td></tr><tr><td style="text-align: left;">GL_MIRRORED_REPEAT</td><tdstyle="text-align: left;">和GL_REPEAT一样，但每次重复图片是镜像放置的。</td></tr><tr><td style="text-align: left;">GL_CLAMP_TO_EDGE</td><tdstyle="text-align: left;">纹理坐标会被约束在0到1之间，超出的部分会重复纹理坐标的边缘，产生一种边缘被拉伸的效果。（Unity中默认模式）</td></tr><tr><td style="text-align: left;">GL_CLAMP_TO_BORDER</td><td style="text-align: left;">超出的坐标为用户指定的边缘颜色。</td></tr></tbody></table><figure><imgsrc="https://learnopengl-cn.github.io/img/01/06/texture_wrapping.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>使用<code>glTexParameterx</code>函数对特定坐标轴设置环绕方式。其中的‘x’代表数据类型，如i（int）、fv（float[]）等。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//参数一指定纹理目标</span><br><span class="hljs-comment">//参数二指定参数选项以及坐标轴。S轴（x轴）T轴（y轴）</span><br><span class="hljs-comment">//参数三指定环绕方式</span><br><span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_MIRRORED_REPEAT);<br></code></pre></td></tr></table></figure><p>选择GL_CLAMP_TO_BORDER时，使用float数组传入颜色数据。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">float</span> borderColor[] = &#123; <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span> &#125;;<br><span class="hljs-built_in">glTexParameterfv</span>(GL_TEXTURE_2D, GL_TEXTURE_BORDER_COLOR, borderColor);<br></code></pre></td></tr></table></figure><h2 id="纹理过滤">纹理过滤</h2><p>纹理坐标可以是任意精度的浮点值，但纹理本身的分辨率却是有限的。因此，OpenGL需要知道，当指定一个纹理坐标时，该如何采样这个点上的像素。最为常见的是<code>GL_NEAREST</code>和<code>GL_LINEAR</code>。前者选择最接近坐标的哪个像素，后者会基于坐标附近的像素，计算出插值。像素中心离坐标越近，它对最终颜色的贡献就越大。</p><p>二者的主要区别在于，前者会显得更“锯齿”，后者会显得更“模糊”。</p><p>当缩放几何体的时候，常常需要对纹理过滤进行设置，通常的做法是在纹理被缩小的时候使用邻近过滤，被放大时使用线性过滤。因为纹理缩小时，纹理像素也会变小，在视觉上，它的“分辨率似乎提高了”。因此，此时采用NEAREST过滤，纹理看起来就不会那么“锯齿化”。纹理放大时，像素看起来会更”明显“，所以使用LINEAR方法让纹理像素不那么明显，过渡更加平滑。</p><p>使用<code>glTexParameterx</code>函数为放大和缩小操作指定过滤方式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);<br><span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);<br></code></pre></td></tr></table></figure><h2 id="多级渐远纹理">多级渐远纹理</h2><p>在我们当前的理解中，无论物体远近，其被映射的纹理的分辨率是不变的。对于非常远的物体，它们只会产生很少的Fragment。而OpenGL需要在如此高分辨率的纹理上拾取区区几个像素，是非常困难，并且效果不好的。为了解决这一问题，OpenGL引入了多级渐远纹理（Mipmap）。</p><figure><img src="https://learnopengl-cn.github.io/img/01/06/mipmaps.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>Mipmap中，每个纹理的大小是前一个纹理的二分之一。当物体与相机的距离超过一定阈值后，OpenGL会采用小一级的纹理进行采样。</p><p>通过<code>glGenerateMipmap</code>函数创建Mipmap。</p><p>与纹理过滤选项类似，OpenGL提供了多种Mipmap匹配选项，用于缓解阈值附近Mipmap切换突兀的问题。</p><table><thead><tr><th style="text-align: left;">过滤方式</th><th style="text-align: left;">描述</th></tr></thead><tbody><tr><td style="text-align: left;">GL_NEAREST_MIPMAP_NEAREST</td><tdstyle="text-align: left;">使用最邻近的多级渐远纹理来匹配像素大小，并使用邻近插值进行纹理采样</td></tr><tr><td style="text-align: left;">GL_LINEAR_MIPMAP_NEAREST</td><tdstyle="text-align: left;">使用最邻近的多级渐远纹理级别，并使用线性插值进行采样</td></tr><tr><td style="text-align: left;">GL_NEAREST_MIPMAP_LINEAR</td><tdstyle="text-align: left;">在两个最匹配像素大小的多级渐远纹理之间进行线性插值，使用邻近插值进行采样</td></tr><tr><td style="text-align: left;">GL_LINEAR_MIPMAP_LINEAR</td><tdstyle="text-align: left;">在两个邻近的多级渐远纹理之间使用线性插值，并使用线性插值进行采样</td></tr></tbody></table><p>使用<code>glTexParameteri</code>设置Mipmap过滤方式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);<br><span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);<br></code></pre></td></tr></table></figure><p>一般只会对MIN_FILTER选项使用Mipmap。对MAG_FILTER使用Mipmap是不正确的。</p><h2 id="加载与创建">加载与创建</h2><p>头文件<code>stb_image.h</code>中的<code>stbi_load</code>函数接收图片路径作为输入，将图片的宽度、高度和颜色通道数输出到三个int变量上。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> width, height, nrChannels;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *data = <span class="hljs-built_in">stbi_load</span>(<span class="hljs-string">&quot;container.jpg&quot;</span>, &amp;width, &amp;height, &amp;nrChannels, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>与<code>glGenBuffers</code>类似，使用<code>glGenTextures(int cnt, unsigned int* addr)</code>生成纹理对象并获取句柄。</p><p>使用<code>glBindTexture(GL_TEXTURE_2D, unsigned int texture)</code>绑定纹理对象句柄与上下文目标。</p><p>使用<code>glTexImage2d</code>将图片信息复制到上下文目标中。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//上下文目标 | Mipmap级别 | 纹理存储格式 | 图片宽度 | 图片高度 | 总是为0 | 原图的格式 | 原图的数据类型 | 图像数据</span><br><span class="hljs-built_in">glTexImage2D</span>(GL_TEXTURE_2D, <span class="hljs-number">0</span>, GL_RGB, width, height, <span class="hljs-number">0</span>, GL_RGB, GL_UNSIGNED_BYTE, data);<br><span class="hljs-built_in">glGenerateMipmap</span>(GL_TEXTURE_2D);<br></code></pre></td></tr></table></figure><p>与<code>glBufferData</code>类似，<code>glTexImage2d</code>的作用就是让当前绑定的纹理对象附加上真正的纹理图像。</p><p><code>glGenerateMipmap(GL_TEXTURE_2D)</code>让OpenGL自动为我们生成、配置Mipmap，无需手动配置。</p><p>完成纹理和Mipmap生成后，应当释放图片内存：<code>stbi_image_free(data);</code></p><p>完整的生成纹理过程如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> texture;<br><span class="hljs-built_in">glGenTextures</span>(<span class="hljs-number">1</span>, &amp;texture);<br><span class="hljs-built_in">glBindTexture</span>(GL_TEXTURE_2D, texture);<br><span class="hljs-comment">// 为当前绑定的纹理对象设置环绕、过滤方式</span><br><span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);   <br><span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);<br><span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);<br><span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);<br><span class="hljs-comment">// 加载并生成纹理</span><br><span class="hljs-type">int</span> width, height, nrChannels;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *data = <span class="hljs-built_in">stbi_load</span>(<span class="hljs-string">&quot;container.jpg&quot;</span>, &amp;width, &amp;height, &amp;nrChannels, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (data)<br>&#123;<br>    <span class="hljs-built_in">glTexImage2D</span>(GL_TEXTURE_2D, <span class="hljs-number">0</span>, GL_RGB, width, height, <span class="hljs-number">0</span>, GL_RGB, GL_UNSIGNED_BYTE, data);<br>    <span class="hljs-built_in">glGenerateMipmap</span>(GL_TEXTURE_2D);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Failed to load texture&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-built_in">stbi_image_free</span>(data);<br></code></pre></td></tr></table></figure><h2 id="纹理单元">纹理单元</h2><p><code>sample2d</code>类型uniform无需使用<code>glUniform</code>赋值。但<code>glUniform</code>可以设置<code>sampler2d</code>的位置值，这样我们就能给着色器设置多个纹理。一个纹理的位置值称为一个纹理单元（TextureUnit），其默认值为0。</p><p>使用<code>glActiveTexture(GL_TEXTUREX)</code>激活X号纹理单元，随后使用<code>glBindTexture</code>为该位置值的纹理单元绑定纹理对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">glActiveTexture</span>(GL_TEXTURE0);<br><span class="hljs-built_in">glBindTexture</span>(GL_TEXTURE_2D, texture1);<br><span class="hljs-built_in">glActiveTexture</span>(GL_TEXTURE1);<br><span class="hljs-built_in">glBindTexture</span>(GL_TEXTURE_2D, texture2);<br></code></pre></td></tr></table></figure><p>使用自定义着色器类的<code>setInt</code>函数设置纹理单元位置值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">ourShader.<span class="hljs-built_in">setInt</span>(<span class="hljs-string">&quot;texture2&quot;</span>, <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>在OpenGL中，纹理坐标的原点在左下角。而多数图像文件格式如PNG、JPEG等原点在左上角。所以直接加载这类图片会导致图片上下颠倒。</p><p>使用<code>stbi_set_flip_vertically_on_load(true)</code>反转图片y轴。</p><h2 id="完整代码">完整代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;glad/glad.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;GLFW/glfw3.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;valarray&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;shader_s.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stb_image.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">float</span> vertices[] = &#123;<br>    <span class="hljs-comment">//     ---- 位置 ----       ---- 颜色 ----     - 纹理坐标 -</span><br>    <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>, <span class="hljs-number">0.0f</span>,   <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>,   <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>,   <span class="hljs-comment">// 右上</span><br>    <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>, <span class="hljs-number">0.0f</span>,   <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>,   <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>,   <span class="hljs-comment">// 右下</span><br>   <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>, <span class="hljs-number">0.0f</span>,   <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>,   <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>,   <span class="hljs-comment">// 左下</span><br>   <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.5f</span>, <span class="hljs-number">0.0f</span>,   <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>,   <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>    <span class="hljs-comment">// 左上</span><br>&#125;;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> indices[] = &#123;<br>    <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>,<br>    <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">frame_buffer_size_callback</span><span class="hljs-params">(GLFWwindow* window, <span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span> </span>&#123;<br>    <span class="hljs-built_in">glViewport</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// glfw初始化</span><br>    <span class="hljs-built_in">glfwInit</span>();<br>    <span class="hljs-built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MAJOR, <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MINOR, <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">glfwWindowHint</span>(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);<br>    GLFWwindow* window = <span class="hljs-built_in">glfwCreateWindow</span>(<span class="hljs-number">800</span>, <span class="hljs-number">600</span>, <span class="hljs-string">&quot;LearnOpenGL&quot;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (window == <span class="hljs-literal">NULL</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Failed to create window&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-built_in">glfwTerminate</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-built_in">glfwMakeContextCurrent</span>(window);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">gladLoadGLLoader</span>((GLADloadproc)glfwGetProcAddress)) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Failed to load proc&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-built_in">glfwTerminate</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-built_in">glViewport</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">800</span>, <span class="hljs-number">600</span>);<br>    <span class="hljs-built_in">glfwSetFramebufferSizeCallback</span>(window, frame_buffer_size_callback);<br>    <span class="hljs-function">Shader <span class="hljs-title">shader</span><span class="hljs-params">(<span class="hljs-string">&quot;C:\\Users\\msik\\CLionProjects\\LearnOpenGL\\Shaders\\vertex.glsl&quot;</span>, <span class="hljs-string">&quot;C:\\Users\\msik\\CLionProjects\\LearnOpenGL\\Shaders\\fragment.glsl&quot;</span>)</span></span>;<br><br>    <span class="hljs-comment">// 加载纹理</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* data[<span class="hljs-number">2</span>];<br>    <span class="hljs-type">int</span> width[<span class="hljs-number">2</span>], height[<span class="hljs-number">2</span>], channels[<span class="hljs-number">2</span>];<br>    <span class="hljs-built_in">stbi_set_flip_vertically_on_load</span>(<span class="hljs-literal">true</span>);<br>    data[<span class="hljs-number">0</span>] = <span class="hljs-built_in">stbi_load</span>(<span class="hljs-string">&quot;C:\\Users\\msik\\CLionProjects\\LearnOpenGL\\container.jpg&quot;</span>, &amp;width[<span class="hljs-number">0</span>], &amp;height[<span class="hljs-number">0</span>], &amp;channels[<span class="hljs-number">0</span>], <span class="hljs-number">0</span>);<br>    data[<span class="hljs-number">1</span>] = <span class="hljs-built_in">stbi_load</span>(<span class="hljs-string">&quot;C:\\Users\\msik\\CLionProjects\\LearnOpenGL\\awesomeface.png&quot;</span>, &amp;width[<span class="hljs-number">1</span>], &amp;height[<span class="hljs-number">1</span>], &amp;channels[<span class="hljs-number">1</span>], <span class="hljs-number">0</span>);<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> textures[<span class="hljs-number">2</span>];<br>    <span class="hljs-built_in">glGenTextures</span>(<span class="hljs-number">2</span>, textures);<br><br>    <span class="hljs-comment">// 纹理1</span><br>    <span class="hljs-built_in">glBindTexture</span>(GL_TEXTURE_2D, textures[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);<br>    <span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);<br>    <span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);<br>    <span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);<br>    <span class="hljs-keyword">if</span> (data[<span class="hljs-number">0</span>]) &#123;<br>        <span class="hljs-built_in">glTexImage2D</span>(GL_TEXTURE_2D, <span class="hljs-number">0</span>, GL_RGB, width[<span class="hljs-number">0</span>], height[<span class="hljs-number">0</span>], <span class="hljs-number">0</span>, GL_RGB, GL_UNSIGNED_BYTE, data[<span class="hljs-number">0</span>]);<br>        <span class="hljs-built_in">glGenerateMipmap</span>(GL_TEXTURE_2D);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Failed to load texture 1&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-comment">// 纹理2</span><br>    <span class="hljs-built_in">glBindTexture</span>(GL_TEXTURE_2D, textures[<span class="hljs-number">1</span>]);<br>    <span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);<br>    <span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);<br>    <span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);<br>    <span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);<br>    <span class="hljs-keyword">if</span> (data[<span class="hljs-number">1</span>]) &#123;<br>        <span class="hljs-built_in">glTexImage2D</span>(GL_TEXTURE_2D, <span class="hljs-number">0</span>, GL_RGBA, width[<span class="hljs-number">1</span>], height[<span class="hljs-number">1</span>], <span class="hljs-number">0</span>, GL_RGBA, GL_UNSIGNED_BYTE, data[<span class="hljs-number">1</span>]);<br>        <span class="hljs-built_in">glGenerateMipmap</span>(GL_TEXTURE_2D);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Failed to load texture 2&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-comment">// 释放图像数据</span><br>    <span class="hljs-built_in">stbi_image_free</span>(data[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">stbi_image_free</span>(data[<span class="hljs-number">1</span>]);<br><br>    <span class="hljs-comment">// VAO</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> VAO;<br>    <span class="hljs-built_in">glGenVertexArrays</span>(<span class="hljs-number">1</span>, &amp;VAO);<br>    <span class="hljs-built_in">glBindVertexArray</span>(VAO);<br><br>    <span class="hljs-comment">// VBO</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> VBO;<br>    <span class="hljs-built_in">glGenBuffers</span>(<span class="hljs-number">1</span>, &amp;VBO);<br>    <span class="hljs-built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);<br>    <span class="hljs-built_in">glBufferData</span>(GL_ARRAY_BUFFER, <span class="hljs-built_in">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);<br><br>    <span class="hljs-comment">// EBO</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> EBO;<br>    <span class="hljs-built_in">glGenBuffers</span>(<span class="hljs-number">1</span>, &amp;EBO);<br>    <span class="hljs-built_in">glBindBuffer</span>(GL_ELEMENT_ARRAY_BUFFER, EBO);<br>    <span class="hljs-built_in">glBufferData</span>(GL_ELEMENT_ARRAY_BUFFER, <span class="hljs-built_in">sizeof</span>(indices), indices, GL_STATIC_DRAW);<br><br>    <span class="hljs-comment">// 顶点属性PTR</span><br>    <span class="hljs-built_in">glVertexAttribPointer</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, GL_FLOAT, GL_FALSE, <span class="hljs-number">8</span> * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">float</span>), (<span class="hljs-type">void</span>*)<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">glEnableVertexAttribArray</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">glVertexAttribPointer</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, GL_FLOAT, GL_FALSE, <span class="hljs-number">8</span> * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">float</span>), (<span class="hljs-type">void</span>*)(<span class="hljs-number">3</span> * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">float</span>)));<br>    <span class="hljs-built_in">glEnableVertexAttribArray</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">glVertexAttribPointer</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, GL_FLOAT, GL_FALSE, <span class="hljs-number">8</span> * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">float</span>), (<span class="hljs-type">void</span>*)(<span class="hljs-number">6</span> * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">float</span>)));<br>    <span class="hljs-built_in">glEnableVertexAttribArray</span>(<span class="hljs-number">2</span>);<br><br>    shader.<span class="hljs-built_in">use</span>();<br>    shader.<span class="hljs-built_in">setInt</span>(<span class="hljs-string">&quot;texture1&quot;</span>, <span class="hljs-number">0</span>);<br>    shader.<span class="hljs-built_in">setInt</span>(<span class="hljs-string">&quot;texture2&quot;</span>, <span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">glfwWindowShouldClose</span>(window)) &#123;<br>        <span class="hljs-built_in">glClearColor</span>(<span class="hljs-number">0.2f</span>, <span class="hljs-number">0.3f</span>, <span class="hljs-number">0.4f</span>, <span class="hljs-number">1.0f</span>);<br>        <span class="hljs-built_in">glClear</span>(GL_COLOR_BUFFER_BIT);<br><br>        <span class="hljs-comment">// 绑定纹理</span><br>        <span class="hljs-built_in">glActiveTexture</span>(GL_TEXTURE0);<br>        <span class="hljs-built_in">glBindTexture</span>(GL_TEXTURE_2D, textures[<span class="hljs-number">0</span>]);<br>        <span class="hljs-built_in">glActiveTexture</span>(GL_TEXTURE1);<br>        <span class="hljs-built_in">glBindTexture</span>(GL_TEXTURE_2D, textures[<span class="hljs-number">1</span>]);<br><br>        shader.<span class="hljs-built_in">use</span>();<br>        <span class="hljs-built_in">glBindVertexArray</span>(VAO);<br>        <span class="hljs-built_in">glDrawElements</span>(GL_TRIANGLES, <span class="hljs-number">6</span>, GL_UNSIGNED_INT, <span class="hljs-number">0</span>);<br><br>        <span class="hljs-built_in">glfwSwapBuffers</span>(window);<br>        <span class="hljs-built_in">glfwPollEvents</span>();<br>    &#125;<br><br>    <span class="hljs-built_in">glfwTerminate</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-meta">#version 330 core</span><br><span class="hljs-keyword">in</span> <span class="hljs-type">vec3</span> col;<br><span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> uv;<br><span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragcolor;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">sampler2D</span> texture1;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">sampler2D</span> texture2;<br><br><span class="hljs-type">void</span> main()&#123;<br>    fragcolor = <span class="hljs-built_in">mix</span>(<span class="hljs-built_in">texture</span>(texture1,uv),<span class="hljs-built_in">texture</span>(texture2,uv),<span class="hljs-number">0.2</span>f);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-meta">#version 330 core</span><br><span class="hljs-keyword">layout</span> (<span class="hljs-keyword">location</span> = <span class="hljs-number">0</span>) <span class="hljs-keyword">in</span> <span class="hljs-type">vec3</span> aPos;<br><span class="hljs-keyword">layout</span> (<span class="hljs-keyword">location</span> = <span class="hljs-number">1</span>) <span class="hljs-keyword">in</span> <span class="hljs-type">vec3</span> aCol;<br><span class="hljs-keyword">layout</span> (<span class="hljs-keyword">location</span> = <span class="hljs-number">2</span>) <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> aTex;<br><br><span class="hljs-keyword">out</span> <span class="hljs-type">vec3</span> col;<br><span class="hljs-keyword">out</span> <span class="hljs-type">vec2</span> uv;<br><br><span class="hljs-type">void</span> main()&#123;<br>    <span class="hljs-built_in">gl_Position</span> = <span class="hljs-type">vec4</span>(aPos,<span class="hljs-number">1.0</span>);<br>    col = aCol;<br>    uv = aTex;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>图形学</tag>
      
      <tag>OpenGL</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LearnOpenGL学习笔记（一） - 环境配置与对象绘制</title>
    <link href="/2024/07/10/LearnOpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%20-%20%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%AF%B9%E8%B1%A1%E7%BB%98%E5%88%B6/"/>
    <url>/2024/07/10/LearnOpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%20-%20%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%AF%B9%E8%B1%A1%E7%BB%98%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p>为终身之路踏上第一步。 <span id="more"></span></p><h1 id="入门">入门</h1><p>OpenGL可以被看作是一个大的状态机。API中的一些函数会根据当前OpenGL的状态的不同，而产生不同的效果，这些函数被称为状态函数。</p><blockquote><p>OpenGL的工作流：</p><p>创建对象-&gt;绑定对象到上下文（BindGen出来的Object到OpenGL上下文的内置属性）-&gt;设置已绑定对象的选项-&gt;解绑对象</p><p>PS：解绑对象只是让对象和上下文之间断开联系。实际上选项已经改变，与解绑无关。当要获取之前那个对象的信息时，只需要重新绑定那个上下文变量就行了。比如说我们有一些作为3D模型数据（一栋房子或一个人物）的容器对象，在我们想绘制其中任何一个模型的时候，只需绑定一个包含对应模型数据的对象就可以了。拥有数个这样的对象允许我们指定多个模型，在想画其中任何一个的时候，直接将对应的对象绑定上去，便不需要再重复设置选项了。</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-comment">// 创建对象</span><br>unsigned <span class="hljs-type">int</span> objectId = <span class="hljs-number">0</span>;<br>glGenObject(<span class="hljs-number">1</span>, &amp;objectId);<br><span class="hljs-comment">// 绑定对象至上下文</span><br>glBindObject(GL_WINDOW_TARGET, objectId);<br><span class="hljs-comment">// 设置当前绑定到 GL_WINDOW_TARGET 的对象的一些选项</span><br>glSetObjectOption(GL_WINDOW_TARGET, GL_OPTION_WINDOW_WIDTH, <span class="hljs-number">800</span>);<br>glSetObjectOption(GL_WINDOW_TARGET, GL_OPTION_WINDOW_HEIGHT, <span class="hljs-number">600</span>);<br><span class="hljs-comment">// 将上下文对象设回默认</span><br>glBindObject(GL_WINDOW_TARGET, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure></blockquote><h2 id="环境配置">环境配置</h2><h3 id="glfw">GLFW</h3><p>下载源代码，使用Clion打开源代码根目录作为项目。</p><p>点击构建-构建项目，完成后在cmake-build-output/src文件夹下找到glfw3.dll文件。</p><p>新建空项目，新建libs和include文件夹，将GLFW源代码中include文件夹的内容拖入新include文件夹，将编译完成的glfw3.dll拖入libs文件夹。<strong>同时，也要把glfw3.dll拖入cmake-build-output文件夹下</strong></p><p>修改CMakeList.txt内容如下:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.28</span>)<br><span class="hljs-keyword">project</span>(LearnOpenGL) <span class="hljs-comment"># 定义项目名</span><br><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">17</span>)<br><br><span class="hljs-keyword">add_executable</span>(LearnOpenGL main.cpp) <span class="hljs-comment"># 这步必须放在链接操作之前</span><br><br><span class="hljs-keyword">INCLUDE_DIRECTORIES</span>(<span class="hljs-keyword">include</span>) <span class="hljs-comment"># include文件所在路径</span><br><span class="hljs-keyword">link_directories</span>(libs) <span class="hljs-comment"># libs文件所在路径</span><br><span class="hljs-keyword">target_link_libraries</span>(LearnOpenGL libs/glfw3.dll) <span class="hljs-comment"># dll文件所在路径</span><br></code></pre></td></tr></table></figure><p>重新加载CMake即可。可新建cpp文件，输入<code>#include &lt;GLFW\glfw3.h&gt;</code>，若未报错则链接成功。</p><h3 id="glad">GLAD</h3><p>打开http://glad.dav1d.de/，按照以下规则配置：</p><p>Language：C/C++</p><p>Specification：OpenGL</p><p>API-gl：3.3 and newer</p><p>Opentions - Generate a loader：打勾</p><p>点击Generate按钮，下载glad.zip，解压，将include内的文件拖动到工程的include文件里，glad.c则放到工程根目录。使用<code>#include &lt;glad\glad.h&gt;</code>验证是否配置成功。</p><h2 id="范例工程">范例工程</h2><h3 id="头文件">头文件</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;glad/glad.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;GLFW/glfw3.h&gt;</span></span><br></code></pre></td></tr></table></figure><p>注意：<strong>glad头文件必须在GLFW之前include</strong></p><h3 id="代码">代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;glad/glad.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;GLFW/glfw3.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//处理键盘输入，当用户按下ESC键时，提醒程序要退出</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">processInput</span><span class="hljs-params">(GLFWwindow *window)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//glfwGetKey函数用于检查一个键是否正在被按下</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">glfwGetKey</span>(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)<br>        <span class="hljs-built_in">glfwSetWindowShouldClose</span>(window, <span class="hljs-literal">true</span>);<br>&#125;<br><br><span class="hljs-comment">//回调函数，使视口范围随窗口大小变化。</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">framebuffer_size_callback</span><span class="hljs-params">(GLFWwindow* window, <span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">glViewport</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">// -----------glfw初始化与窗口创建-----------</span><br>    <span class="hljs-comment">// 初始化glfw组件</span><br>    <span class="hljs-built_in">glfwInit</span>();<br>    <span class="hljs-comment">//指定opengl版本为3.3</span><br>    <span class="hljs-built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MAJOR, <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MINOR, <span class="hljs-number">3</span>);<br>    <span class="hljs-comment">//告诉glfw我们使用的是核心模式</span><br>    <span class="hljs-comment">//核心模式意味着我们只能使用OpenGL功能的核心功能子集</span><br>    <span class="hljs-built_in">glfwWindowHint</span>(GLFW_OPENGL_PROFILE,GLFW_OPENGL_CORE_PROFILE);<br>    <span class="hljs-comment">//创建glfw窗口</span><br>    <span class="hljs-comment">//第一个参数是窗口的宽度，第二个是高度，第三个是窗口的标题，第四个参数指定窗口是否共享资源，第五个参数是共享资源的窗口</span><br>    <span class="hljs-comment">//共享资源指的是多个窗口可以共享同一个上下文</span><br>    GLFWwindow* window = <span class="hljs-built_in">glfwCreateWindow</span>(<span class="hljs-number">800</span>, <span class="hljs-number">600</span>, <span class="hljs-string">&quot;LearnOpenGL&quot;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-comment">//检查窗口是否创建成功</span><br>    <span class="hljs-keyword">if</span> (window == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Failed to create GLFW window&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-comment">//销毁glfw</span><br>        <span class="hljs-built_in">glfwTerminate</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">//通知glfw将我们窗口的上下文设置为当前线程的主上下文</span><br>    <span class="hljs-built_in">glfwMakeContextCurrent</span>(window);<br>    <span class="hljs-comment">// -----------GLAD加载所有OpenGL函数指针-----------</span><br>    <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">gladLoadGLLoader</span>((GLADloadproc)glfwGetProcAddress))&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Failed to initialize GLAD&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">//先前只是生成了窗口的大小，但窗口大小与实际渲染区域无关。因此，我们需要定义渲染区域的大小，即视口(Viewport)。</span><br>    <span class="hljs-comment">//视口定义了窗口中可以渲染的区域，将其设置为窗口的维度</span><br>    <span class="hljs-comment">//前两个参数代表渲染区域左下角在GLFW窗口的坐标。第三个和第四个参数是渲染区域的宽度和高度（像素）</span><br>    <span class="hljs-comment">//注意，这里并没有传入window，所以glViewport是个状态使用函数。</span><br>    <span class="hljs-built_in">glViewport</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">800</span>, <span class="hljs-number">600</span>);<br>    <span class="hljs-comment">//为了让窗口被改变时，视口也能相应改变，我们需要注册一个窗口大小的回调函数</span><br>    <span class="hljs-comment">//glfwSetFramebufferSizeCallback函数接受一个窗口，一个函数指针，当窗口大小改变时调用这个函数</span><br>    <span class="hljs-built_in">glfwSetFramebufferSizeCallback</span>(window,framebuffer_size_callback);<br>    <span class="hljs-comment">// -----------渲染循环-----------</span><br>    <span class="hljs-comment">//当窗口被要求关闭时，glfwWindowShouldClose函数返回true</span><br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">glfwWindowShouldClose</span>(window))&#123;<br>        <span class="hljs-comment">// 清除颜色缓冲</span><br>        <span class="hljs-comment">// glClearColor用来设置清空屏幕所用的颜色</span><br>        <span class="hljs-built_in">glClearColor</span>(<span class="hljs-number">0.2f</span>, <span class="hljs-number">0.3f</span>, <span class="hljs-number">0.3f</span>, <span class="hljs-number">1.0f</span>);<br>        <span class="hljs-comment">// 清除颜色缓冲。除此之外还有GL_DEPTH_BUFFER_BIT，GL_STENCIL_BUFFER_BIT，分别用于清除深度缓冲、模板缓冲</span><br>        <span class="hljs-comment">// glClearColor是状态设置函数，而glClear是状态使用函数</span><br>        <span class="hljs-built_in">glClear</span>(GL_COLOR_BUFFER_BIT);<br>        <span class="hljs-comment">// 调用输入函数，处理键盘输入</span><br>        <span class="hljs-built_in">processInput</span>(window);<br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">// 这里放渲染指令...</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">// 交换缓冲区(双缓冲区的实现, 用于避免图像闪烁)</span><br>        <span class="hljs-built_in">glfwSwapBuffers</span>(window);<br>        <span class="hljs-comment">// 处理事件，比如键盘和鼠标事件，随后更新窗口状态并调用回调函数</span><br>        <span class="hljs-built_in">glfwPollEvents</span>();<br>    &#125;<br>    <span class="hljs-comment">// -----------清理资源-----------</span><br>    <span class="hljs-built_in">glfwDestroyWindow</span>(window);<br>    <span class="hljs-built_in">glfwTerminate</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>通常的OpenGL范例程序：</p><p>初始化GLFW-&gt;设置GLFW信息，如OpenGL版本号-&gt;生成窗口-&gt;设置线程上下文-&gt;使用GLAD获取GL函数-&gt;定义渲染视口大小-&gt;注册各类回调函数-&gt;进入渲染循环-&gt;销毁资源</p><p>渲染循环内部：</p><p>清空缓存-&gt;处理输入-&gt;进行渲染操作（在后缓冲上绘制）-&gt;检查并调用事件，交换缓冲（使后缓冲的内容显示到画面上）</p></blockquote><blockquote><p>GLFW函数可分为两类：状态设置函数和状态使用函数。前者用于设置状态量，后者用于借助已经设置完毕的状态来改变程序行为。</p></blockquote><h2 id="对象绘制">对象绘制</h2><h3 id="基础">基础</h3><blockquote><p>顶点数组对象：Vertex Array Object，VAO</p><p>顶点缓冲对象：Vertex Buffer Object，VBO</p><p>元素缓冲对象：Element Buffer Object，EBO 或 索引缓冲对象 Index BufferObject，IBO</p></blockquote><p>图形渲染管线可以被分为两个部分：</p><ul><li>第一部分负责将3D坐标转换为2D坐标</li><li>第二部分负责将2D坐标转换为有颜色的，实际屏幕上的像素。</li></ul><blockquote><p>2D坐标与像素不同。像素是2D坐标的近似值，受分辨率影响。</p></blockquote><p>着色器是运行在GPU上的处理程序。每个小核心负责一个着色器的计算。</p><p>Vertex Shader、Geometry Shader和FragmentShader可以由开发者自定义。</p><figure><img src="https://learnopengl-cn.github.io/img/01/04/pipeline.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>VertexShader把单独的顶点作为输入，将局部坐标系下的顶点坐标转换到标准化设备坐标（NDC），同时对顶点属性（VertexAttribute）进行基本处理。</p><blockquote><p>经Vertex Shader处理过的坐标必定是NDC，范围为[-1, 1]</p></blockquote><p>GeometryShader把一个图元（包括点、线、三角形三种类型）的顶点作为输入，根据需要处理这些顶点，也可以生成新的顶点，用于构建新的形状。</p><blockquote><p>这个过程可选。</p></blockquote><p>ShapeAssembly将前阶段的所有顶点作为输入，并将其装配为指定图元的形状。</p><p>Rasterization把图元映射为屏幕上的像素，生成Fragment,并剔除View以外的所有像素。</p><blockquote><p>glViewport函数定义了视口信息。视口变换（ViewportTransform）将NDC变换为屏幕空间坐标。</p><p>屏幕空间坐标被变换为Fragment，输入到Fragment Shader中。</p></blockquote><p>FragmentShader用于计算一个像素的最终颜色。该阶段包含3D场景的数据，如光照、阴影等。</p><p>Test andBlending阶段，首先检测所有像素的深度值、模板值，用于判断像素是正面还是背面，并据此决定是否丢弃。随后，根据像素的alpha值，进行blend操作。</p><h3 id="顶点输入">顶点输入</h3><p>顶点数据首先被送到顶点着色器。这些数据以顶点缓冲对象（Vertex BufferObjects, VBO）的状态存储在GPU内存（即显存）中。</p><blockquote><p>使用VBO的优点在于，可以一次发送一大批数据到GPU上，而非一个顶点传送一次。</p><p>CPU到GPU的传输速度较慢，所以要尽量减少传输次数，一次发送尽可能多的数据。</p></blockquote><p>通过<strong>glGenBuffers(int count, unsigned int*VBO)</strong>函数生成VBO对象。生成完毕后，变量VBO将存储VBO实例的id。随后，进行绑定操作。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> VBO;<br><span class="hljs-built_in">glGenBuffers</span>(<span class="hljs-number">1</span>, &amp;VBO); <span class="hljs-comment">//生成一个VBO对象，带有缓冲区id</span><br><span class="hljs-built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);  <span class="hljs-comment">//将该对象绑定到GL上下文的GL_ARRAY_BUFFER目标</span><br></code></pre></td></tr></table></figure><blockquote><p>任何对象在生成以后都需要与GL上下文中的特定目标进行绑定，才能生效。</p><p>每个缓冲区目标都只能同时绑定一个对象。</p><p>GL_ARRAY_BUFFER存储的对象通常是：需要在CPU和GPU之间传输的顶点相关数据。</p></blockquote><p><strong>glBufferData(CONTEXT_TARGET, int data_len, float[] data,DRAW_FORM)</strong>用于向当前绑定的缓冲区存入用户定义数据。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">float</span> verticals[] = &#123;<br>    <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>, <span class="hljs-number">0.0f</span>,<br>     <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>, <span class="hljs-number">0.0f</span>,<br>     <span class="hljs-number">0.0f</span>,  <span class="hljs-number">0.5f</span>, <span class="hljs-number">0.0f</span><br>&#125;;<br><span class="hljs-built_in">glBufferData</span>(GL_ARRAY_BUFFER, <span class="hljs-built_in">sizeof</span>(verticals),verticals, GL_STATIC_DRAW);<br></code></pre></td></tr></table></figure><blockquote><p>DRAW_FORM参数用于指定显卡如何管理存入的数据。</p><ul><li>GL_STATIC_DRAW：存入的数据几乎不会发生变化</li><li>GL_DYNAMIC_DRAW：存入的数据时常会有发生变化</li><li>GL_STREAM_DRAW：存入的数据每时每刻都在变化</li></ul></blockquote><p>至此，顶点已完成了输入，此刻的顶点数据以VBO的形式存储在显存中。</p><h3 id="顶点着色器">顶点着色器</h3><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-meta">#version 330 core //定义版本号和PROFILE模式</span><br><span class="hljs-comment">//定义一个名为aPos的输入变量，其位置索引为0，类型为vec3。</span><br><span class="hljs-keyword">layout</span> (<span class="hljs-keyword">location</span> = <span class="hljs-number">0</span>) <span class="hljs-keyword">in</span> <span class="hljs-type">vec3</span> aPos;<br><span class="hljs-type">void</span> main()<br>&#123;<br>    <span class="hljs-comment">//将输入的顶点位置转换为4维向量（齐次坐标），并赋值给内建变量gl_Position，该变量表示顶点着色器的输出位置。</span><br>    <span class="hljs-built_in">gl_Position</span> = <span class="hljs-type">vec4</span>(aPos, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>location变量用于绑定顶点属性的特定位置索引。一般而言，顶点属性都是用float类型存储的。而存放顶点数据的vertical数组又是一维而非二维的。因此，可能出现前N个数据里，数据[0,N-M]是位置数据，而[N-M+1,N]是颜色数据。通过设置不同的location变量，可以解明顶点数据的具体含义。</p><p>gl_Position的值将会成为顶点着色器的输出。</p><p>在实际的顶点着色器中，往往还需要经过坐标变换到NDC的过程。</p></blockquote><p>C++源码文件无法直接嵌入GLSL代码。所以需要在运行时动态编译。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//顶点着色器源码</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *vertexShaderSource = <span class="hljs-string">&quot;#version 330 core\n&quot;</span><br>    <span class="hljs-string">&quot;layout (location = 0) in vec3 aPos;\n&quot;</span><br>    <span class="hljs-string">&quot;void main()\n&quot;</span><br>    <span class="hljs-string">&quot;&#123;\n&quot;</span><br>    <span class="hljs-string">&quot;   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\n&quot;</span><br>    <span class="hljs-string">&quot;&#125;\0&quot;</span>;<br><span class="hljs-comment">//用于保存着色器对象ID引用的无符号整数</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> vertexShader;<br><span class="hljs-comment">//使用glCreateShader函数创建指定类型的着色器对象</span><br><span class="hljs-comment">//由于同种类型的着色器只能生成一个，所以可以直接赋值而非传入地址</span><br>vertexShader = <span class="hljs-built_in">glCreateShader</span>(GL_VERTEX_SHADER);<br><span class="hljs-comment">//对于glShaderSource，其参数含义分别为：着色器对象、源码字符串数量、源码字符串首地址、包含每个字符串长度的整数数组。该函数是把“源码字符串”绑定到“着色器对象”的操作。</span><br><span class="hljs-built_in">glShaderSource</span>(vertexShader, <span class="hljs-number">1</span>, &amp;vertexShaderSource, <span class="hljs-literal">NULL</span>);<br><span class="hljs-comment">//进行编译</span><br><span class="hljs-built_in">glCompileShader</span>(vertexShader);<br></code></pre></td></tr></table></figure><p>通过<code>glGetShaderiv</code>函数可以检测编译是否成功。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span>  success; <span class="hljs-comment">//是否成功编译的flag</span><br><span class="hljs-type">char</span> infoLog[<span class="hljs-number">512</span>]; <span class="hljs-comment">//错误信息字符数组</span><br><span class="hljs-comment">//glGetShaderiv用于获取着色器信息</span><br><span class="hljs-comment">//第二个参数可替换为以下选项：</span><br><span class="hljs-comment">//GL_SHADER_TYPE：获取着色器类型</span><br><span class="hljs-comment">//..待补充</span><br><span class="hljs-built_in">glGetShaderiv</span>(vertexShader, GL_COMPILE_STATUS, &amp;success); <span class="hljs-comment">//获取编译结果</span><br><span class="hljs-keyword">if</span>(!success)<br>&#123; <span class="hljs-comment">//若未编译成功</span><br>    <span class="hljs-built_in">glGetShaderInfoLog</span>(vertexShader, <span class="hljs-number">512</span>, <span class="hljs-literal">NULL</span>, infoLog); <span class="hljs-comment">//获取编译错误信息,512代表infoLog数组大小</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;ERROR::SHADER::VERTEX::COMPILATION_FAILED\n&quot;</span> &lt;&lt; infoLog &lt;&lt; std::endl; <span class="hljs-comment">//打印</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="片元着色器">片元着色器</h3><p>片元着色器用于计算像素最后的颜色输出。</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-meta">#version 330 core</span><br><span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> FragColor; <span class="hljs-comment">// 片元着色器允许用户自定义输出变量</span><br><span class="hljs-type">void</span> main()<br>&#123;<br>    FragColor = <span class="hljs-type">vec4</span>(<span class="hljs-number">1.0</span>f, <span class="hljs-number">0.5</span>f, <span class="hljs-number">0.2</span>f, <span class="hljs-number">1.0</span>f); <span class="hljs-comment">//橘黄色</span><br>&#125; <br></code></pre></td></tr></table></figure><p>随后进行编译。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">char</span>* fragmentShaderSource = <span class="hljs-string">&quot;#version 330 core\n&quot;</span><br>    <span class="hljs-string">&quot;out vec4 FragColor;\n&quot;</span><br>    <span class="hljs-string">&quot;void main()\n&quot;</span><br>    <span class="hljs-string">&quot;&#123;\n&quot;</span><br>    <span class="hljs-string">&quot;FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);\n&quot;</span><br>    <span class="hljs-string">&quot;&#125;\n&quot;</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> fragmentShader;<br>fragmentShader = <span class="hljs-built_in">glCreateShader</span>(GL_FRAGMENT_SHADER);<br><span class="hljs-built_in">glShaderSource</span>(fragmentShader, <span class="hljs-number">1</span>, &amp;fragmentShaderSource, <span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">glCompileShader</span>(fragmentShader);<br></code></pre></td></tr></table></figure><h3 id="着色器程序">着色器程序</h3><p>完成着色器编译后，还需要编写着色器程序。整个渲染管线就像一个链表，着色器是其中的一个个节点，而着色器程序负责把这些节点连接（Link）起来，并负责数据的输入输出。</p><p>当链接着色器至一个程序的时候，它会把每个着色器的输出链接到下个着色器的输入。当输出和输入不匹配的时候，你会得到一个连接错误。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> shaderProgram; <span class="hljs-comment">//句柄</span><br>shaderProgram = <span class="hljs-built_in">glCreateProgram</span>();<br><span class="hljs-comment">//注意Attach操作的顺序</span><br><span class="hljs-built_in">glAttachShader</span>(shaderProgram, vertexShader);<br><span class="hljs-built_in">glAttachShader</span>(shaderProgram, fragmentShader);<br><span class="hljs-comment">//完成Attach以后，进行Link操作。</span><br><span class="hljs-built_in">glLinkProgram</span>(shaderProgram);<br></code></pre></td></tr></table></figure><p>借助<code>glGetProgramiv</code>函数，可以判断链接是否出错。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">glGetProgramiv</span>(shaderProgram, GL_LINK_STATUS, &amp;success);<br><span class="hljs-keyword">if</span>(!success) &#123;<br>    <span class="hljs-built_in">glGetProgramInfoLog</span>(shaderProgram, <span class="hljs-number">512</span>, <span class="hljs-literal">NULL</span>, infoLog);<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>链接完毕后，使用<code>glUseProgram</code>函数激活着色器程序对象，同时，删除先前定义的着色器，以释放内存。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">glUseProgram</span>(shaderProgram);<br><span class="hljs-built_in">glDeleteShader</span>(vertexShader);<br><span class="hljs-built_in">glDeleteShader</span>(fragmentShader);<br></code></pre></td></tr></table></figure><p>完成这一系列操作以后，我们完成了以下内容：</p><ul><li>发送顶点数据，让其以VBO的状态存储在显存。</li><li>编写了Vertex Shader和FragmentShader，并指示GPU该如何使用这些着色器处理顶点数据。</li></ul><h3 id="链接顶点属性">链接顶点属性</h3><p>我们输入的verticals数组是一个一维float数组。在这个数组里，每3个元素代表着一个顶点的位置数据。但OpenGL不知道，所以我们要告诉OpenGL，数组的哪些位置代表着哪个顶点的什么属性。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//指定解析顶点数据的方式</span><br><span class="hljs-comment">//第一个参数指定我们要配置的顶点属性，即着色器中的location。位置信息是一个location，颜色信息就是另一个location</span><br><span class="hljs-comment">//第二个参数指定顶点数据的大小，也就是每个属性的维度数。位置数据是一个三维向量，所以输入3</span><br><span class="hljs-comment">//第三个参数指定数据的类型</span><br><span class="hljs-comment">//第四个参数指定是否归一化，映射到0-1(或-1到1，对于有符号数来说。)</span><br><span class="hljs-comment">//第五个参数指定步长，即：这个属性第二次出现的地方到整个数组0位置之间有多少字节。对于单一属性数组，可设置为0</span><br><span class="hljs-comment">//第六个参数表示数据在缓冲区相对于起始位置的偏移量。如：位置信息包含3字节，紧随其后的是颜色信息。那么对于位置信息，这个参数就是(void*)0，对于颜色信息就是(void*)3</span><br><span class="hljs-built_in">glVertexAttribPointer</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, GL_FLOAT, GL_FALSE, <span class="hljs-number">3</span> * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">float</span>), (<span class="hljs-type">void</span>*)<span class="hljs-number">0</span>);<br><span class="hljs-comment">//设置完成后，启用顶点属性</span><br><span class="hljs-built_in">glEnableVertexAttribArray</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//随后启用着色器程序</span><br><span class="hljs-built_in">glUseProgram</span>(shaderProgram);<br></code></pre></td></tr></table></figure><h3 id="顶点数组对象">顶点数组对象</h3><p>所以，每次绘制一个物体，我们都必须经历以下步骤：</p><ul><li>生成VBO对象</li><li>绑定VBO对象到GL_ARRAY_BUFFER</li><li>将顶点数据（float数组）传入GL_ARRAY_BUFFER</li><li>设置顶点属性指针</li><li>启用顶点属性</li><li>使用着色器程序</li><li>绘制物体</li></ul><p>非常繁琐。为了减少工作量，我们引入顶点数组对象（Vertex ArrayObject，VAO）的概念。</p><p>一个顶点数组对象会储存以下这些内容：</p><ul><li>glEnableVertexAttribArray和glDisableVertexAttribArray的调用。</li><li>通过glVertexAttribPointer设置的顶点属性配置。</li><li>通过glVertexAttribPointer调用与顶点属性关联的顶点缓冲对象。</li></ul><p>一般，完整的渲染代码可以表示为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// ..:: 初始化代码（只运行一次 (除非你的物体频繁改变)） :: ..</span><br><span class="hljs-comment">// 生成VAO、VBO对象....</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> VAO;<br><span class="hljs-built_in">glGenVertexArrays</span>(<span class="hljs-number">1</span>, &amp;VAO);<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> VBO;<br><span class="hljs-built_in">glGenVertexArrays</span>(<span class="hljs-number">1</span>, &amp;VBO);<br><span class="hljs-comment">// 1. 绑定VAO</span><br><span class="hljs-built_in">glBindVertexArray</span>(VAO);<br><span class="hljs-comment">// 2. 把顶点数组复制到缓冲中供OpenGL使用</span><br><span class="hljs-built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);<br><span class="hljs-built_in">glBufferData</span>(GL_ARRAY_BUFFER, <span class="hljs-built_in">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);<br><span class="hljs-comment">// 3. 设置顶点属性指针</span><br><span class="hljs-built_in">glVertexAttribPointer</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, GL_FLOAT, GL_FALSE, <span class="hljs-number">3</span> * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">float</span>), (<span class="hljs-type">void</span>*)<span class="hljs-number">0</span>);<br><span class="hljs-built_in">glEnableVertexAttribArray</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">// ..:: 绘制代码（渲染循环中） :: ..</span><br><span class="hljs-comment">// 4. 绘制物体</span><br><span class="hljs-built_in">glUseProgram</span>(shaderProgram);<br><span class="hljs-built_in">glBindVertexArray</span>(VAO);<br><span class="hljs-built_in">someOpenGLFunctionThatDrawsOurTriangle</span>();<br></code></pre></td></tr></table></figure><h3 id="绘制">绘制</h3><p><code>glDrawArray</code>函数使用当前激活的着色器和VAO（包含VBO信息）来绘制图元（点、线、三角）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">glUseProgram</span>(shaderProgram);<br><span class="hljs-built_in">glBindVertexArray</span>(VAO);<br><span class="hljs-comment">// 第一个参数表示图元类型</span><br><span class="hljs-comment">// 第二个参数表示顶点数组起始索引</span><br><span class="hljs-comment">// 第三个表示绘制的顶点数量</span><br><span class="hljs-built_in">glDrawArrays</span>(GL_TRIANGLES, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><h3 id="完整代码">完整代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;glad/glad.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;GLFW/glfw3.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//顶点数据</span><br><span class="hljs-type">float</span> verticals[] = &#123;<br>        <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>, <span class="hljs-number">0.0f</span>,<br>        <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>, <span class="hljs-number">0.0f</span>,<br>        <span class="hljs-number">0.0f</span>,  <span class="hljs-number">0.5f</span>, <span class="hljs-number">0.0f</span><br>&#125;;<br><br><span class="hljs-comment">//顶点着色器源码</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* vertex_shader=<span class="hljs-string">&quot;#version 330 core\n&quot;</span><br>                          <span class="hljs-string">&quot;layout(location=0) in vec3 aPos;\n&quot;</span><br>                          <span class="hljs-string">&quot;void main()\n&quot;</span><br>                          <span class="hljs-string">&quot;&#123;\n&quot;</span><br>                          <span class="hljs-string">&quot;gl_Position = vec4(aPos,1.0);&quot;</span><br>                          <span class="hljs-string">&quot;&#125;\n&quot;</span>;<br><br><span class="hljs-comment">//片段着色器源码</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* fragment_shader=<span class="hljs-string">&quot;#version 330 core\n&quot;</span><br>                            <span class="hljs-string">&quot;out vec4 Fragcolor;\n&quot;</span><br>                            <span class="hljs-string">&quot;void main()\n&quot;</span><br>                            <span class="hljs-string">&quot;&#123;\n&quot;</span><br>                            <span class="hljs-string">&quot;Fragcolor = vec4(1.0f, 0.5f, 0.2f, 1.0f);&quot;</span><br>                            <span class="hljs-string">&quot;&#125;\n&quot;</span>;<br><br><span class="hljs-comment">//输入处理函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">process_input</span><span class="hljs-params">(GLFWwindow* window, <span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span></span>&#123;<br>    <span class="hljs-built_in">glViewport</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,width,height);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//初始化glfw并配置版本和PROFILE模式</span><br>    <span class="hljs-built_in">glfwInit</span>();<br>    <span class="hljs-built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MAJOR,<span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MINOR,<span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">glfwWindowHint</span>(GLFW_OPENGL_PROFILE,GLFW_OPENGL_CORE_PROFILE);<br>    <span class="hljs-comment">//创建glfw窗口</span><br>    GLFWwindow* window = <span class="hljs-built_in">glfwCreateWindow</span>(<span class="hljs-number">800</span>,<span class="hljs-number">600</span>,<span class="hljs-string">&quot;LearnOpenGL&quot;</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-comment">//创建错误处理</span><br>    <span class="hljs-keyword">if</span>(window==<span class="hljs-literal">NULL</span>)&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Failed to create GLFW Window!&quot;</span>&lt;&lt;endl;<br>        <span class="hljs-built_in">glfwTerminate</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">//将窗口上下文设置为当前线程上下文</span><br>    <span class="hljs-built_in">glfwMakeContextCurrent</span>(window);<br>    <span class="hljs-comment">//加载glad函数</span><br>    <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">gladLoadGLLoader</span>((GLADloadproc)glfwGetProcAddress))&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Failed to load proc&quot;</span>&lt;&lt;endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">//定义视口大小</span><br>    <span class="hljs-built_in">glViewport</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">800</span>,<span class="hljs-number">600</span>);<br>    <span class="hljs-comment">//配置窗口大小改变的回调函数，使得窗口改变时视口随之改变</span><br>    <span class="hljs-built_in">glfwSetFramebufferSizeCallback</span>(window,process_input);<br>    <span class="hljs-comment">//创建、绑定VBO对象</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> VBO;<br>    <span class="hljs-built_in">glGenBuffers</span>(<span class="hljs-number">1</span>,&amp;VBO);<br>    <span class="hljs-built_in">glBindBuffer</span>(GL_ARRAY_BUFFER,VBO);<br>    <span class="hljs-built_in">glBufferData</span>(GL_ARRAY_BUFFER,<span class="hljs-built_in">sizeof</span>(verticals),verticals,GL_STATIC_DRAW);<br>    <span class="hljs-comment">//创建、绑定VAO对象</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> VAO;<br>    <span class="hljs-built_in">glGenVertexArrays</span>(<span class="hljs-number">1</span>,&amp;VAO);<br>    <span class="hljs-built_in">glBindVertexArray</span>(VAO);<br>    <span class="hljs-comment">//配置顶点属性指针，说明顶点数据与属性的对应关系</span><br>    <span class="hljs-built_in">glVertexAttribPointer</span>(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,GL_FLOAT,GL_FALSE,<span class="hljs-number">0</span>,(<span class="hljs-type">void</span>*)<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//启用顶点属性</span><br>    <span class="hljs-built_in">glEnableVertexAttribArray</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//创建顶点着色器</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> vertex = <span class="hljs-built_in">glCreateShader</span>(GL_VERTEX_SHADER);<br>    <span class="hljs-comment">//链接着色器对象与源代码</span><br>    <span class="hljs-built_in">glShaderSource</span>(vertex,<span class="hljs-number">1</span>,&amp;vertex_shader,<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-comment">//编译着色器</span><br>    <span class="hljs-built_in">glCompileShader</span>(vertex);<br>    <span class="hljs-type">int</span>  success; <span class="hljs-comment">//是否成功编译的flag</span><br>    <span class="hljs-type">char</span> infoLog[<span class="hljs-number">512</span>]; <span class="hljs-comment">//错误信息字符数组</span><br>    <span class="hljs-built_in">glGetShaderiv</span>(vertex, GL_COMPILE_STATUS, &amp;success); <span class="hljs-comment">//获取编译结果</span><br>    <span class="hljs-keyword">if</span>(!success)<br>    &#123; <span class="hljs-comment">//若未编译成功</span><br>        <span class="hljs-built_in">glGetShaderInfoLog</span>(vertex, <span class="hljs-number">512</span>, <span class="hljs-literal">NULL</span>, infoLog); <span class="hljs-comment">//获取编译错误信息,512代表infoLog数组大小</span><br>        std::cout &lt;&lt; <span class="hljs-string">&quot;ERROR::SHADER::VERTEX::COMPILATION_FAILED\n&quot;</span> &lt;&lt; infoLog &lt;&lt; std::endl; <span class="hljs-comment">//打印</span><br>    &#125;<br>    <span class="hljs-comment">//同上</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> fragment = <span class="hljs-built_in">glCreateShader</span>(GL_FRAGMENT_SHADER);<br>    <span class="hljs-built_in">glShaderSource</span>(fragment,<span class="hljs-number">1</span>,&amp;fragment_shader,<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">glCompileShader</span>(fragment);<br>    <span class="hljs-built_in">glGetShaderiv</span>(fragment, GL_COMPILE_STATUS, &amp;success); <span class="hljs-comment">//获取编译结果</span><br>    <span class="hljs-keyword">if</span>(!success)<br>    &#123; <span class="hljs-comment">//若未编译成功</span><br>        <span class="hljs-built_in">glGetShaderInfoLog</span>(fragment, <span class="hljs-number">512</span>, <span class="hljs-literal">NULL</span>, infoLog); <span class="hljs-comment">//获取编译错误信息,512代表infoLog数组大小</span><br>        std::cout &lt;&lt; <span class="hljs-string">&quot;ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\n&quot;</span> &lt;&lt; infoLog &lt;&lt; std::endl; <span class="hljs-comment">//打印</span><br>    &#125;<br>    <span class="hljs-comment">//创建着色器程序</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> shader_program = <span class="hljs-built_in">glCreateProgram</span>();<br>    <span class="hljs-comment">//添加着色器“节点”，注意顺序</span><br>    <span class="hljs-built_in">glAttachShader</span>(shader_program,vertex);<br>    <span class="hljs-built_in">glAttachShader</span>(shader_program,fragment);<br>    <span class="hljs-comment">//完成链接操作</span><br>    <span class="hljs-built_in">glLinkProgram</span>(shader_program);<br>    <span class="hljs-comment">//激活着色器程序</span><br>    <span class="hljs-built_in">glUseProgram</span>(shader_program);<br>    <span class="hljs-comment">//删除着色器对象，释放内存</span><br>    <span class="hljs-built_in">glDeleteShader</span>(vertex);<br>    <span class="hljs-built_in">glDeleteShader</span>(fragment);<br>    <span class="hljs-comment">//渲染循环</span><br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">glfwWindowShouldClose</span>(window))&#123;<br>        <span class="hljs-comment">//设置清空颜色</span><br>        <span class="hljs-built_in">glClearColor</span>(<span class="hljs-number">0.2f</span>,<span class="hljs-number">0.3f</span>,<span class="hljs-number">0.3f</span>,<span class="hljs-number">1.0f</span>);<br>        <span class="hljs-comment">//清空上一帧</span><br>        <span class="hljs-built_in">glClear</span>(GL_COLOR_BUFFER_BIT);<br>        <span class="hljs-comment">//激活着色器程序</span><br>        <span class="hljs-built_in">glUseProgram</span>(shader_program);<br>        <span class="hljs-comment">//绑定VAO对象</span><br>        <span class="hljs-built_in">glBindVertexArray</span>(VAO);<br>        <span class="hljs-comment">//绘制三个顶点的三角形图元</span><br>        <span class="hljs-built_in">glDrawArrays</span>(GL_TRIANGLES,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>);<br>        <span class="hljs-comment">//交换前后缓冲</span><br>        <span class="hljs-built_in">glfwSwapBuffers</span>(window);<br>        <span class="hljs-comment">//处理外部输入</span><br>        <span class="hljs-built_in">glfwPollEvents</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="元素缓冲对象">元素缓冲对象</h3><p>当图元存在共用顶点的情况时，传统的绘制方法会把共用的顶点绘制两次，导致额外开销。</p><p>为此，元素缓冲对象（Element Buffer Object,EBO）提供了一种方式，用于存储OpenGL用来决定要绘制哪些顶点的索引。</p><p>使用EBO时，顶点数据必须是不重复的顶点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">float</span> vertices[] = &#123;<br>    <span class="hljs-number">0.5f</span>, <span class="hljs-number">0.5f</span>, <span class="hljs-number">0.0f</span>,   <span class="hljs-comment">// 右上角</span><br>    <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>, <span class="hljs-number">0.0f</span>,  <span class="hljs-comment">// 右下角</span><br>    <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-comment">// 左下角</span><br>    <span class="hljs-number">-0.5f</span>, <span class="hljs-number">0.5f</span>, <span class="hljs-number">0.0f</span>   <span class="hljs-comment">// 左上角</span><br>&#125;;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> indices[] = &#123;<br>    <span class="hljs-comment">// 注意索引从0开始! </span><br>    <span class="hljs-comment">// 此例的索引(0,1,2,3)就是顶点数组vertices的下标，</span><br>    <span class="hljs-comment">// 这样可以由下标代表顶点组合成矩形</span><br>    <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-comment">// 第一个三角形</span><br>    <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>  <span class="hljs-comment">// 第二个三角形</span><br>&#125;;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> EBO;<br><span class="hljs-built_in">glGenBuffers</span>(<span class="hljs-number">1</span>, &amp;EBO);<br><span class="hljs-built_in">glBindBuffer</span>(GL_ELEMENT_ARRAY_BUFFER, EBO);<br><span class="hljs-built_in">glBufferData</span>(GL_ELEMENT_ARRAY_BUFFER, <span class="hljs-built_in">sizeof</span>(indices), indices, GL_STATIC_DRAW);<br><span class="hljs-comment">//渲染循环内...</span><br><span class="hljs-built_in">glBindBuffer</span>(GL_ELEMENT_ARRAY_BUFFER, EBO);<br><span class="hljs-built_in">glDrawElements</span>(GL_TRIANGLES, <span class="hljs-number">6</span>, GL_UNSIGNED_INT, <span class="hljs-number">0</span>); <span class="hljs-comment">//注意，使用EBO时需要使用glDrawElements。其中，第四个参数表示EBO中的偏移量。</span><br></code></pre></td></tr></table></figure><p>使用EBO的完整代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;glad/glad.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;GLFW/glfw3.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">float</span> vertices[] = &#123;<br>        <span class="hljs-number">0.5f</span>, <span class="hljs-number">0.5f</span>, <span class="hljs-number">0.0f</span>,   <span class="hljs-comment">// 右上角</span><br>        <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>, <span class="hljs-number">0.0f</span>,  <span class="hljs-comment">// 右下角</span><br>        <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-comment">// 左下角</span><br>        <span class="hljs-number">-0.5f</span>, <span class="hljs-number">0.5f</span>, <span class="hljs-number">0.0f</span>   <span class="hljs-comment">// 左上角</span><br>&#125;;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> indices[] = &#123;<br>        <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-comment">// 第一个三角形</span><br>        <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>  <span class="hljs-comment">// 第二个三角形</span><br>&#125;;<br><br><span class="hljs-comment">//顶点着色器源码</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* vertex_shader=<span class="hljs-string">&quot;#version 330 core\n&quot;</span><br>                          <span class="hljs-string">&quot;layout(location=0) in vec3 aPos;\n&quot;</span><br>                          <span class="hljs-string">&quot;void main()\n&quot;</span><br>                          <span class="hljs-string">&quot;&#123;\n&quot;</span><br>                          <span class="hljs-string">&quot;gl_Position = vec4(aPos,1.0);&quot;</span><br>                          <span class="hljs-string">&quot;&#125;\n&quot;</span>;<br><br><span class="hljs-comment">//片段着色器源码</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* fragment_shader=<span class="hljs-string">&quot;#version 330 core\n&quot;</span><br>                            <span class="hljs-string">&quot;out vec4 Fragcolor;\n&quot;</span><br>                            <span class="hljs-string">&quot;void main()\n&quot;</span><br>                            <span class="hljs-string">&quot;&#123;\n&quot;</span><br>                            <span class="hljs-string">&quot;Fragcolor = vec4(1.0f, 0.5f, 0.2f, 1.0f);&quot;</span><br>                            <span class="hljs-string">&quot;&#125;\n&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">process_input</span><span class="hljs-params">(GLFWwindow* window,<span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span></span>&#123;<br>    <span class="hljs-built_in">glViewport</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,width,height);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">glfwInit</span>();<br>    <span class="hljs-built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MAJOR,<span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MINOR,<span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">glfwWindowHint</span>(GLFW_OPENGL_PROFILE,GLFW_OPENGL_CORE_PROFILE);<br>    GLFWwindow* window = <span class="hljs-built_in">glfwCreateWindow</span>(<span class="hljs-number">800</span>,<span class="hljs-number">600</span>,<span class="hljs-string">&quot;LearnOpenGL&quot;</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span>(window==<span class="hljs-literal">NULL</span>)&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Failed to Create Window&quot;</span>&lt;&lt;endl;<br>        <span class="hljs-built_in">glfwTerminate</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-built_in">glfwMakeContextCurrent</span>(window);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">gladLoadGLLoader</span>((GLADloadproc) glfwGetProcAddress))&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Failed to Load GLAD proc&quot;</span>&lt;&lt;endl;<br>        <span class="hljs-built_in">glfwTerminate</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-built_in">glViewport</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">800</span>,<span class="hljs-number">600</span>);<br>    <span class="hljs-built_in">glfwSetFramebufferSizeCallback</span>(window,process_input);<br><br>    <span class="hljs-comment">//编译着色器</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> vertex = <span class="hljs-built_in">glCreateShader</span>(GL_VERTEX_SHADER);<br>    <span class="hljs-built_in">glShaderSource</span>(vertex,<span class="hljs-number">1</span>,&amp;vertex_shader,<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">glCompileShader</span>(vertex);<br>    <span class="hljs-type">int</span> success;<br>    <span class="hljs-type">char</span> info[<span class="hljs-number">512</span>];<br>    <span class="hljs-built_in">glGetShaderiv</span>(vertex,GL_COMPILE_STATUS,&amp;success);<br>    <span class="hljs-keyword">if</span>(!success)&#123;<br>        <span class="hljs-built_in">glad_glGetShaderInfoLog</span>(vertex,<span class="hljs-number">512</span>,<span class="hljs-literal">NULL</span>,info);<br>        cout&lt;&lt;<span class="hljs-string">&quot;VERTEX SHADER COMPILE ERROR:&quot;</span>&lt;&lt;info&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> fragment = <span class="hljs-built_in">glCreateShader</span>(GL_FRAGMENT_SHADER);<br>    <span class="hljs-built_in">glShaderSource</span>(fragment,<span class="hljs-number">1</span>,&amp;fragment_shader,<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">glCompileShader</span>(fragment);<br>    <span class="hljs-built_in">glGetShaderiv</span>(fragment,GL_COMPILE_STATUS,&amp;success);<br>    <span class="hljs-keyword">if</span>(!success)&#123;<br>        <span class="hljs-built_in">glad_glGetShaderInfoLog</span>(fragment,<span class="hljs-number">512</span>,<span class="hljs-literal">NULL</span>,info);<br>        cout&lt;&lt;<span class="hljs-string">&quot;FRAGMENT SHADER COMPILE ERROR:&quot;</span>&lt;&lt;info&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> shader_program = <span class="hljs-built_in">glCreateProgram</span>();<br>    <span class="hljs-built_in">glAttachShader</span>(shader_program,vertex);<br>    <span class="hljs-built_in">glAttachShader</span>(shader_program,fragment);<br>    <span class="hljs-built_in">glLinkProgram</span>(shader_program);<br>    <span class="hljs-built_in">glGetProgramiv</span>(shader_program, GL_LINK_STATUS, &amp;success);<br>    <span class="hljs-keyword">if</span> (!success) &#123;<br>        <span class="hljs-built_in">glGetProgramInfoLog</span>(shader_program, <span class="hljs-number">512</span>, <span class="hljs-literal">NULL</span>, info);<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;ERROR::SHADER::PROGRAM::LINKING_FAILED\n&quot;</span> &lt;&lt; info &lt;&lt; std::endl;<br>    &#125;<br>    <span class="hljs-built_in">glDeleteShader</span>(vertex);<br>    <span class="hljs-built_in">glDeleteShader</span>(fragment);<br><br>    <span class="hljs-comment">//定义VAO、VBO、EBO</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> VBO;<br>    <span class="hljs-built_in">glGenBuffers</span>(<span class="hljs-number">1</span>,&amp;VBO);<br>    <span class="hljs-built_in">glBindBuffer</span>(GL_ARRAY_BUFFER,VBO);<br>    <span class="hljs-built_in">glBufferData</span>(GL_ARRAY_BUFFER,<span class="hljs-built_in">sizeof</span>(vertices),vertices,GL_STATIC_DRAW);<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> VAO;<br>    <span class="hljs-built_in">glGenVertexArrays</span>(<span class="hljs-number">1</span>,&amp;VAO);<br>    <span class="hljs-built_in">glBindVertexArray</span>(VAO);<br>    <span class="hljs-built_in">glVertexAttribPointer</span>(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,GL_FLOAT,GL_FALSE,<span class="hljs-number">0</span>,(<span class="hljs-type">void</span>*)<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">glEnableVertexAttribArray</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> EBO;<br>    <span class="hljs-built_in">glGenBuffers</span>(<span class="hljs-number">1</span>,&amp;EBO);<br>    <span class="hljs-built_in">glBindBuffer</span>(GL_ELEMENT_ARRAY_BUFFER,EBO);<br>    <span class="hljs-built_in">glBufferData</span>(GL_ELEMENT_ARRAY_BUFFER,<span class="hljs-built_in">sizeof</span>(indices),indices,GL_STATIC_DRAW);<br>    <span class="hljs-built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">glBindVertexArray</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">glfwWindowShouldClose</span>(window))&#123;<br>        <span class="hljs-built_in">glClearColor</span>(<span class="hljs-number">0.5f</span>,<span class="hljs-number">0.4f</span>,<span class="hljs-number">0.3f</span>,<span class="hljs-number">1.0f</span>);<br>        <span class="hljs-built_in">glClear</span>(GL_COLOR_BUFFER_BIT);<br>        <span class="hljs-built_in">glBindVertexArray</span>(VAO);<br>        <span class="hljs-built_in">glBindBuffer</span>(GL_ELEMENT_ARRAY_BUFFER,EBO);<br>        <span class="hljs-built_in">glUseProgram</span>(shader_program);<br>        <span class="hljs-built_in">glDrawElements</span>(GL_TRIANGLES,<span class="hljs-number">6</span>,GL_UNSIGNED_INT,<span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">glBindVertexArray</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">glBindBuffer</span>(GL_ARRAY_BUFFER,<span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">glfwSwapBuffers</span>(window);<br>        <span class="hljs-built_in">glfwPollEvents</span>();<br>    &#125;<br>    <span class="hljs-built_in">glDeleteBuffers</span>(<span class="hljs-number">1</span>,&amp;VBO);<br>    <span class="hljs-built_in">glDeleteProgram</span>(shader_program);<br>    <span class="hljs-built_in">glDeleteVertexArrays</span>(<span class="hljs-number">1</span>,&amp;VAO);<br>    <span class="hljs-built_in">glfwTerminate</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>图形学</tag>
      
      <tag>OpenGL</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pytorch基础</title>
    <link href="/2024/07/09/Pytorch%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/07/09/Pytorch%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>新领域，新气象。 <span id="more"></span></p><h1 id="pytorch入门">PyTorch入门</h1><h2 id="配置">配置</h2><p>在PyCharm中配置PyTorch时，需要使用本地解释器而非venv虚拟环境中的解释器，否则会出现torch.cuda.is_available()为False的情况。</p><h2 id="常用操作">常用操作</h2><h3 id="torch.reshape">torch.reshape()</h3><p><code>torch.reshape(input, shape)</code>：将输入Tensor变为形状为shape的Tensor</p><h2 id="数据加载">数据加载</h2><h3 id="dataset">Dataset</h3><p>用于存储和管理数据的类。</p><p><code>torch.utils.data.Dataset</code>是pytorch提供的抽象类。通过继承此类，可自定义另外的Dataset类。</p><p>通过重写<code>__len()__</code>和<code>__getitem__()</code>方法，可返回数据集的大小和每个数据样本及其Label。</p><p>Dataset类中一般必定存在一个成员变量，该变量是一个列表，存放数据的文件路径。</p><p><code>__getitem__()</code>方法通常返回一个Tuple，元素0为数据内容，元素1为Label。</p><blockquote><p><code>__getitem__()</code>方法无需手动调用，在变量后加[idx]即可。类似于索引访问数组。</p><p>通常，<code>__getitem__()</code>方法根据idx从文件路径列表中取出对应的路径，进而根据路径获取数据本身。</p></blockquote><p>通过运算符<code>+</code>，可以将两个Dataset作为一个列表的两个元素，构成一个2D的更大的Dataset。</p><h3 id="dataloader">Dataloader</h3><p>用于从Dataset中为模型加载数据的类。</p><p><code>torch.utils.data.DataLoader</code>提供了创建DataLoader对象的方法。</p><p><code>DataLoader(dataset, batch_size, shuffle, sampler, batch_sampler, num_workers, drop_last)</code></p><blockquote><p>dataset: 数据集实例。</p><p>batch_size：批处理大小，默认为1.</p><p>shuffle：每次训练过后是否将数据集打乱。</p><p>sampler：</p><p>batch_sampler：</p><p>num_workers：进程数。</p><p>drop_last：数据集大小/batch_size除不尽时，余数是否丢弃。</p></blockquote><p><code>DataLoader</code>实例是一个迭代器，每个item都是一个2元素元组。</p><p>元素0是一个列表，包含了batch_size个数据。</p><p>元素1是一个列表，包含了batch_size个Label。</p><h2 id="tensorboard">TensorBoard</h2><h3 id="summarywriter">SummaryWriter</h3><p><code>from torch.utils.tensorboard import SummarWriter</code></p><p><code>SummaryWriter(str)</code>实例化了一个存储在<code>str</code>文件夹中的<code>SummaryWriter</code>对象。</p><p><code>SummaryWriter</code>类用于在训练过程中向文件写入各类信息。这类信息可以被TensorBoard解析并以可视化的方式呈现。</p><h4 id="add_scalar">add_scalar()</h4><p><code>def add_scalar(self, tag, scalar_value, global_step=None, walltime=None)</code></p><blockquote><p><code>tag</code>是对数据的标识符。</p><p><code>scalar_value</code>是要添加的数据。</p><p><code>global_step</code>是当前训练的步数。</p></blockquote><h4 id="add_image">add_image()</h4><p><code>def add_image(self, tag, img_tensor, global_step=None, walltime=None, dataformats=‘CHW’)</code></p><blockquote><p><code>tag</code>是对图片数据的标识符。</p><p><code>img_tensor</code>是图片数据。可以为<code>Tensor</code>、<code>ndarray</code>或<code>string</code>。</p><p>使用<code>np.array(PIL.JpegImageFile)</code>即可将PIL图片转换为<code>ndarray</code>。</p><blockquote><p>此种方式转换的ndarray的shape为（H, W,C），即三个维度分别对应高度、宽度和通道。</p><p>因此，此时add_image的dataformats参数应当为‘HWC’。</p></blockquote><p>也可用torchvision.transforms.ToTensor()将PIL图片转化为Tensor。</p><p>也可用cv.imread将PIL图片转化为CHW的ndarray。</p></blockquote><h4 id="add_graph">add_graph()</h4><p><code>add_graph(model, input_to_model=None, verbose=False)</code></p><h2 id="transforms">Transforms</h2><p><code>from torchvision import transforms</code></p><p><code>transforms</code>用于对图片数据进行变换。该模块内置了若干工具类，</p><h3 id="compose"><code>Compose()</code></h3><p><code>Compose(list of transforms object)</code>用于组合多个transforms对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">operation = transforms.Compose([transforms.CenterCrop(<span class="hljs-number">10</span>), transforms.ToTensor()])<br><span class="hljs-comment"># 对图片进行operation操作时，先将其中心裁剪，再将其转换为Tensor对象</span><br></code></pre></td></tr></table></figure><h3 id="totensor"><code>ToTensor()</code></h3><p><code>ToTensor()</code>用于将对象转换为<code>Tensor</code>对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用PIL打开本地图片，使用ToTensor转换为Tensor对象，再用Tensorboard写入事件文件。</span><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br>img = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">r&quot;data/img/1.jpg&quot;</span>)<br>totensor_operation = transforms.ToTensor()<br>img_tensor = totensor_operation(img)<br>writer = SummaryWriter(<span class="hljs-string">&quot;test&quot;</span>)<br>writer.add_image(<span class="hljs-string">&quot;测试图片&quot;</span>,img_tensor)<br>writer.close()<br></code></pre></td></tr></table></figure><h3 id="topilimage"><code>ToPILImage()</code></h3><p>将<code>ndarray</code>或<code>Tensor</code>对象转换为PILImage。</p><h3 id="normalize"><code>Normalize()</code></h3><p>使用z-score法将Tensor对象标准化。</p><p><code>transforms.Normalize(mean=list, std=list)</code></p><blockquote><p>对于mean和std，图片有几个通道，它们就是有几个元素的list。</p><p>list各元素的值需要对数据集中的每个元素的每个通道计算得出。</p></blockquote><p>输出：(原始值-均值)/标准差</p><p>作用：将图像的数据分布转换为标准正态分布。</p><figure><imgsrc="https://yoi-note.oss-cn-chengdu.aliyuncs.com/Image/202404271416967.png"alt="image-20240427141609922" /><figcaption aria-hidden="true">image-20240427141609922</figcaption></figure><h3 id="resize"><code>Resize()</code></h3><p>将给定的PILImage变换至指定尺寸。</p><p><code>transforms.Resize(size)</code>实例化了一个Resize操作对象。</p><blockquote><p>当size为2元素列表时，第一个元素是高，第二个元素是宽。</p><p>当size为int时，图片更小的边将被缩放至int。</p></blockquote><p><code>transforms.Resize(img)</code>用于将已实例化的缩放操作应用于PILImage。接收的参数可为PILImage，也可为Tensor。</p><h3 id="randomcrop"><code>RandomCrop()</code></h3><p>根据给定的size随机裁剪原图片。</p><p><code>transforms.RandomCrop(size)</code>实例化了一个RandomCrop对象。</p><blockquote><p>可选参数：padding：int，2元素列表或4元素列表。分别对应：</p><ul><li>在图片四周添加int像素的间隔。</li><li>在图片左右添加[0]像素间隔，上下添加[1]像素间隔。</li><li>在图片上下左右分别添加[0]、[1]、[2]、[3]像素间隔。</li></ul><p>pad_if_needed：布尔值，当裁剪大小大于图片大小时，自动添加padding。</p><p>fill：int或3元素列表，用于填充padding的像素色。分别对应：RGB（int,int, int）和RGB（r, g, b)</p></blockquote><p><code>transforms.RandomCrop(img)</code>用于执行裁剪操作。</p><h2 id="torchvision数据集">torchvision数据集</h2><p>以<code>CIFAR10</code>数据集为例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><br>train_set = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">True</span>, download=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># root为存放数据集的根目录;train为是否训练集;download为是否从网络下载数据集。</span><br>test_set = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">False</span>, download=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><blockquote><p>除上述属性外，还有：</p><p><code>transform</code>属性：可传入<code>transforms</code>函数，对数据进行预处理。</p></blockquote><h2 id="神经网络">神经网络</h2><h2 id="nn.module"><code>nn.Module</code></h2><p><code>nn.Module</code>是所有神经网络的基类。</p><p>自定义一个神经网络类，首先要做的便是继承<code>nn.Module</code>，随后实现<code>__init__()</code>和<code>forward()</code>函数。</p><p>实现<code>__init__()</code>函数时，首先要调用<code>super().__init__()</code>。其中classname为自定义类的类名。</p><p><code>forward()</code>函数实现了前向传播。它接收一个<code>x</code>参数输入，对<code>x</code>进行一系列处理之后返回。</p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyNetwork</span>(nn.Module):<br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>     <span class="hljs-built_in">super</span>(MyNetwork, self).__init__()<br>     <span class="hljs-comment"># 将各层操作作为变量存储</span><br>     self.layerfunction1 = nn.Conv2d(...)<br>     ...<br><br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>     output = self.xxxfunction(x)<br>     <span class="hljs-keyword">return</span> output<br></code></pre></td></tr></table></figure></blockquote><h2 id="nn.sequential"><code>nn.Sequential</code></h2><p><code>Sequential</code>用于保存一系列层操作，如卷积、非线性激活、池化等。类似于Transforms的Compose。</p><p><code>model = nn.Sequential(nn.Conv2d(1,20,5),nn.ReLU(),nn.Conv2d(20,64,5),nn.ReLu)</code></p><blockquote><p>输入x可省略。</p></blockquote><h2 id="卷积">卷积</h2><p>卷积（Convolution）是让两个函数经过变换得到第三个函数的过程。</p><figure><imgsrc="https://yoi-note.oss-cn-chengdu.aliyuncs.com/Image/202404292040281.png"alt="image-20240429204022080" /><figcaption aria-hidden="true">image-20240429204022080</figcaption></figure><p><code>torch.nn.function</code>模块中，提供了从1D到3D数据的卷积函数：<code>conv1d()</code>、<code>conv2d</code>和<code>conv3d</code>。</p><p>以<code>conv2d()</code>为例：</p><p><code>conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1) -&gt; Tensor</code></p><blockquote><p><code>input</code>为输入的Tensor。在CV中，这个Tensor一般是2DTensor，是Image经过ToTensor()变换的结果。</p><blockquote><p>对于input的Tensor，其形状必须满足<code>(minibatch, in_channels, iH, iW)</code></p><p><code>minibatch</code>是<code>DataLoader</code>的<code>batch_size</code>。</p><p><code>in_channels</code>是图片的通道数。</p><p><code>iH</code>、<code>iW</code>分别是图片的高和宽。</p></blockquote><p><code>weight</code>权重，又叫卷积核。</p><blockquote><p><img src="https://yoi-note.oss-cn-chengdu.aliyuncs.com/Image/202404292143205.png" alt="image-20240429214304139" style="zoom:50%;" /></p><p>卷积核就像一个遮罩，对输入图像的局部进行处理。卷积核上元素值的不同，卷积结果就不同。元素值就是一个个权重。</p><p>权重的形状必须满足<code>(out_channels, in_channels/groups, kH, kW)</code></p><p><code>out_channels</code>是输出图片的通道数。</p></blockquote><p><code>bias</code>偏置。</p><p><code>stride</code>步进。直观来讲，步进是卷积核在输入图像上方每次移动的像素数。</p><blockquote><p>步进既可以是一个数，也可以是元组(sH,sW)。前者是横向移动的元素数，后者是纵向移动的元素数。</p></blockquote><p><code>padding</code>间隔。直观来讲，对输入图片的边缘进行填充，便于对边缘像素进行卷积处理。</p><blockquote><p>间隔既可以是一个数，也可以是元组(padH,padW)。前者是横向填充的元素数，后者是纵向填充的元素数。</p></blockquote><p><code>dilation</code></p><p><code>groups</code></p></blockquote><h2 id="结构层">结构/层</h2><p>可以把每个函数看作一个层。</p><h3 id="卷积层convolution-layer">卷积层（Convolution Layer）</h3><p><code>torch.nn</code>提供了<code>torch.nn.function</code>中各功能的简化版本。</p><p><code>Conv2d(in_channels, out_channels, kernel_size, stride=1, padding=0, dilation=1, groups=1, bias=True, padding_mode=‘zeros’)</code></p><blockquote><p><ahref="https://github.com/vdumoulin/conv_arithmetic/blob/master/README.md">conv_arithmetic/README.mdat master · vdumoulin/conv_arithmetic (github.com)</a></p><p>in_channels：输入通道数</p><p>out_channels：输出通道数</p><blockquote><p>即卷积核个数。</p></blockquote><p>kernel_size：卷积核尺寸。可变量，会在训练过程中自行改变。</p><p>stride：步进数</p><p>padding：边缘补充</p><p>dilation：让卷积核的各元素之间间隔一定距离。用于空洞卷积。</p><blockquote><p><img src="https://github.com/vdumoulin/conv_arithmetic/raw/master/gif/dilation.gif" alt="img" style="zoom: 33%;" /></p></blockquote><p>groups：用于分组卷积</p><p>bias：偏置。</p></blockquote><h3 id="池化层pooling-layer">池化层（Pooling Layer）</h3><p>池化层将一个窗口内的所有信息浓缩为一个输出。它一般在卷积后进行，输入和输出的通道相同，不可改变。因此，输出尺寸会减小，参数减小，助于减少过拟合、提高性能。</p><blockquote><p>卷积核平移的过程，可看作滑动窗口过程。卷积核就是窗口。</p></blockquote><p>对于最大池化（MaxPooling）操作，它取一个窗口内最大的值输出，然后步进。</p><p><code>MaxPool2d(kernel_size, stride=None, padding=0*, dilation=1*, return_indices=False*, ceil_mode=False)</code></p><blockquote><p>return_indices：</p><p>ceil_mode：True时，使用ceil模式（允许出界）；否则使用floor模式（出界池化丢弃）。</p><p>stride：<strong>池化核的步长默认为核大小</strong></p></blockquote><p>平均池化（Mean Pooling）操作计算窗口内平均值输出，然后步进。</p><h3 id="填充层padding-layer">填充层（Padding Layer）</h3><p>类似于卷积和池化操作中的<code>Padding</code>参数。不同的是，<code>Padding</code>只能填充0，而填充层可以填充其他常数。</p><h3 id="非线性激活non-linear-activations">非线性激活（Non-linearActivations）</h3><h4 id="线性整流函数relu">线性整流函数（ReLU）</h4><p><code>torch.nn.ReLU(x)</code>：等效于<code>max(0,x)</code>。</p><blockquote><p><code>inplace</code>参数（bool）：为True则修改传入值；否则传出新值，传入值不变。</p></blockquote><h4 id="sigmoid函数">Sigmoid函数</h4><p><code>torch.nn.Sigmoid(x)</code>：等效于：<code>1/(1+exp(-x))</code>。</p><h3 id="正则化层normalization-layer">正则化层（NormalizationLayer）</h3><p>用于提高网络性能。</p><p><ahref="https://blog.csdn.net/qq_41915623/article/details/125984629">pytorch中对BatchNorm2d()函数的理解-CSDN博客</a></p><p><code>torch.nn.BatchNorm2d(num_features, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True, device=None, dtype=None)</code></p><blockquote><p>num_features：通道数。</p><p>eps：稳定值，避免分母为0，默认为1e-5。</p><p>momentum：将历史batch的均值与方差的影响延续到当前batch。</p><p>affine：True时，给定可以学习的系数矩阵Gamma和Beta。</p></blockquote><h3 id="线性层linear-layer">线性层（Linear Layer）</h3><p><code>torch.nn.Linear(in_features, out_features, bias=True)</code></p><p>对输入施加线性变换：<img src="https://yoi-note.oss-cn-chengdu.aliyuncs.com/Image/202405021536109.png" alt="image-20240502153650043" style="zoom:50%;" /></p><blockquote><p><strong>feature</strong>：特征。对事物进行分类或识别的本质就是提取特征。</p><p>在神经网络中，in_features指的是输入的数组。out_features则反之。</p><p>在Linear函数中，前两个参数分别是输入数组的元素个数和输出数组的元素个数。</p></blockquote><h3 id="丢弃层dropout-layer">丢弃层（Dropout Layer）</h3><p>防止过拟合。</p><p><code>torch.nn.Dropout2d(p=0.5, inplace=False)</code></p><p>随机将某些元素按p的概率设为0。</p><h3 id="嵌入层embedding-layer">嵌入层（Embedding Layer）</h3><h2 id="损失函数">损失函数</h2><p>损失函数（LossFunction）用于衡量实际输出与预期输出之间的差距，并用误差值指导模型进行进一步训练学习（即反向传播）。</p><h3 id="l1loss"><code>L1Loss()</code></h3><p><code>torch.nn.L1Loss(input, tartget, reduction='mean')</code></p><blockquote><p>input和target的形状为（<em>, </em>)。输出一个标量。</p><p>reduction：处理方式。‘mean’则将每个元素的MAE相加并处以元素数量。‘sum’只相加。</p></blockquote><p>比较每个元素的平均绝对误差（Mean Absolute Error, MAE）。</p><blockquote><p>output = (|x - x’|+|y - y’| + ...)/N</p></blockquote><h3 id="smoothl1loss"><code>SmoothL1Loss()</code></h3><p><img src="https://yoi-note.oss-cn-chengdu.aliyuncs.com/Image/202405031327320.png" alt="image-20240503132740254" style="zoom: 67%;" /></p><p><code>torch.nn.SmoothL1Loss(reduction='mean', beta=1.0)</code></p><p>平滑版的L1Loss。</p><p>当MAE小于1时，返回MSE的0.5倍；否则返回MAE-0.5。结合了L1和MSE的部分优点，适合多数情况。</p><h3 id="mseloss"><code>MSELoss()</code></h3><p><code>torch.nn.MSELoss(reduction='mean')</code></p><blockquote><p>input和target的形状为（<em>, </em>)。输出一个标量。</p></blockquote><p>比较每个元素的均方差。</p><blockquote><p>output = (|x - x’|^2+|y - y’|^2 + ...)/N</p></blockquote><h3 id="crossentropyloss"><code>CrossEntropyLoss()</code></h3><p><code>torch.nn.CrossEntropyLoss(weight=None, ignore_index=-100, reduction='mean', label_smoothing=0.0)</code></p><p>比较预期输出和实际输出的交叉熵。在分类问题中常用。</p><p><img src="https://yoi-note.oss-cn-chengdu.aliyuncs.com/Image/202405031400362.png" alt="image-20240503140023311" style="zoom:50%;" /></p><blockquote><p>input的形状需要是（N, C）或(C,C)，其中N为batch_size，C为分类的类别数。</p></blockquote><h2 id="反向传播">反向传播</h2><p>对损失函数的结果调用<code>backward()</code>子方法即可。</p><p>反向传播用于计算损失函数梯度。得到梯度以后，使用优化器对参数进行更新。</p><h2 id="优化器">优化器</h2><p><a href="https://pytorch.org/docs/main/optim.html">torch.optim —PyTorch main documentation</a></p><p>以<code>torch.optim.SGD()</code>为例：</p><ul><li>实例化优化器对象：<code>optimizer = optim.SGD(model.parameters(), lr=0.01, momentum=0.9)</code><ul><li>model.parameters()：nn.Module的parameters()函数。</li><li>lr：学习速率。一般训练前期设置为大数值，训练后期设置为小数值。</li></ul></li><li>每次取数据都要设置<code>optimizer.zero_grad()</code>。</li><li>进行反向传播后，调用<code>optimizer.step()</code></li></ul><p>对dataset的每一次遍历就是一次训练过程，称为一个epoch。</p><h2 id="现有网络">现有网络</h2><p>以<code>vgg16</code>为例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">vgg16_pretrained = torchvision.models.vgg16(VGG16_Weights.IMAGENET1K_FEATURES) <span class="hljs-comment"># 下载网络并赋予权重</span><br>vgg16.add_module(<span class="hljs-string">&quot;add_linear&quot;</span>, nn.Linear(<span class="hljs-number">1000</span>, <span class="hljs-number">10</span>)) <span class="hljs-comment"># 添加自己的module</span><br>vgg16.classifier[<span class="hljs-number">7</span>] = nn.Linear(<span class="hljs-number">4096</span>, <span class="hljs-number">10</span>) <span class="hljs-comment"># 修改module</span><br></code></pre></td></tr></table></figure><h2 id="模型">模型</h2><h3 id="保存">保存</h3><p>方式一：<code>torch.save(model_var_name, path)</code>：将模型结构以及参数保存为文件。</p><blockquote><p>注意path添加后缀，通常为.pth。</p></blockquote><p>方式二：<code>torch.save(model_var_name.state_dict(), path)</code>：仅保存模型参数（推荐）。</p><blockquote><p>注意path添加后缀，通常为.pkl。</p></blockquote><h3 id="读取">读取</h3><p><code>torch.load(path)</code>：对应保存方式一。</p><p><code>model_var_name.load_state_dict()</code>：对应保存方式二。</p><h3 id="训练">训练</h3><h4 id="定义网络结构">定义网络结构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Network.py</span><br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyNetwork</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(MyNetwork, self).__init__()<br>        self.model_layers = nn.Sequential(<br>        nn.XXX(...)<br>        nn.XXX(...)<br>            ...<br>        )<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = self.model_layers(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">input</span><br>    <br>    <br><span class="hljs-keyword">if</span>(__name__ == <span class="hljs-string">&quot;__main__&quot;</span>):<br>    mynetwork = MyNetwork()<br>    <span class="hljs-built_in">input</span> = xxx<br>    output = mynetwork(<span class="hljs-built_in">input</span>)<br>    <span class="hljs-built_in">print</span>(output.shape)<br></code></pre></td></tr></table></figure><h4 id="获取读取数据集-训练">获取、读取数据集 | 训练</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> datasets, transforms<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn, optim<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> Network <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># 获取数据集并读取</span><br>train_dataset = datasets.CIFAR10(root=<span class="hljs-string">&quot;dataset_root&quot;</span>, train=<span class="hljs-literal">True</span>, transform=transforms.ToTensor(), download=<span class="hljs-literal">True</span>)<br>loader = DataLoader(train_dataset, shuffle=<span class="hljs-literal">True</span>, batch_size = <span class="hljs-number">64</span>, drop_last=<span class="hljs-literal">False</span>)<br>test_dataset = datasets.CIFAR10(root=<span class="hljs-string">&quot;dataset_root&quot;</span>, download=<span class="hljs-literal">True</span>, train=<span class="hljs-literal">False</span>, transform=transforms.ToTensor())<br>test_dataset_len = <span class="hljs-built_in">len</span>(test_dataset)<br>test_loader = DataLoader(test_dataset, shuffle=<span class="hljs-literal">True</span>, drop_last=<span class="hljs-literal">False</span>)<br>total_test_loss = <span class="hljs-number">0</span><br><span class="hljs-comment"># 实例化网络</span><br>network = MyNetwork()<br>loss = nn.CrossEntropyLoss()<br>optimizer = optim.SGD(network.parameters(), lr=<span class="hljs-number">0.01</span>)<br><span class="hljs-comment"># 定义训练参数</span><br>total_train_step = <span class="hljs-number">0</span><br>epoch = <span class="hljs-number">20</span><br>total_test_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 开始训练</span><br>mynetwork.train()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epoch):<br>    running_loss = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> imgs, targets <span class="hljs-keyword">in</span> loader:<br>    optimizer.zero_grad()<br>    output = network(imgs)<br>    loss_val = loss(output, targets) <br>    loss_val.backward()<br>    optimizer.step()<br>     total_train_step += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span>(total_train_step % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前训练次数：&#123;&#125; | 总训练次数：&#123;&#125; | 本次训练损失值：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(i, total_train_step, loss_val))<br></code></pre></td></tr></table></figure><h4 id="测试">测试</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 接上文</span><br>    mynetwork.<span class="hljs-built_in">eval</span>()<br>    correct_num = <span class="hljs-number">0</span><br><span class="hljs-keyword">with</span> torch.nograd():<br>   <span class="hljs-keyword">for</span> imgs, targets <span class="hljs-keyword">in</span> test_loader:<br>        output = mynetwork(imgs)<br>           correct_num += (targets == output.argmax(<span class="hljs-number">1</span>)).<span class="hljs-built_in">sum</span>()<br>            correct_num = correct_num.item()<br>        loss_val = loss(output, targets)<br>        total_test_loss += loss_val<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体损失率：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_test_loss))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体正确率：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">float</span>(correct_num/test_dataset_len)))<br>    torch.save(mynetwork, <span class="hljs-string">&quot;network&#123;&#125;.pth&quot;</span>.<span class="hljs-built_in">format</span>(i))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>机器学习</tag>
      
      <tag>人工智能</tag>
      
      <tag>Python</tag>
      
      <tag>Pytorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数字化皮影戏交互系统开发日志——沙盘模块①</title>
    <link href="/2024/01/26/%E6%95%B0%E5%AD%97%E5%8C%96%E7%9A%AE%E5%BD%B1%E6%88%8F%E4%BA%A4%E4%BA%92%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97%E2%80%94%E2%80%94%E6%B2%99%E7%9B%98%E6%A8%A1%E5%9D%97%E2%91%A0/"/>
    <url>/2024/01/26/%E6%95%B0%E5%AD%97%E5%8C%96%E7%9A%AE%E5%BD%B1%E6%88%8F%E4%BA%A4%E4%BA%92%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97%E2%80%94%E2%80%94%E6%B2%99%E7%9B%98%E6%A8%A1%E5%9D%97%E2%91%A0/</url>
    
    <content type="html"><![CDATA[<p>从零开始的一次尝试。 <span id="more"></span></p><h2 id="初期策划">初期策划</h2><p>既然名为“数字皮影戏科普交互系统”，首要需求便是在程序内复原实物皮影戏，包括视觉观感、操作方式、音效氛围、演绎内容等。</p><p>策划期间，需要着重考虑可行性。笔者作为技术人员，将技术可行性作为策划期间的首要考虑因素。</p><figure><imgsrc="https://yoi-note.oss-cn-chengdu.aliyuncs.com/Image/202401261814028.png"alt="image-20240126181415934" /><figcaption aria-hidden="true">image-20240126181415934</figcaption></figure><h3 id="基本可行性">基本可行性</h3><p>上面是一张实物皮影戏的视频截图。可以观察到，实物皮影戏在视觉上与传统2D平面游戏的区别在于：</p><ul><li>“远虚近实”：元素离幕布越远，色调越偏向黑色，并且越来越淡，同时整体越来越大。</li><li>位于幕后：所有元素在实物皮影戏中均位于幕布之后，通过投影在另一端呈现。</li></ul><p>“远虚近实”效果涉及到Sprite的两方面：大小与颜色。前者（Sprite的大小随距离变化）只需编写脚本动态修改Sprite的localScale即可。后者（同时修改材质的颜色与透明度）同样可以使用脚本实现。但为了提前学习图形学知识，笔者这里选择编写Shader。</p><figure><imgsrc="https://yoi-note.oss-cn-chengdu.aliyuncs.com/Image/202401261822658.png"alt="image-20240126182248623" /><figcaption aria-hidden="true">image-20240126182248623</figcaption></figure><p>上图展示了Shader的编写思路。材质附着在影人上时，通过_WorldSpaceCameraPos可得到L2。保持L1不变（一般是实物皮影戏里的摄像机也不会移动过），就可计算得到L3。把L3作为变量加入Shader的frag函数中，即可让材质片元随L3的变化而变化。因此，技术上可行。</p><h3 id="整体框架">整体框架</h3><p>最主要的视觉视效复刻是完全可行的。接下来考虑程序的整体框架。</p><figure><imgsrc="https://yoi-note.oss-cn-chengdu.aliyuncs.com/Image/202401261826536.png"alt="image-20240126182620479" /><figcaption aria-hidden="true">image-20240126182620479</figcaption></figure><h4 id="沙盘模块">沙盘模块</h4><p>对于影人，各个部件就是骨骼，部件之间的转轴就是关节。现实中表演者是用几根棍子拖动影人的主要关节来使其移动的，游戏里我们可以用鼠标拖动模拟棍子拖动。对于没有棍子控制的部位，一般使用重力+惯性的方式使其移动。在Unity里，这意味着它们要附着刚体与碰撞体组件。</p><p>如果先不考虑影人的自动移动与表演，单纯把影人作为一个2D布娃娃来看的话，只需要用铰链关节把各部位连接起来就可以了。技术可行。此外，2D布娃娃也可以作为系统的一部分，让用户拖着这个布娃娃在空白的场景里自由的玩耍。这就是沙盘模块。</p><h4 id="戏剧播放模块">戏剧播放模块</h4><p>既然是复原实物皮影戏，那程序肯定得能播放经典的皮影戏剧。直接放视频未免显得太敷衍，我们要搭建一套完善的皮影戏剧播放模块。在实现了沙盘模块的基础上，我们有两个选择：</p><ul><li>不沿用2D布娃娃系统，改用2D骨骼动画。这种方式比较困难，因为皮影剧目往往持续十分钟以上，如果用K帧的方式做动画的话工作量太大。</li><li>沿用2D布娃娃系统，想办法借此制作动画。</li></ul><p>一番权衡利弊，还是在沙盘模式的基础上制作剧目动画比较好。而且如果给沙盘模式加入录制功能的话，玩家也可以自己录剧目自己看，也不失为一种乐趣。</p><p>就像视频是由一帧帧图片构成的一样，数字皮影剧目里，“一帧”是由场景内众多元素的位置信息构成的。只要每隔一段极短的时间，把时间信息与当前帧所有元素的位置信息写入文件，就可以完成“剧目”的记录。播放时，读取文件即可播放剧目。</p><h4 id="图鉴模块">图鉴模块</h4><p>作为科普应用，我们的系统自然也是得有图鉴模块的。图鉴模块就比较简单，一个滑动窗口+若干UI元素就完事了。当然，要做的花哨的话，也可以模仿老滚5的加载界面，点一个UI单元，右边就会呈现它的模型。</p><h2 id="编码">编码</h2><p>沙盘模块做完以后，做其他模块都会比较方便，所以笔者首先进行沙盘模块的编码。</p><h3 id="踩坑">踩坑</h3><h4 id="拖拽与铰链关节的配合">拖拽与铰链关节的配合</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnMouseDown</span>()</span><br>&#123;<br>    <span class="hljs-comment">//将物体坐标转换为屏幕坐标，获取Z轴长度</span><br>    _screenPoint = Camera.main.WorldToScreenPoint(gameObject.transform.position);<br>    <span class="hljs-comment">//计算物体中心点和鼠标触发点坐标得差值</span><br>    _offset = gameObject.transform.position - Camera.main.ScreenToWorldPoint(<span class="hljs-keyword">new</span> Vector3(Input.mousePosition.x, Input.mousePosition.y, _screenPoint.z));<br>&#125;<br></code></pre></td></tr></table></figure><p>OnMouseDrag()事件函数本质上是改变Transform的position，并不是对刚体产生影响，而铰链关节的相互作用是基于刚体的。因此，使用OnMouseDrag()编写的拖拽功能，在生效时，整个影人都是静止的，完全不存在惯性。</p><p>可能是笔者才疏学浅，到目前为止没听说过基于刚体的拖拽实现。因此，我们要在保留OnMouseDrag拖拽的同时，对刚体进行处理。</p><p>如果按照现实物理的思路，应当为对象手动添加“与拖拽相关联的惯性”。在OnMouseDrag()中记录鼠标移动增量，并以此作为速度。通过Update+Lerp实现对象Rigidbody.velocity不断向鼠标移动速度逼近，以此模仿惯性。然而，这种方式实现起来还是比较困难，同时也比较耗性能。</p><p>惯性在含有铰链关节的对象上最显著的表现是：对象物体向一端加速移动时，铰链连接着的另一物体会呈现“向反方向移动”的表现。那么，是不是只要在拖动父物体时，给子物体施加反方向速度，就能模拟惯性呢？</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnMouseDrag</span>()</span>&#123;<br>    Vector3 _prevPosition = _curPosition;<span class="hljs-comment">//记录此前鼠标位置</span><br>    _curScreenPoint = <span class="hljs-keyword">new</span> Vector3(Input.mousePosition.x, Input.mousePosition.y, _screenPoint.z);<br>_curPosition = Camera.main.ScreenToWorldPoint(_curScreenPoint) + _offset;<span class="hljs-comment">//坐标系转换</span><br>_velocity = InertiiaPara*(_curPosition - _prevPosition);<span class="hljs-comment">//计算速度，其中InertiiaPara表示速度系数，越大，对反方向施加的速度就越大</span><br>transform.position = _curPosition;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果非常好。</p><h4 id="多相机混合">多相机混合</h4><p>第一次用著名Unity插件Top-Down Engine时，单独UICamera渲染UI的实现方式深深震撼了Unity初学者的心。不管怎么说，这个项目笔者都要用上这种方式。</p><p>新建一个Camera，把AudioListener去掉（<strong>场景内通常只存在一个Audio Listener，一般附着在MainCamera上</strong>），把它的投影方式设置为正交（因为UI不需要透视）。</p><p>注意，Clear Flags要设置为DepthOnly。这里的Depth指的是相机的Depth，Depth越高的相机渲染次序越靠后。即便UI位于一大堆主相机看着的Opaque物体之后，只要UICamera的Depth大于MainCamera，UI就能好好显示。网上有个设置UICamera的教材让把ClearFlag设置为Dont Clear，属实误人子弟。</p><p>Culling Mask设置为UI，这样UICamera就不会渲染其他不小心跑进来的东西。</p><h4 id="代码控制scale">代码控制Scale</h4><p>对于2DSprite，调整Scale时，变化的基点是Pivot。例如，Pivot位于中心的正方形，Scale等比例增大时，其四条边均匀远离中心。Pivot位于下边中点的正方形，Scale等比例增大时，下边的世界坐标（这么说其实不严谨，理解就行）不会发生变化。</p><p>通过改变Sprite的Pivot（在SpriteEditor中进行），可以避免例如位于屏幕边缘的Sprite调整Scale后超出屏幕范围的情况。</p>]]></content>
    
    
    
    <tags>
      
      <tag>数字皮影戏系统</tag>
      
      <tag>开发日志</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
